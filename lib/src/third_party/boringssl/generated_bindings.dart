// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to BoringSSL.
class BoringSsl {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BoringSsl(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BoringSsl.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdinp =
      _lookup<ffi.Pointer<FILE>>('__stdinp');

  ffi.Pointer<FILE> get __stdinp => ___stdinp.value;

  set __stdinp(ffi.Pointer<FILE> value) => ___stdinp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stdoutp =
      _lookup<ffi.Pointer<FILE>>('__stdoutp');

  ffi.Pointer<FILE> get __stdoutp => ___stdoutp.value;

  set __stdoutp(ffi.Pointer<FILE> value) => ___stdoutp.value = value;

  late final ffi.Pointer<ffi.Pointer<FILE>> ___stderrp =
      _lookup<ffi.Pointer<FILE>>('__stderrp');

  ffi.Pointer<FILE> get __stderrp => ___stderrp.value;

  set __stderrp(ffi.Pointer<FILE> value) => ___stderrp.value = value;

  late final ffi.Pointer<ffi.Int32> _sys_nerr = _lookup<ffi.Int32>('sys_nerr');

  int get sys_nerr => _sys_nerr.value;

  set sys_nerr(int value) => _sys_nerr.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _sys_errlist =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('sys_errlist');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get sys_errlist => _sys_errlist.value;

  set sys_errlist(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) =>
      _sys_errlist.value = value;

  /// // ERR_get_error gets the packed error code for the least recent error and
  /// // removes that error from the queue. If there are no errors in the queue then
  /// // it returns zero.
  int ERR_get_error() {
    return (_ERR_get_error ??=
        _lookup<ffi.NativeFunction<_c_ERR_get_error>>('ERR_get_error')
            .asFunction<_dart_ERR_get_error>())();
  }

  _dart_ERR_get_error? _ERR_get_error;

  /// // The "peek" functions act like the |ERR_get_error| functions, above, but they
  /// // do not remove the error from the queue.
  int ERR_peek_error() {
    return (_ERR_peek_error ??=
        _lookup<ffi.NativeFunction<_c_ERR_peek_error>>('ERR_peek_error')
            .asFunction<_dart_ERR_peek_error>())();
  }

  _dart_ERR_peek_error? _ERR_peek_error;

  /// // ERR_error_string_n generates a human-readable string representing
  /// // |packed_error|, places it at |buf|, and returns |buf|. It writes at most
  /// // |len| bytes (including the terminating NUL) and truncates the string if
  /// // necessary. If |len| is greater than zero then |buf| is always NUL terminated.
  /// //
  /// // The string will have the following format:
  /// //
  /// //   error:[error code]:[library name]:OPENSSL_internal:[reason string]
  /// //
  /// // error code is an 8 digit hexadecimal number; library name and reason string
  /// // are ASCII text.
  ffi.Pointer<ffi.Int8> ERR_error_string_n(
    int packed_error,
    ffi.Pointer<ffi.Int8> buf,
    int len,
  ) {
    return (_ERR_error_string_n ??=
        _lookup<ffi.NativeFunction<_c_ERR_error_string_n>>('ERR_error_string_n')
            .asFunction<_dart_ERR_error_string_n>())(
      packed_error,
      buf,
      len,
    );
  }

  _dart_ERR_error_string_n? _ERR_error_string_n;

  /// // ERR_clear_error clears the error queue for the current thread.
  void ERR_clear_error() {
    return (_ERR_clear_error ??=
        _lookup<ffi.NativeFunction<_c_ERR_clear_error>>('ERR_clear_error')
            .asFunction<_dart_ERR_clear_error>())();
  }

  _dart_ERR_clear_error? _ERR_clear_error;

  ffi.Pointer<evp_cipher_st> EVP_aes_128_cbc() {
    return (_EVP_aes_128_cbc ??=
        _lookup<ffi.NativeFunction<_c_EVP_aes_128_cbc>>('EVP_aes_128_cbc')
            .asFunction<_dart_EVP_aes_128_cbc>())();
  }

  _dart_EVP_aes_128_cbc? _EVP_aes_128_cbc;

  ffi.Pointer<evp_cipher_st> EVP_aes_128_ctr() {
    return (_EVP_aes_128_ctr ??=
        _lookup<ffi.NativeFunction<_c_EVP_aes_128_ctr>>('EVP_aes_128_ctr')
            .asFunction<_dart_EVP_aes_128_ctr>())();
  }

  _dart_EVP_aes_128_ctr? _EVP_aes_128_ctr;

  ffi.Pointer<evp_cipher_st> EVP_aes_256_cbc() {
    return (_EVP_aes_256_cbc ??=
        _lookup<ffi.NativeFunction<_c_EVP_aes_256_cbc>>('EVP_aes_256_cbc')
            .asFunction<_dart_EVP_aes_256_cbc>())();
  }

  _dart_EVP_aes_256_cbc? _EVP_aes_256_cbc;

  ffi.Pointer<evp_cipher_st> EVP_aes_256_ctr() {
    return (_EVP_aes_256_ctr ??=
        _lookup<ffi.NativeFunction<_c_EVP_aes_256_ctr>>('EVP_aes_256_ctr')
            .asFunction<_dart_EVP_aes_256_ctr>())();
  }

  _dart_EVP_aes_256_ctr? _EVP_aes_256_ctr;

  /// // EVP_CIPHER_CTX_new allocates a fresh |EVP_CIPHER_CTX|, calls
  /// // |EVP_CIPHER_CTX_init| and returns it, or NULL on allocation failure.
  ffi.Pointer<evp_cipher_ctx_st> EVP_CIPHER_CTX_new() {
    return (_EVP_CIPHER_CTX_new ??=
        _lookup<ffi.NativeFunction<_c_EVP_CIPHER_CTX_new>>('EVP_CIPHER_CTX_new')
            .asFunction<_dart_EVP_CIPHER_CTX_new>())();
  }

  _dart_EVP_CIPHER_CTX_new? _EVP_CIPHER_CTX_new;

  /// // EVP_CIPHER_CTX_free calls |EVP_CIPHER_CTX_cleanup| on |ctx| and then frees
  /// // |ctx| itself.
  void EVP_CIPHER_CTX_free(
    ffi.Pointer<evp_cipher_ctx_st> ctx,
  ) {
    return (_EVP_CIPHER_CTX_free ??=
        _lookup<ffi.NativeFunction<_c_EVP_CIPHER_CTX_free>>(
                'EVP_CIPHER_CTX_free')
            .asFunction<_dart_EVP_CIPHER_CTX_free>())(
      ctx,
    );
  }

  _dart_EVP_CIPHER_CTX_free? _EVP_CIPHER_CTX_free;

  /// // EVP_CipherInit_ex configures |ctx| for a fresh encryption (or decryption, if
  /// // |enc| is zero) operation using |cipher|. If |ctx| has been previously
  /// // configured with a cipher then |cipher|, |key| and |iv| may be |NULL| and
  /// // |enc| may be -1 to reuse the previous values. The operation will use |key|
  /// // as the key and |iv| as the IV (if any). These should have the correct
  /// // lengths given by |EVP_CIPHER_key_length| and |EVP_CIPHER_iv_length|. It
  /// // returns one on success and zero on error.
  int EVP_CipherInit_ex(
    ffi.Pointer<evp_cipher_ctx_st> ctx,
    ffi.Pointer<evp_cipher_st> cipher,
    ffi.Pointer<engine_st> engine,
    ffi.Pointer<ffi.Uint8> key,
    ffi.Pointer<ffi.Uint8> iv,
    int enc,
  ) {
    return (_EVP_CipherInit_ex ??=
        _lookup<ffi.NativeFunction<_c_EVP_CipherInit_ex>>('EVP_CipherInit_ex')
            .asFunction<_dart_EVP_CipherInit_ex>())(
      ctx,
      cipher,
      engine,
      key,
      iv,
      enc,
    );
  }

  _dart_EVP_CipherInit_ex? _EVP_CipherInit_ex;

  /// // EVP_CipherUpdate calls either |EVP_EncryptUpdate| or |EVP_DecryptUpdate|
  /// // depending on how |ctx| has been setup.
  int EVP_CipherUpdate(
    ffi.Pointer<evp_cipher_ctx_st> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int32> out_len,
    ffi.Pointer<ffi.Uint8> in_1,
    int in_len,
  ) {
    return (_EVP_CipherUpdate ??=
        _lookup<ffi.NativeFunction<_c_EVP_CipherUpdate>>('EVP_CipherUpdate')
            .asFunction<_dart_EVP_CipherUpdate>())(
      ctx,
      out,
      out_len,
      in_1,
      in_len,
    );
  }

  _dart_EVP_CipherUpdate? _EVP_CipherUpdate;

  /// // EVP_CipherFinal_ex calls either |EVP_EncryptFinal_ex| or
  /// // |EVP_DecryptFinal_ex| depending on how |ctx| has been setup.
  int EVP_CipherFinal_ex(
    ffi.Pointer<evp_cipher_ctx_st> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Int32> out_len,
  ) {
    return (_EVP_CipherFinal_ex ??=
        _lookup<ffi.NativeFunction<_c_EVP_CipherFinal_ex>>('EVP_CipherFinal_ex')
            .asFunction<_dart_EVP_CipherFinal_ex>())(
      ctx,
      out,
      out_len,
    );
  }

  _dart_EVP_CipherFinal_ex? _EVP_CipherFinal_ex;

  /// // EVP_CIPHER_block_size returns the block size, in bytes, for |cipher|, or one
  /// // if |cipher| is a stream cipher.
  int EVP_CIPHER_block_size(
    ffi.Pointer<evp_cipher_st> cipher,
  ) {
    return (_EVP_CIPHER_block_size ??=
        _lookup<ffi.NativeFunction<_c_EVP_CIPHER_block_size>>(
                'EVP_CIPHER_block_size')
            .asFunction<_dart_EVP_CIPHER_block_size>())(
      cipher,
    );
  }

  _dart_EVP_CIPHER_block_size? _EVP_CIPHER_block_size;

  /// // EVP_CIPHER_iv_length returns the IV size, in bytes, of |cipher|, or zero if
  /// // |cipher| doesn't take an IV.
  int EVP_CIPHER_iv_length(
    ffi.Pointer<evp_cipher_st> cipher,
  ) {
    return (_EVP_CIPHER_iv_length ??=
        _lookup<ffi.NativeFunction<_c_EVP_CIPHER_iv_length>>(
                'EVP_CIPHER_iv_length')
            .asFunction<_dart_EVP_CIPHER_iv_length>())(
      cipher,
    );
  }

  _dart_EVP_CIPHER_iv_length? _EVP_CIPHER_iv_length;

  ffi.Pointer<EVP_MD> EVP_sha1() {
    return (_EVP_sha1 ??= _lookup<ffi.NativeFunction<_c_EVP_sha1>>('EVP_sha1')
        .asFunction<_dart_EVP_sha1>())();
  }

  _dart_EVP_sha1? _EVP_sha1;

  ffi.Pointer<EVP_MD> EVP_sha256() {
    return (_EVP_sha256 ??=
        _lookup<ffi.NativeFunction<_c_EVP_sha256>>('EVP_sha256')
            .asFunction<_dart_EVP_sha256>())();
  }

  _dart_EVP_sha256? _EVP_sha256;

  ffi.Pointer<EVP_MD> EVP_sha384() {
    return (_EVP_sha384 ??=
        _lookup<ffi.NativeFunction<_c_EVP_sha384>>('EVP_sha384')
            .asFunction<_dart_EVP_sha384>())();
  }

  _dart_EVP_sha384? _EVP_sha384;

  ffi.Pointer<EVP_MD> EVP_sha512() {
    return (_EVP_sha512 ??=
        _lookup<ffi.NativeFunction<_c_EVP_sha512>>('EVP_sha512')
            .asFunction<_dart_EVP_sha512>())();
  }

  _dart_EVP_sha512? _EVP_sha512;

  /// // EVP_MD_CTX_new allocates and initialises a fresh |EVP_MD_CTX| and returns
  /// // it, or NULL on allocation failure. The caller must use |EVP_MD_CTX_free| to
  /// // release the resulting object.
  ffi.Pointer<EVP_MD_CTX> EVP_MD_CTX_new() {
    return (_EVP_MD_CTX_new ??=
        _lookup<ffi.NativeFunction<_c_EVP_MD_CTX_new>>('EVP_MD_CTX_new')
            .asFunction<_dart_EVP_MD_CTX_new>())();
  }

  _dart_EVP_MD_CTX_new? _EVP_MD_CTX_new;

  /// // EVP_MD_CTX_free calls |EVP_MD_CTX_cleanup| and then frees |ctx| itself.
  void EVP_MD_CTX_free(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return (_EVP_MD_CTX_free ??=
        _lookup<ffi.NativeFunction<_c_EVP_MD_CTX_free>>('EVP_MD_CTX_free')
            .asFunction<_dart_EVP_MD_CTX_free>())(
      ctx,
    );
  }

  _dart_EVP_MD_CTX_free? _EVP_MD_CTX_free;

  /// // EVP_DigestInit acts like |EVP_DigestInit_ex| except that |ctx| is
  /// // initialised before use.
  int EVP_DigestInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<EVP_MD> type,
  ) {
    return (_EVP_DigestInit ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestInit>>('EVP_DigestInit')
            .asFunction<_dart_EVP_DigestInit>())(
      ctx,
      type,
    );
  }

  _dart_EVP_DigestInit? _EVP_DigestInit;

  /// // EVP_DigestUpdate hashes |len| bytes from |data| into the hashing operation
  /// // in |ctx|. It returns one.
  int EVP_DigestUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return (_EVP_DigestUpdate ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestUpdate>>('EVP_DigestUpdate')
            .asFunction<_dart_EVP_DigestUpdate>())(
      ctx,
      data,
      len,
    );
  }

  _dart_EVP_DigestUpdate? _EVP_DigestUpdate;

  /// // EVP_DigestFinal acts like |EVP_DigestFinal_ex| except that
  /// // |EVP_MD_CTX_cleanup| is called on |ctx| before returning.
  int EVP_DigestFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> md_out,
    ffi.Pointer<ffi.Uint32> out_size,
  ) {
    return (_EVP_DigestFinal ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestFinal>>('EVP_DigestFinal')
            .asFunction<_dart_EVP_DigestFinal>())(
      ctx,
      md_out,
      out_size,
    );
  }

  _dart_EVP_DigestFinal? _EVP_DigestFinal;

  /// // EVP_MD_size returns the digest size of |md|, in bytes.
  int EVP_MD_size(
    ffi.Pointer<EVP_MD> md,
  ) {
    return (_EVP_MD_size ??=
        _lookup<ffi.NativeFunction<_c_EVP_MD_size>>('EVP_MD_size')
            .asFunction<_dart_EVP_MD_size>())(
      md,
    );
  }

  _dart_EVP_MD_size? _EVP_MD_size;

  /// // EVP_MD_CTX_size returns the digest size of |ctx|, in bytes. It
  /// // will crash if a digest hasn't been set on |ctx|.
  int EVP_MD_CTX_size(
    ffi.Pointer<EVP_MD_CTX> ctx,
  ) {
    return (_EVP_MD_CTX_size ??=
        _lookup<ffi.NativeFunction<_c_EVP_MD_CTX_size>>('EVP_MD_CTX_size')
            .asFunction<_dart_EVP_MD_CTX_size>())(
      ctx,
    );
  }

  _dart_EVP_MD_CTX_size? _EVP_MD_CTX_size;

  /// // EVP_aead_aes_128_gcm is AES-128 in Galois Counter Mode.
  /// //
  /// // Note: AES-GCM should only be used with 12-byte (96-bit) nonces. Although it
  /// // is specified to take a variable-length nonce, nonces with other lengths are
  /// // effectively randomized, which means one must consider collisions. Unless
  /// // implementing an existing protocol which has already specified incorrect
  /// // parameters, only use 12-byte nonces.
  ffi.Pointer<evp_aead_st> EVP_aead_aes_128_gcm() {
    return (_EVP_aead_aes_128_gcm ??=
        _lookup<ffi.NativeFunction<_c_EVP_aead_aes_128_gcm>>(
                'EVP_aead_aes_128_gcm')
            .asFunction<_dart_EVP_aead_aes_128_gcm>())();
  }

  _dart_EVP_aead_aes_128_gcm? _EVP_aead_aes_128_gcm;

  /// // EVP_aead_aes_256_gcm is AES-256 in Galois Counter Mode.
  /// //
  /// // Note: AES-GCM should only be used with 12-byte (96-bit) nonces. Although it
  /// // is specified to take a variable-length nonce, nonces with other lengths are
  /// // effectively randomized, which means one must consider collisions. Unless
  /// // implementing an existing protocol which has already specified incorrect
  /// // parameters, only use 12-byte nonces.
  ffi.Pointer<evp_aead_st> EVP_aead_aes_256_gcm() {
    return (_EVP_aead_aes_256_gcm ??=
        _lookup<ffi.NativeFunction<_c_EVP_aead_aes_256_gcm>>(
                'EVP_aead_aes_256_gcm')
            .asFunction<_dart_EVP_aead_aes_256_gcm>())();
  }

  _dart_EVP_aead_aes_256_gcm? _EVP_aead_aes_256_gcm;

  /// // EVP_AEAD_key_length returns the length, in bytes, of the keys used by
  /// // |aead|.
  int EVP_AEAD_key_length(
    ffi.Pointer<evp_aead_st> aead,
  ) {
    return (_EVP_AEAD_key_length ??=
        _lookup<ffi.NativeFunction<_c_EVP_AEAD_key_length>>(
                'EVP_AEAD_key_length')
            .asFunction<_dart_EVP_AEAD_key_length>())(
      aead,
    );
  }

  _dart_EVP_AEAD_key_length? _EVP_AEAD_key_length;

  /// // EVP_AEAD_nonce_length returns the length, in bytes, of the per-message nonce
  /// // for |aead|.
  int EVP_AEAD_nonce_length(
    ffi.Pointer<evp_aead_st> aead,
  ) {
    return (_EVP_AEAD_nonce_length ??=
        _lookup<ffi.NativeFunction<_c_EVP_AEAD_nonce_length>>(
                'EVP_AEAD_nonce_length')
            .asFunction<_dart_EVP_AEAD_nonce_length>())(
      aead,
    );
  }

  _dart_EVP_AEAD_nonce_length? _EVP_AEAD_nonce_length;

  /// // EVP_AEAD_max_overhead returns the maximum number of additional bytes added
  /// // by the act of sealing data with |aead|.
  int EVP_AEAD_max_overhead(
    ffi.Pointer<evp_aead_st> aead,
  ) {
    return (_EVP_AEAD_max_overhead ??=
        _lookup<ffi.NativeFunction<_c_EVP_AEAD_max_overhead>>(
                'EVP_AEAD_max_overhead')
            .asFunction<_dart_EVP_AEAD_max_overhead>())(
      aead,
    );
  }

  _dart_EVP_AEAD_max_overhead? _EVP_AEAD_max_overhead;

  /// // EVP_AEAD_max_tag_len returns the maximum tag length when using |aead|. This
  /// // is the largest value that can be passed as |tag_len| to
  /// // |EVP_AEAD_CTX_init|.
  int EVP_AEAD_max_tag_len(
    ffi.Pointer<evp_aead_st> aead,
  ) {
    return (_EVP_AEAD_max_tag_len ??=
        _lookup<ffi.NativeFunction<_c_EVP_AEAD_max_tag_len>>(
                'EVP_AEAD_max_tag_len')
            .asFunction<_dart_EVP_AEAD_max_tag_len>())(
      aead,
    );
  }

  _dart_EVP_AEAD_max_tag_len? _EVP_AEAD_max_tag_len;

  /// // EVP_AEAD_CTX_new allocates an |EVP_AEAD_CTX|, calls |EVP_AEAD_CTX_init| and
  /// // returns the |EVP_AEAD_CTX|, or NULL on error.
  ffi.Pointer<EVP_AEAD_CTX> EVP_AEAD_CTX_new(
    ffi.Pointer<evp_aead_st> aead,
    ffi.Pointer<ffi.Uint8> key,
    int key_len,
    int tag_len,
  ) {
    return (_EVP_AEAD_CTX_new ??=
        _lookup<ffi.NativeFunction<_c_EVP_AEAD_CTX_new>>('EVP_AEAD_CTX_new')
            .asFunction<_dart_EVP_AEAD_CTX_new>())(
      aead,
      key,
      key_len,
      tag_len,
    );
  }

  _dart_EVP_AEAD_CTX_new? _EVP_AEAD_CTX_new;

  /// // EVP_AEAD_CTX_free calls |EVP_AEAD_CTX_cleanup| and |OPENSSL_free| on
  /// // |ctx|.
  void EVP_AEAD_CTX_free(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
  ) {
    return (_EVP_AEAD_CTX_free ??=
        _lookup<ffi.NativeFunction<_c_EVP_AEAD_CTX_free>>('EVP_AEAD_CTX_free')
            .asFunction<_dart_EVP_AEAD_CTX_free>())(
      ctx,
    );
  }

  _dart_EVP_AEAD_CTX_free? _EVP_AEAD_CTX_free;

  /// // EVP_AEAD_CTX_seal encrypts and authenticates |in_len| bytes from |in| and
  /// // authenticates |ad_len| bytes from |ad| and writes the result to |out|. It
  /// // returns one on success and zero otherwise.
  /// //
  /// // This function may be called concurrently with itself or any other seal/open
  /// // function on the same |EVP_AEAD_CTX|.
  /// //
  /// // At most |max_out_len| bytes are written to |out| and, in order to ensure
  /// // success, |max_out_len| should be |in_len| plus the result of
  /// // |EVP_AEAD_max_overhead|. On successful return, |*out_len| is set to the
  /// // actual number of bytes written.
  /// //
  /// // The length of |nonce|, |nonce_len|, must be equal to the result of
  /// // |EVP_AEAD_nonce_length| for this AEAD.
  /// //
  /// // |EVP_AEAD_CTX_seal| never results in a partial output. If |max_out_len| is
  /// // insufficient, zero will be returned. If any error occurs, |out| will be
  /// // filled with zero bytes and |*out_len| set to zero.
  /// //
  /// // If |in| and |out| alias then |out| must be == |in|.
  int EVP_AEAD_CTX_seal(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.IntPtr> out_len,
    int max_out_len,
    ffi.Pointer<ffi.Uint8> nonce,
    int nonce_len,
    ffi.Pointer<ffi.Uint8> in_1,
    int in_len,
    ffi.Pointer<ffi.Uint8> ad,
    int ad_len,
  ) {
    return (_EVP_AEAD_CTX_seal ??=
        _lookup<ffi.NativeFunction<_c_EVP_AEAD_CTX_seal>>('EVP_AEAD_CTX_seal')
            .asFunction<_dart_EVP_AEAD_CTX_seal>())(
      ctx,
      out,
      out_len,
      max_out_len,
      nonce,
      nonce_len,
      in_1,
      in_len,
      ad,
      ad_len,
    );
  }

  _dart_EVP_AEAD_CTX_seal? _EVP_AEAD_CTX_seal;

  /// // EVP_AEAD_CTX_open authenticates |in_len| bytes from |in| and |ad_len| bytes
  /// // from |ad| and decrypts at most |in_len| bytes into |out|. It returns one on
  /// // success and zero otherwise.
  /// //
  /// // This function may be called concurrently with itself or any other seal/open
  /// // function on the same |EVP_AEAD_CTX|.
  /// //
  /// // At most |in_len| bytes are written to |out|. In order to ensure success,
  /// // |max_out_len| should be at least |in_len|. On successful return, |*out_len|
  /// // is set to the the actual number of bytes written.
  /// //
  /// // The length of |nonce|, |nonce_len|, must be equal to the result of
  /// // |EVP_AEAD_nonce_length| for this AEAD.
  /// //
  /// // |EVP_AEAD_CTX_open| never results in a partial output. If |max_out_len| is
  /// // insufficient, zero will be returned. If any error occurs, |out| will be
  /// // filled with zero bytes and |*out_len| set to zero.
  /// //
  /// // If |in| and |out| alias then |out| must be == |in|.
  int EVP_AEAD_CTX_open(
    ffi.Pointer<EVP_AEAD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.IntPtr> out_len,
    int max_out_len,
    ffi.Pointer<ffi.Uint8> nonce,
    int nonce_len,
    ffi.Pointer<ffi.Uint8> in_1,
    int in_len,
    ffi.Pointer<ffi.Uint8> ad,
    int ad_len,
  ) {
    return (_EVP_AEAD_CTX_open ??=
        _lookup<ffi.NativeFunction<_c_EVP_AEAD_CTX_open>>('EVP_AEAD_CTX_open')
            .asFunction<_dart_EVP_AEAD_CTX_open>())(
      ctx,
      out,
      out_len,
      max_out_len,
      nonce,
      nonce_len,
      in_1,
      in_len,
      ad,
      ad_len,
    );
  }

  _dart_EVP_AEAD_CTX_open? _EVP_AEAD_CTX_open;

  /// // EVP_PKEY_new creates a new, empty public-key object and returns it or NULL
  /// // on allocation failure.
  ffi.Pointer<EVP_PKEY> EVP_PKEY_new() {
    return (_EVP_PKEY_new ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_new>>('EVP_PKEY_new')
            .asFunction<_dart_EVP_PKEY_new>())();
  }

  _dart_EVP_PKEY_new? _EVP_PKEY_new;

  /// // EVP_PKEY_free frees all data referenced by |pkey| and then frees |pkey|
  /// // itself.
  void EVP_PKEY_free(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return (_EVP_PKEY_free ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_free>>('EVP_PKEY_free')
            .asFunction<_dart_EVP_PKEY_free>())(
      pkey,
    );
  }

  _dart_EVP_PKEY_free? _EVP_PKEY_free;

  /// // EVP_PKEY_id returns the type of |pkey|, which is one of the |EVP_PKEY_*|
  /// // values.
  int EVP_PKEY_id(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return (_EVP_PKEY_id ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_id>>('EVP_PKEY_id')
            .asFunction<_dart_EVP_PKEY_id>())(
      pkey,
    );
  }

  _dart_EVP_PKEY_id? _EVP_PKEY_id;

  /// // Getting and setting concrete public key types.
  /// //
  /// // The following functions get and set the underlying public key in an
  /// // |EVP_PKEY| object. The |set1| functions take an additional reference to the
  /// // underlying key and return one on success or zero if |key| is NULL. The
  /// // |assign| functions adopt the caller's reference and return one on success or
  /// // zero if |key| is NULL. The |get1| functions return a fresh reference to the
  /// // underlying object or NULL if |pkey| is not of the correct type. The |get0|
  /// // functions behave the same but return a non-owning pointer.
  /// //
  /// // The |get0| and |get1| functions take |const| pointers and are thus
  /// // non-mutating for thread-safety purposes, but mutating functions on the
  /// // returned lower-level objects are considered to also mutate the |EVP_PKEY| and
  /// // may not be called concurrently with other operations on the |EVP_PKEY|.
  int EVP_PKEY_set1_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<rsa_st> key,
  ) {
    return (_EVP_PKEY_set1_RSA ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_set1_RSA>>('EVP_PKEY_set1_RSA')
            .asFunction<_dart_EVP_PKEY_set1_RSA>())(
      pkey,
      key,
    );
  }

  _dart_EVP_PKEY_set1_RSA? _EVP_PKEY_set1_RSA;

  ffi.Pointer<rsa_st> EVP_PKEY_get1_RSA(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return (_EVP_PKEY_get1_RSA ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_get1_RSA>>('EVP_PKEY_get1_RSA')
            .asFunction<_dart_EVP_PKEY_get1_RSA>())(
      pkey,
    );
  }

  _dart_EVP_PKEY_get1_RSA? _EVP_PKEY_get1_RSA;

  int EVP_PKEY_set1_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<ec_key_st> key,
  ) {
    return (_EVP_PKEY_set1_EC_KEY ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_set1_EC_KEY>>(
                'EVP_PKEY_set1_EC_KEY')
            .asFunction<_dart_EVP_PKEY_set1_EC_KEY>())(
      pkey,
      key,
    );
  }

  _dart_EVP_PKEY_set1_EC_KEY? _EVP_PKEY_set1_EC_KEY;

  ffi.Pointer<ec_key_st> EVP_PKEY_get1_EC_KEY(
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return (_EVP_PKEY_get1_EC_KEY ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_get1_EC_KEY>>(
                'EVP_PKEY_get1_EC_KEY')
            .asFunction<_dart_EVP_PKEY_get1_EC_KEY>())(
      pkey,
    );
  }

  _dart_EVP_PKEY_get1_EC_KEY? _EVP_PKEY_get1_EC_KEY;

  /// // EVP_PKEY_set_type sets the type of |pkey| to |type|. It returns one if
  /// // successful or zero if the |type| argument is not one of the |EVP_PKEY_*|
  /// // values. If |pkey| is NULL, it simply reports whether the type is known.
  int EVP_PKEY_set_type(
    ffi.Pointer<EVP_PKEY> pkey,
    int type,
  ) {
    return (_EVP_PKEY_set_type ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_set_type>>('EVP_PKEY_set_type')
            .asFunction<_dart_EVP_PKEY_set_type>())(
      pkey,
      type,
    );
  }

  _dart_EVP_PKEY_set_type? _EVP_PKEY_set_type;

  /// // EVP_parse_public_key decodes a DER-encoded SubjectPublicKeyInfo structure
  /// // (RFC 5280) from |cbs| and advances |cbs|. It returns a newly-allocated
  /// // |EVP_PKEY| or NULL on error. If the key is an EC key, the curve is guaranteed
  /// // to be set.
  /// //
  /// // The caller must check the type of the parsed public key to ensure it is
  /// // suitable and validate other desired key properties such as RSA modulus size
  /// // or EC curve.
  ffi.Pointer<EVP_PKEY> EVP_parse_public_key(
    ffi.Pointer<CBS> cbs,
  ) {
    return (_EVP_parse_public_key ??=
        _lookup<ffi.NativeFunction<_c_EVP_parse_public_key>>(
                'EVP_parse_public_key')
            .asFunction<_dart_EVP_parse_public_key>())(
      cbs,
    );
  }

  _dart_EVP_parse_public_key? _EVP_parse_public_key;

  /// // EVP_marshal_public_key marshals |key| as a DER-encoded SubjectPublicKeyInfo
  /// // structure (RFC 5280) and appends the result to |cbb|. It returns one on
  /// // success and zero on error.
  int EVP_marshal_public_key(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<EVP_PKEY> key,
  ) {
    return (_EVP_marshal_public_key ??=
        _lookup<ffi.NativeFunction<_c_EVP_marshal_public_key>>(
                'EVP_marshal_public_key')
            .asFunction<_dart_EVP_marshal_public_key>())(
      cbb,
      key,
    );
  }

  _dart_EVP_marshal_public_key? _EVP_marshal_public_key;

  /// // EVP_parse_private_key decodes a DER-encoded PrivateKeyInfo structure (RFC
  /// // 5208) from |cbs| and advances |cbs|. It returns a newly-allocated |EVP_PKEY|
  /// // or NULL on error.
  /// //
  /// // The caller must check the type of the parsed private key to ensure it is
  /// // suitable and validate other desired key properties such as RSA modulus size
  /// // or EC curve.
  /// //
  /// // A PrivateKeyInfo ends with an optional set of attributes. These are not
  /// // processed and so this function will silently ignore any trailing data in the
  /// // structure.
  ffi.Pointer<EVP_PKEY> EVP_parse_private_key(
    ffi.Pointer<CBS> cbs,
  ) {
    return (_EVP_parse_private_key ??=
        _lookup<ffi.NativeFunction<_c_EVP_parse_private_key>>(
                'EVP_parse_private_key')
            .asFunction<_dart_EVP_parse_private_key>())(
      cbs,
    );
  }

  _dart_EVP_parse_private_key? _EVP_parse_private_key;

  /// // EVP_marshal_private_key marshals |key| as a DER-encoded PrivateKeyInfo
  /// // structure (RFC 5208) and appends the result to |cbb|. It returns one on
  /// // success and zero on error.
  int EVP_marshal_private_key(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<EVP_PKEY> key,
  ) {
    return (_EVP_marshal_private_key ??=
        _lookup<ffi.NativeFunction<_c_EVP_marshal_private_key>>(
                'EVP_marshal_private_key')
            .asFunction<_dart_EVP_marshal_private_key>())(
      cbb,
      key,
    );
  }

  _dart_EVP_marshal_private_key? _EVP_marshal_private_key;

  /// // EVP_DigestSignInit sets up |ctx| for a signing operation with |type| and
  /// // |pkey|. The |ctx| argument must have been initialised with
  /// // |EVP_MD_CTX_init|. If |pctx| is not NULL, the |EVP_PKEY_CTX| of the signing
  /// // operation will be written to |*pctx|; this can be used to set alternative
  /// // signing options.
  /// //
  /// // For single-shot signing algorithms which do not use a pre-hash, such as
  /// // Ed25519, |type| should be NULL. The |EVP_MD_CTX| itself is unused but is
  /// // present so the API is uniform. See |EVP_DigestSign|.
  /// //
  /// // This function does not mutate |pkey| for thread-safety purposes and may be
  /// // used concurrently with other non-mutating functions on |pkey|.
  /// //
  /// // It returns one on success, or zero on error.
  int EVP_DigestSignInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<engine_st> e,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return (_EVP_DigestSignInit ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestSignInit>>('EVP_DigestSignInit')
            .asFunction<_dart_EVP_DigestSignInit>())(
      ctx,
      pctx,
      type,
      e,
      pkey,
    );
  }

  _dart_EVP_DigestSignInit? _EVP_DigestSignInit;

  /// // EVP_DigestSignUpdate appends |len| bytes from |data| to the data which will
  /// // be signed in |EVP_DigestSignFinal|. It returns one.
  /// //
  /// // This function performs a streaming signing operation and will fail for
  /// // signature algorithms which do not support this. Use |EVP_DigestSign| for a
  /// // single-shot operation.
  int EVP_DigestSignUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return (_EVP_DigestSignUpdate ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestSignUpdate>>(
                'EVP_DigestSignUpdate')
            .asFunction<_dart_EVP_DigestSignUpdate>())(
      ctx,
      data,
      len,
    );
  }

  _dart_EVP_DigestSignUpdate? _EVP_DigestSignUpdate;

  /// // EVP_DigestSignFinal signs the data that has been included by one or more
  /// // calls to |EVP_DigestSignUpdate|. If |out_sig| is NULL then |*out_sig_len| is
  /// // set to the maximum number of output bytes. Otherwise, on entry,
  /// // |*out_sig_len| must contain the length of the |out_sig| buffer. If the call
  /// // is successful, the signature is written to |out_sig| and |*out_sig_len| is
  /// // set to its length.
  /// //
  /// // This function performs a streaming signing operation and will fail for
  /// // signature algorithms which do not support this. Use |EVP_DigestSign| for a
  /// // single-shot operation.
  /// //
  /// // It returns one on success, or zero on error.
  int EVP_DigestSignFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out_sig,
    ffi.Pointer<ffi.IntPtr> out_sig_len,
  ) {
    return (_EVP_DigestSignFinal ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestSignFinal>>(
                'EVP_DigestSignFinal')
            .asFunction<_dart_EVP_DigestSignFinal>())(
      ctx,
      out_sig,
      out_sig_len,
    );
  }

  _dart_EVP_DigestSignFinal? _EVP_DigestSignFinal;

  /// // EVP_DigestVerifyInit sets up |ctx| for a signature verification operation
  /// // with |type| and |pkey|. The |ctx| argument must have been initialised with
  /// // |EVP_MD_CTX_init|. If |pctx| is not NULL, the |EVP_PKEY_CTX| of the signing
  /// // operation will be written to |*pctx|; this can be used to set alternative
  /// // signing options.
  /// //
  /// // For single-shot signing algorithms which do not use a pre-hash, such as
  /// // Ed25519, |type| should be NULL. The |EVP_MD_CTX| itself is unused but is
  /// // present so the API is uniform. See |EVP_DigestVerify|.
  /// //
  /// // This function does not mutate |pkey| for thread-safety purposes and may be
  /// // used concurrently with other non-mutating functions on |pkey|.
  /// //
  /// // It returns one on success, or zero on error.
  int EVP_DigestVerifyInit(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
    ffi.Pointer<EVP_MD> type,
    ffi.Pointer<engine_st> e,
    ffi.Pointer<EVP_PKEY> pkey,
  ) {
    return (_EVP_DigestVerifyInit ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestVerifyInit>>(
                'EVP_DigestVerifyInit')
            .asFunction<_dart_EVP_DigestVerifyInit>())(
      ctx,
      pctx,
      type,
      e,
      pkey,
    );
  }

  _dart_EVP_DigestVerifyInit? _EVP_DigestVerifyInit;

  /// // EVP_DigestVerifyUpdate appends |len| bytes from |data| to the data which
  /// // will be verified by |EVP_DigestVerifyFinal|. It returns one.
  /// //
  /// // This function performs streaming signature verification and will fail for
  /// // signature algorithms which do not support this. Use |EVP_PKEY_verify_message|
  /// // for a single-shot verification.
  int EVP_DigestVerifyUpdate(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return (_EVP_DigestVerifyUpdate ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestVerifyUpdate>>(
                'EVP_DigestVerifyUpdate')
            .asFunction<_dart_EVP_DigestVerifyUpdate>())(
      ctx,
      data,
      len,
    );
  }

  _dart_EVP_DigestVerifyUpdate? _EVP_DigestVerifyUpdate;

  /// // EVP_DigestVerifyFinal verifies that |sig_len| bytes of |sig| are a valid
  /// // signature for the data that has been included by one or more calls to
  /// // |EVP_DigestVerifyUpdate|. It returns one on success and zero otherwise.
  /// //
  /// // This function performs streaming signature verification and will fail for
  /// // signature algorithms which do not support this. Use |EVP_PKEY_verify_message|
  /// // for a single-shot verification.
  int EVP_DigestVerifyFinal(
    ffi.Pointer<EVP_MD_CTX> ctx,
    ffi.Pointer<ffi.Uint8> sig,
    int sig_len,
  ) {
    return (_EVP_DigestVerifyFinal ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestVerifyFinal>>(
                'EVP_DigestVerifyFinal')
            .asFunction<_dart_EVP_DigestVerifyFinal>())(
      ctx,
      sig,
      sig_len,
    );
  }

  _dart_EVP_DigestVerifyFinal? _EVP_DigestVerifyFinal;

  /// // PKCS5_PBKDF2_HMAC computes |iterations| iterations of PBKDF2 of |password|
  /// // and |salt|, using |digest|, and outputs |key_len| bytes to |out_key|. It
  /// // returns one on success and zero on allocation failure or if iterations is 0.
  int PKCS5_PBKDF2_HMAC(
    ffi.Pointer<ffi.Int8> password,
    int password_len,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_len,
    int iterations,
    ffi.Pointer<EVP_MD> digest,
    int key_len,
    ffi.Pointer<ffi.Uint8> out_key,
  ) {
    return (_PKCS5_PBKDF2_HMAC ??=
        _lookup<ffi.NativeFunction<_c_PKCS5_PBKDF2_HMAC>>('PKCS5_PBKDF2_HMAC')
            .asFunction<_dart_PKCS5_PBKDF2_HMAC>())(
      password,
      password_len,
      salt,
      salt_len,
      iterations,
      digest,
      key_len,
      out_key,
    );
  }

  _dart_PKCS5_PBKDF2_HMAC? _PKCS5_PBKDF2_HMAC;

  /// // EVP_PKEY_CTX_new allocates a fresh |EVP_PKEY_CTX| for use with |pkey|. It
  /// // returns the context or NULL on error.
  ffi.Pointer<EVP_PKEY_CTX> EVP_PKEY_CTX_new(
    ffi.Pointer<EVP_PKEY> pkey,
    ffi.Pointer<engine_st> e,
  ) {
    return (_EVP_PKEY_CTX_new ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_CTX_new>>('EVP_PKEY_CTX_new')
            .asFunction<_dart_EVP_PKEY_CTX_new>())(
      pkey,
      e,
    );
  }

  _dart_EVP_PKEY_CTX_new? _EVP_PKEY_CTX_new;

  /// // EVP_PKEY_CTX_free frees |ctx| and the data it owns.
  void EVP_PKEY_CTX_free(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return (_EVP_PKEY_CTX_free ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_CTX_free>>('EVP_PKEY_CTX_free')
            .asFunction<_dart_EVP_PKEY_CTX_free>())(
      ctx,
    );
  }

  _dart_EVP_PKEY_CTX_free? _EVP_PKEY_CTX_free;

  /// // EVP_PKEY_encrypt_init initialises an |EVP_PKEY_CTX| for an encryption
  /// // operation. It should be called before |EVP_PKEY_encrypt|.
  /// //
  /// // It returns one on success or zero on error.
  int EVP_PKEY_encrypt_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return (_EVP_PKEY_encrypt_init ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_encrypt_init>>(
                'EVP_PKEY_encrypt_init')
            .asFunction<_dart_EVP_PKEY_encrypt_init>())(
      ctx,
    );
  }

  _dart_EVP_PKEY_encrypt_init? _EVP_PKEY_encrypt_init;

  /// // EVP_PKEY_encrypt encrypts |in_len| bytes from |in|. If |out| is NULL, the
  /// // maximum size of the ciphertext is written to |out_len|. Otherwise, |*out_len|
  /// // must contain the number of bytes of space available at |out|. If sufficient,
  /// // the ciphertext will be written to |out| and |*out_len| updated with the true
  /// // length.
  /// //
  /// // WARNING: Setting |out| to NULL only gives the maximum size of the
  /// // ciphertext. The actual ciphertext may be smaller.
  /// //
  /// // It returns one on success or zero on error.
  int EVP_PKEY_encrypt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.IntPtr> out_len,
    ffi.Pointer<ffi.Uint8> in_1,
    int in_len,
  ) {
    return (_EVP_PKEY_encrypt ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_encrypt>>('EVP_PKEY_encrypt')
            .asFunction<_dart_EVP_PKEY_encrypt>())(
      ctx,
      out,
      out_len,
      in_1,
      in_len,
    );
  }

  _dart_EVP_PKEY_encrypt? _EVP_PKEY_encrypt;

  /// // EVP_PKEY_decrypt_init initialises an |EVP_PKEY_CTX| for a decryption
  /// // operation. It should be called before |EVP_PKEY_decrypt|.
  /// //
  /// // It returns one on success or zero on error.
  int EVP_PKEY_decrypt_init(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
  ) {
    return (_EVP_PKEY_decrypt_init ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_decrypt_init>>(
                'EVP_PKEY_decrypt_init')
            .asFunction<_dart_EVP_PKEY_decrypt_init>())(
      ctx,
    );
  }

  _dart_EVP_PKEY_decrypt_init? _EVP_PKEY_decrypt_init;

  /// // EVP_PKEY_decrypt decrypts |in_len| bytes from |in|. If |out| is NULL, the
  /// // maximum size of the plaintext is written to |out_len|. Otherwise, |*out_len|
  /// // must contain the number of bytes of space available at |out|. If sufficient,
  /// // the ciphertext will be written to |out| and |*out_len| updated with the true
  /// // length.
  /// //
  /// // WARNING: Setting |out| to NULL only gives the maximum size of the
  /// // plaintext. The actual plaintext may be smaller.
  /// //
  /// // It returns one on success or zero on error.
  int EVP_PKEY_decrypt(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.IntPtr> out_len,
    ffi.Pointer<ffi.Uint8> in_1,
    int in_len,
  ) {
    return (_EVP_PKEY_decrypt ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_decrypt>>('EVP_PKEY_decrypt')
            .asFunction<_dart_EVP_PKEY_decrypt>())(
      ctx,
      out,
      out_len,
      in_1,
      in_len,
    );
  }

  _dart_EVP_PKEY_decrypt? _EVP_PKEY_decrypt;

  /// // EVP_PKEY_CTX_set_rsa_padding sets the padding type to use. It should be one
  /// // of the |RSA_*_PADDING| values. Returns one on success or zero on error.
  int EVP_PKEY_CTX_set_rsa_padding(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int padding,
  ) {
    return (_EVP_PKEY_CTX_set_rsa_padding ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_CTX_set_rsa_padding>>(
                'EVP_PKEY_CTX_set_rsa_padding')
            .asFunction<_dart_EVP_PKEY_CTX_set_rsa_padding>())(
      ctx,
      padding,
    );
  }

  _dart_EVP_PKEY_CTX_set_rsa_padding? _EVP_PKEY_CTX_set_rsa_padding;

  /// // EVP_PKEY_CTX_set_rsa_pss_saltlen sets the length of the salt in a PSS-padded
  /// // signature. A value of -1 cause the salt to be the same length as the digest
  /// // in the signature. A value of -2 causes the salt to be the maximum length
  /// // that will fit when signing and recovered from the signature when verifying.
  /// // Otherwise the value gives the size of the salt in bytes.
  /// //
  /// // If unsure, use -1.
  /// //
  /// // Returns one on success or zero on error.
  int EVP_PKEY_CTX_set_rsa_pss_saltlen(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    int salt_len,
  ) {
    return (_EVP_PKEY_CTX_set_rsa_pss_saltlen ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_CTX_set_rsa_pss_saltlen>>(
                'EVP_PKEY_CTX_set_rsa_pss_saltlen')
            .asFunction<_dart_EVP_PKEY_CTX_set_rsa_pss_saltlen>())(
      ctx,
      salt_len,
    );
  }

  _dart_EVP_PKEY_CTX_set_rsa_pss_saltlen? _EVP_PKEY_CTX_set_rsa_pss_saltlen;

  /// // EVP_PKEY_CTX_set_rsa_oaep_md sets |md| as the digest used in OAEP padding.
  /// // Returns one on success or zero on error.
  int EVP_PKEY_CTX_set_rsa_oaep_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return (_EVP_PKEY_CTX_set_rsa_oaep_md ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_CTX_set_rsa_oaep_md>>(
                'EVP_PKEY_CTX_set_rsa_oaep_md')
            .asFunction<_dart_EVP_PKEY_CTX_set_rsa_oaep_md>())(
      ctx,
      md,
    );
  }

  _dart_EVP_PKEY_CTX_set_rsa_oaep_md? _EVP_PKEY_CTX_set_rsa_oaep_md;

  /// // EVP_PKEY_CTX_set_rsa_mgf1_md sets |md| as the digest used in MGF1. Returns
  /// // one on success or zero on error.
  int EVP_PKEY_CTX_set_rsa_mgf1_md(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<EVP_MD> md,
  ) {
    return (_EVP_PKEY_CTX_set_rsa_mgf1_md ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_CTX_set_rsa_mgf1_md>>(
                'EVP_PKEY_CTX_set_rsa_mgf1_md')
            .asFunction<_dart_EVP_PKEY_CTX_set_rsa_mgf1_md>())(
      ctx,
      md,
    );
  }

  _dart_EVP_PKEY_CTX_set_rsa_mgf1_md? _EVP_PKEY_CTX_set_rsa_mgf1_md;

  /// // EVP_PKEY_CTX_set0_rsa_oaep_label sets |label_len| bytes from |label| as the
  /// // label used in OAEP. DANGER: On success, this call takes ownership of |label|
  /// // and will call |OPENSSL_free| on it when |ctx| is destroyed.
  /// //
  /// // Returns one on success or zero on error.
  int EVP_PKEY_CTX_set0_rsa_oaep_label(
    ffi.Pointer<EVP_PKEY_CTX> ctx,
    ffi.Pointer<ffi.Uint8> label,
    int label_len,
  ) {
    return (_EVP_PKEY_CTX_set0_rsa_oaep_label ??=
        _lookup<ffi.NativeFunction<_c_EVP_PKEY_CTX_set0_rsa_oaep_label>>(
                'EVP_PKEY_CTX_set0_rsa_oaep_label')
            .asFunction<_dart_EVP_PKEY_CTX_set0_rsa_oaep_label>())(
      ctx,
      label,
      label_len,
    );
  }

  _dart_EVP_PKEY_CTX_set0_rsa_oaep_label? _EVP_PKEY_CTX_set0_rsa_oaep_label;

  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Int8>>> _tzname =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Int8>>>('tzname');

  ffi.Pointer<ffi.Pointer<ffi.Int8>> get tzname => _tzname.value;

  set tzname(ffi.Pointer<ffi.Pointer<ffi.Int8>> value) => _tzname.value = value;

  late final ffi.Pointer<ffi.Int32> _getdate_err =
      _lookup<ffi.Int32>('getdate_err');

  int get getdate_err => _getdate_err.value;

  set getdate_err(int value) => _getdate_err.value = value;

  late final ffi.Pointer<ffi.Int64> _timezone = _lookup<ffi.Int64>('timezone');

  int get timezone => _timezone.value;

  set timezone(int value) => _timezone.value = value;

  late final ffi.Pointer<ffi.Int32> _daylight = _lookup<ffi.Int32>('daylight');

  int get daylight => _daylight.value;

  set daylight(int value) => _daylight.value = value;

  /// // BN_new creates a new, allocated BIGNUM and initialises it.
  ffi.Pointer<BIGNUM> BN_new() {
    return (_BN_new ??= _lookup<ffi.NativeFunction<_c_BN_new>>('BN_new')
        .asFunction<_dart_BN_new>())();
  }

  _dart_BN_new? _BN_new;

  /// // BN_free frees the data referenced by |bn| and, if |bn| was originally
  /// // allocated on the heap, frees |bn| also.
  void BN_free(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return (_BN_free ??= _lookup<ffi.NativeFunction<_c_BN_free>>('BN_free')
        .asFunction<_dart_BN_free>())(
      bn,
    );
  }

  _dart_BN_free? _BN_free;

  /// // BN_value_one returns a static BIGNUM with value 1.
  ffi.Pointer<BIGNUM> BN_value_one() {
    return (_BN_value_one ??=
        _lookup<ffi.NativeFunction<_c_BN_value_one>>('BN_value_one')
            .asFunction<_dart_BN_value_one>())();
  }

  _dart_BN_value_one? _BN_value_one;

  /// // BN_num_bytes returns the minimum number of bytes needed to represent the
  /// // absolute value of |bn|.
  int BN_num_bytes(
    ffi.Pointer<BIGNUM> bn,
  ) {
    return (_BN_num_bytes ??=
        _lookup<ffi.NativeFunction<_c_BN_num_bytes>>('BN_num_bytes')
            .asFunction<_dart_BN_num_bytes>())(
      bn,
    );
  }

  _dart_BN_num_bytes? _BN_num_bytes;

  /// // BN_set_word sets |bn| to |value|. It returns one on success or zero on
  /// // allocation failure.
  int BN_set_word(
    ffi.Pointer<BIGNUM> bn,
    int value,
  ) {
    return (_BN_set_word ??=
        _lookup<ffi.NativeFunction<_c_BN_set_word>>('BN_set_word')
            .asFunction<_dart_BN_set_word>())(
      bn,
      value,
    );
  }

  _dart_BN_set_word? _BN_set_word;

  /// // BN_bin2bn sets |*ret| to the value of |len| bytes from |in|, interpreted as
  /// // a big-endian number, and returns |ret|. If |ret| is NULL then a fresh
  /// // |BIGNUM| is allocated and returned. It returns NULL on allocation
  /// // failure.
  ffi.Pointer<BIGNUM> BN_bin2bn(
    ffi.Pointer<ffi.Uint8> in_1,
    int len,
    ffi.Pointer<BIGNUM> ret,
  ) {
    return (_BN_bin2bn ??=
        _lookup<ffi.NativeFunction<_c_BN_bin2bn>>('BN_bin2bn')
            .asFunction<_dart_BN_bin2bn>())(
      in_1,
      len,
      ret,
    );
  }

  _dart_BN_bin2bn? _BN_bin2bn;

  /// // BN_bn2bin_padded serialises the absolute value of |in| to |out| as a
  /// // big-endian integer. The integer is padded with leading zeros up to size
  /// // |len|. If |len| is smaller than |BN_num_bytes|, the function fails and
  /// // returns 0. Otherwise, it returns 1.
  int BN_bn2bin_padded(
    ffi.Pointer<ffi.Uint8> out,
    int len,
    ffi.Pointer<BIGNUM> in_1,
  ) {
    return (_BN_bn2bin_padded ??=
        _lookup<ffi.NativeFunction<_c_BN_bn2bin_padded>>('BN_bn2bin_padded')
            .asFunction<_dart_BN_bn2bin_padded>())(
      out,
      len,
      in_1,
    );
  }

  _dart_BN_bn2bin_padded? _BN_bn2bin_padded;

  /// // BN_add sets |r| = |a| + |b|, where |r| may be the same pointer as either |a|
  /// // or |b|. It returns one on success and zero on allocation failure.
  int BN_add(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return (_BN_add ??= _lookup<ffi.NativeFunction<_c_BN_add>>('BN_add')
        .asFunction<_dart_BN_add>())(
      r,
      a,
      b,
    );
  }

  _dart_BN_add? _BN_add;

  /// // BN_sub sets |r| = |a| - |b|, where |r| may be the same pointer as either |a|
  /// // or |b|. It returns one on success and zero on allocation failure.
  int BN_sub(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return (_BN_sub ??= _lookup<ffi.NativeFunction<_c_BN_sub>>('BN_sub')
        .asFunction<_dart_BN_sub>())(
      r,
      a,
      b,
    );
  }

  _dart_BN_sub? _BN_sub;

  /// // BN_cmp returns a value less than, equal to or greater than zero if |a| is
  /// // less than, equal to or greater than |b|, respectively.
  int BN_cmp(
    ffi.Pointer<BIGNUM> a,
    ffi.Pointer<BIGNUM> b,
  ) {
    return (_BN_cmp ??= _lookup<ffi.NativeFunction<_c_BN_cmp>>('BN_cmp')
        .asFunction<_dart_BN_cmp>())(
      a,
      b,
    );
  }

  _dart_BN_cmp? _BN_cmp;

  /// // BN_lshift sets |r| equal to |a| << n. The |a| and |r| arguments may be the
  /// // same |BIGNUM|. It returns one on success and zero on allocation failure.
  int BN_lshift(
    ffi.Pointer<BIGNUM> r,
    ffi.Pointer<BIGNUM> a,
    int n,
  ) {
    return (_BN_lshift ??=
        _lookup<ffi.NativeFunction<_c_BN_lshift>>('BN_lshift')
            .asFunction<_dart_BN_lshift>())(
      r,
      a,
      n,
    );
  }

  _dart_BN_lshift? _BN_lshift;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_SEQUENCE_ANY_it =
      _lookup<ASN1_ITEM_st>('ASN1_SEQUENCE_ANY_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_SEQUENCE_ANY_it => _ASN1_SEQUENCE_ANY_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_SET_ANY_it =
      _lookup<ASN1_ITEM_st>('ASN1_SET_ANY_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_SET_ANY_it => _ASN1_SET_ANY_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_ALGOR_it =
      _lookup<ASN1_ITEM_st>('X509_ALGOR_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_ALGOR_it => _X509_ALGOR_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_ANY_it =
      _lookup<ASN1_ITEM_st>('ASN1_ANY_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_ANY_it => _ASN1_ANY_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_OBJECT_it =
      _lookup<ASN1_ITEM_st>('ASN1_OBJECT_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_OBJECT_it => _ASN1_OBJECT_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_BIT_STRING_it =
      _lookup<ASN1_ITEM_st>('ASN1_BIT_STRING_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_BIT_STRING_it => _ASN1_BIT_STRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_INTEGER_it =
      _lookup<ASN1_ITEM_st>('ASN1_INTEGER_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_INTEGER_it => _ASN1_INTEGER_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_ENUMERATED_it =
      _lookup<ASN1_ITEM_st>('ASN1_ENUMERATED_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_ENUMERATED_it => _ASN1_ENUMERATED_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_OCTET_STRING_it =
      _lookup<ASN1_ITEM_st>('ASN1_OCTET_STRING_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_OCTET_STRING_it => _ASN1_OCTET_STRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_VISIBLESTRING_it =
      _lookup<ASN1_ITEM_st>('ASN1_VISIBLESTRING_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_VISIBLESTRING_it => _ASN1_VISIBLESTRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_UNIVERSALSTRING_it =
      _lookup<ASN1_ITEM_st>('ASN1_UNIVERSALSTRING_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_UNIVERSALSTRING_it =>
      _ASN1_UNIVERSALSTRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_UTF8STRING_it =
      _lookup<ASN1_ITEM_st>('ASN1_UTF8STRING_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_UTF8STRING_it => _ASN1_UTF8STRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_NULL_it =
      _lookup<ASN1_ITEM_st>('ASN1_NULL_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_NULL_it => _ASN1_NULL_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_BMPSTRING_it =
      _lookup<ASN1_ITEM_st>('ASN1_BMPSTRING_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_BMPSTRING_it => _ASN1_BMPSTRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_PRINTABLE_it =
      _lookup<ASN1_ITEM_st>('ASN1_PRINTABLE_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_PRINTABLE_it => _ASN1_PRINTABLE_it;

  late final ffi.Pointer<ASN1_ITEM_st> _DIRECTORYSTRING_it =
      _lookup<ASN1_ITEM_st>('DIRECTORYSTRING_it');

  ffi.Pointer<ASN1_ITEM_st> get DIRECTORYSTRING_it => _DIRECTORYSTRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _DISPLAYTEXT_it =
      _lookup<ASN1_ITEM_st>('DISPLAYTEXT_it');

  ffi.Pointer<ASN1_ITEM_st> get DISPLAYTEXT_it => _DISPLAYTEXT_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_PRINTABLESTRING_it =
      _lookup<ASN1_ITEM_st>('ASN1_PRINTABLESTRING_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_PRINTABLESTRING_it =>
      _ASN1_PRINTABLESTRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_T61STRING_it =
      _lookup<ASN1_ITEM_st>('ASN1_T61STRING_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_T61STRING_it => _ASN1_T61STRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_IA5STRING_it =
      _lookup<ASN1_ITEM_st>('ASN1_IA5STRING_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_IA5STRING_it => _ASN1_IA5STRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_GENERALSTRING_it =
      _lookup<ASN1_ITEM_st>('ASN1_GENERALSTRING_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_GENERALSTRING_it => _ASN1_GENERALSTRING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_UTCTIME_it =
      _lookup<ASN1_ITEM_st>('ASN1_UTCTIME_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_UTCTIME_it => _ASN1_UTCTIME_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_GENERALIZEDTIME_it =
      _lookup<ASN1_ITEM_st>('ASN1_GENERALIZEDTIME_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_GENERALIZEDTIME_it =>
      _ASN1_GENERALIZEDTIME_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_TIME_it =
      _lookup<ASN1_ITEM_st>('ASN1_TIME_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_TIME_it => _ASN1_TIME_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_OCTET_STRING_NDEF_it =
      _lookup<ASN1_ITEM_st>('ASN1_OCTET_STRING_NDEF_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_OCTET_STRING_NDEF_it =>
      _ASN1_OCTET_STRING_NDEF_it;

  /// // EC_GROUP_new_by_curve_name returns a fresh EC_GROUP object for the elliptic
  /// // curve specified by |nid|, or NULL on unsupported NID or allocation failure.
  /// //
  /// // The supported NIDs are:
  /// //   NID_secp224r1 (P-224),
  /// //   NID_X9_62_prime256v1 (P-256),
  /// //   NID_secp384r1 (P-384),
  /// //   NID_secp521r1 (P-521)
  /// //
  /// // If in doubt, use |NID_X9_62_prime256v1|, or see the curve25519.h header for
  /// // more modern primitives.
  ffi.Pointer<ec_group_st> EC_GROUP_new_by_curve_name(
    int nid,
  ) {
    return (_EC_GROUP_new_by_curve_name ??=
        _lookup<ffi.NativeFunction<_c_EC_GROUP_new_by_curve_name>>(
                'EC_GROUP_new_by_curve_name')
            .asFunction<_dart_EC_GROUP_new_by_curve_name>())(
      nid,
    );
  }

  _dart_EC_GROUP_new_by_curve_name? _EC_GROUP_new_by_curve_name;

  /// // EC_GROUP_free releases a reference to |group|.
  void EC_GROUP_free(
    ffi.Pointer<ec_group_st> group,
  ) {
    return (_EC_GROUP_free ??=
        _lookup<ffi.NativeFunction<_c_EC_GROUP_free>>('EC_GROUP_free')
            .asFunction<_dart_EC_GROUP_free>())(
      group,
    );
  }

  _dart_EC_GROUP_free? _EC_GROUP_free;

  /// // EC_GROUP_get0_order returns a pointer to the internal |BIGNUM| object in
  /// // |group| that specifies the order of the group.
  ffi.Pointer<BIGNUM> EC_GROUP_get0_order(
    ffi.Pointer<ec_group_st> group,
  ) {
    return (_EC_GROUP_get0_order ??=
        _lookup<ffi.NativeFunction<_c_EC_GROUP_get0_order>>(
                'EC_GROUP_get0_order')
            .asFunction<_dart_EC_GROUP_get0_order>())(
      group,
    );
  }

  _dart_EC_GROUP_get0_order? _EC_GROUP_get0_order;

  /// // EC_GROUP_get_curve_name returns a NID that identifies |group|.
  int EC_GROUP_get_curve_name(
    ffi.Pointer<ec_group_st> group,
  ) {
    return (_EC_GROUP_get_curve_name ??=
        _lookup<ffi.NativeFunction<_c_EC_GROUP_get_curve_name>>(
                'EC_GROUP_get_curve_name')
            .asFunction<_dart_EC_GROUP_get_curve_name>())(
      group,
    );
  }

  _dart_EC_GROUP_get_curve_name? _EC_GROUP_get_curve_name;

  /// // EC_GROUP_get_degree returns the number of bits needed to represent an
  /// // element of the field underlying |group|.
  int EC_GROUP_get_degree(
    ffi.Pointer<ec_group_st> group,
  ) {
    return (_EC_GROUP_get_degree ??=
        _lookup<ffi.NativeFunction<_c_EC_GROUP_get_degree>>(
                'EC_GROUP_get_degree')
            .asFunction<_dart_EC_GROUP_get_degree>())(
      group,
    );
  }

  _dart_EC_GROUP_get_degree? _EC_GROUP_get_degree;

  /// // EC_POINT_new returns a fresh |EC_POINT| object in the given group, or NULL
  /// // on error.
  ffi.Pointer<ec_point_st> EC_POINT_new(
    ffi.Pointer<ec_group_st> group,
  ) {
    return (_EC_POINT_new ??=
        _lookup<ffi.NativeFunction<_c_EC_POINT_new>>('EC_POINT_new')
            .asFunction<_dart_EC_POINT_new>())(
      group,
    );
  }

  _dart_EC_POINT_new? _EC_POINT_new;

  /// // EC_POINT_free frees |point| and the data that it points to.
  void EC_POINT_free(
    ffi.Pointer<ec_point_st> point,
  ) {
    return (_EC_POINT_free ??=
        _lookup<ffi.NativeFunction<_c_EC_POINT_free>>('EC_POINT_free')
            .asFunction<_dart_EC_POINT_free>())(
      point,
    );
  }

  _dart_EC_POINT_free? _EC_POINT_free;

  /// // EC_POINT_get_affine_coordinates_GFp sets |x| and |y| to the affine value of
  /// // |point| using |ctx|, if it's not NULL. It returns one on success and zero
  /// // otherwise.
  /// //
  /// // Either |x| or |y| may be NULL to skip computing that coordinate. This is
  /// // slightly faster in the common case where only the x-coordinate is needed.
  int EC_POINT_get_affine_coordinates_GFp(
    ffi.Pointer<ec_group_st> group,
    ffi.Pointer<ec_point_st> point,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
    ffi.Pointer<bignum_ctx> ctx,
  ) {
    return (_EC_POINT_get_affine_coordinates_GFp ??=
        _lookup<ffi.NativeFunction<_c_EC_POINT_get_affine_coordinates_GFp>>(
                'EC_POINT_get_affine_coordinates_GFp')
            .asFunction<_dart_EC_POINT_get_affine_coordinates_GFp>())(
      group,
      point,
      x,
      y,
      ctx,
    );
  }

  _dart_EC_POINT_get_affine_coordinates_GFp?
      _EC_POINT_get_affine_coordinates_GFp;

  /// // EC_POINT_point2cbb behaves like |EC_POINT_point2oct| but appends the
  /// // serialised point to |cbb|. It returns one on success and zero on error.
  int EC_POINT_point2cbb(
    ffi.Pointer<CBB> out,
    ffi.Pointer<ec_group_st> group,
    ffi.Pointer<ec_point_st> point,
    int form,
    ffi.Pointer<bignum_ctx> ctx,
  ) {
    return (_EC_POINT_point2cbb ??=
        _lookup<ffi.NativeFunction<_c_EC_POINT_point2cbb>>('EC_POINT_point2cbb')
            .asFunction<_dart_EC_POINT_point2cbb>())(
      out,
      group,
      point,
      form,
      ctx,
    );
  }

  _dart_EC_POINT_point2cbb? _EC_POINT_point2cbb;

  /// // EC_POINT_oct2point sets |point| from |len| bytes of X9.62 format
  /// // serialisation in |buf|. It returns one on success and zero on error. The
  /// // |ctx| argument may be used if not NULL. It's considered an error if |buf|
  /// // does not represent a point on the curve.
  int EC_POINT_oct2point(
    ffi.Pointer<ec_group_st> group,
    ffi.Pointer<ec_point_st> point,
    ffi.Pointer<ffi.Uint8> buf,
    int len,
    ffi.Pointer<bignum_ctx> ctx,
  ) {
    return (_EC_POINT_oct2point ??=
        _lookup<ffi.NativeFunction<_c_EC_POINT_oct2point>>('EC_POINT_oct2point')
            .asFunction<_dart_EC_POINT_oct2point>())(
      group,
      point,
      buf,
      len,
      ctx,
    );
  }

  _dart_EC_POINT_oct2point? _EC_POINT_oct2point;

  /// // EC_KEY_new_by_curve_name returns a fresh EC_KEY for group specified by |nid|
  /// // or NULL on error.
  ffi.Pointer<ec_key_st> EC_KEY_new_by_curve_name(
    int nid,
  ) {
    return (_EC_KEY_new_by_curve_name ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_new_by_curve_name>>(
                'EC_KEY_new_by_curve_name')
            .asFunction<_dart_EC_KEY_new_by_curve_name>())(
      nid,
    );
  }

  _dart_EC_KEY_new_by_curve_name? _EC_KEY_new_by_curve_name;

  /// // EC_KEY_free frees all the data owned by |key| and |key| itself.
  void EC_KEY_free(
    ffi.Pointer<ec_key_st> key,
  ) {
    return (_EC_KEY_free ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_free>>('EC_KEY_free')
            .asFunction<_dart_EC_KEY_free>())(
      key,
    );
  }

  _dart_EC_KEY_free? _EC_KEY_free;

  /// // EC_KEY_get0_group returns a pointer to the |EC_GROUP| object inside |key|.
  ffi.Pointer<ec_group_st> EC_KEY_get0_group(
    ffi.Pointer<ec_key_st> key,
  ) {
    return (_EC_KEY_get0_group ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_get0_group>>('EC_KEY_get0_group')
            .asFunction<_dart_EC_KEY_get0_group>())(
      key,
    );
  }

  _dart_EC_KEY_get0_group? _EC_KEY_get0_group;

  /// // EC_KEY_get0_private_key returns a pointer to the private key inside |key|.
  ffi.Pointer<BIGNUM> EC_KEY_get0_private_key(
    ffi.Pointer<ec_key_st> key,
  ) {
    return (_EC_KEY_get0_private_key ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_get0_private_key>>(
                'EC_KEY_get0_private_key')
            .asFunction<_dart_EC_KEY_get0_private_key>())(
      key,
    );
  }

  _dart_EC_KEY_get0_private_key? _EC_KEY_get0_private_key;

  /// // EC_KEY_set_private_key sets the private key of |key| to |priv|. It returns
  /// // one on success and zero otherwise. |key| must already have had a group
  /// // configured (see |EC_KEY_set_group| and |EC_KEY_new_by_curve_name|).
  int EC_KEY_set_private_key(
    ffi.Pointer<ec_key_st> key,
    ffi.Pointer<BIGNUM> priv,
  ) {
    return (_EC_KEY_set_private_key ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_set_private_key>>(
                'EC_KEY_set_private_key')
            .asFunction<_dart_EC_KEY_set_private_key>())(
      key,
      priv,
    );
  }

  _dart_EC_KEY_set_private_key? _EC_KEY_set_private_key;

  /// // EC_KEY_get0_public_key returns a pointer to the public key point inside
  /// // |key|.
  ffi.Pointer<ec_point_st> EC_KEY_get0_public_key(
    ffi.Pointer<ec_key_st> key,
  ) {
    return (_EC_KEY_get0_public_key ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_get0_public_key>>(
                'EC_KEY_get0_public_key')
            .asFunction<_dart_EC_KEY_get0_public_key>())(
      key,
    );
  }

  _dart_EC_KEY_get0_public_key? _EC_KEY_get0_public_key;

  /// // EC_KEY_set_public_key sets the public key of |key| to |pub|, by copying it.
  /// // It returns one on success and zero otherwise. |key| must already have had a
  /// // group configured (see |EC_KEY_set_group| and |EC_KEY_new_by_curve_name|), and
  /// // |pub| must also belong to that group.
  int EC_KEY_set_public_key(
    ffi.Pointer<ec_key_st> key,
    ffi.Pointer<ec_point_st> pub,
  ) {
    return (_EC_KEY_set_public_key ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_set_public_key>>(
                'EC_KEY_set_public_key')
            .asFunction<_dart_EC_KEY_set_public_key>())(
      key,
      pub,
    );
  }

  _dart_EC_KEY_set_public_key? _EC_KEY_set_public_key;

  /// // EC_KEY_get_enc_flags returns the encoding flags for |key|, which is a
  /// // bitwise-OR of |EC_PKEY_*| values.
  int EC_KEY_get_enc_flags(
    ffi.Pointer<ec_key_st> key,
  ) {
    return (_EC_KEY_get_enc_flags ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_get_enc_flags>>(
                'EC_KEY_get_enc_flags')
            .asFunction<_dart_EC_KEY_get_enc_flags>())(
      key,
    );
  }

  _dart_EC_KEY_get_enc_flags? _EC_KEY_get_enc_flags;

  /// // EC_KEY_set_enc_flags sets the encoding flags for |key|, which is a
  /// // bitwise-OR of |EC_PKEY_*| values.
  void EC_KEY_set_enc_flags(
    ffi.Pointer<ec_key_st> key,
    int flags,
  ) {
    return (_EC_KEY_set_enc_flags ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_set_enc_flags>>(
                'EC_KEY_set_enc_flags')
            .asFunction<_dart_EC_KEY_set_enc_flags>())(
      key,
      flags,
    );
  }

  _dart_EC_KEY_set_enc_flags? _EC_KEY_set_enc_flags;

  /// // EC_KEY_check_key performs several checks on |key| (possibly including an
  /// // expensive check that the public key is in the primary subgroup). It returns
  /// // one if all checks pass and zero otherwise. If it returns zero then detail
  /// // about the problem can be found on the error stack.
  int EC_KEY_check_key(
    ffi.Pointer<ec_key_st> key,
  ) {
    return (_EC_KEY_check_key ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_check_key>>('EC_KEY_check_key')
            .asFunction<_dart_EC_KEY_check_key>())(
      key,
    );
  }

  _dart_EC_KEY_check_key? _EC_KEY_check_key;

  /// // EC_KEY_set_public_key_affine_coordinates sets the public key in |key| to
  /// // (|x|, |y|). It returns one on success and zero on error. It's considered an
  /// // error if |x| and |y| do not represent a point on |key|'s curve.
  int EC_KEY_set_public_key_affine_coordinates(
    ffi.Pointer<ec_key_st> key,
    ffi.Pointer<BIGNUM> x,
    ffi.Pointer<BIGNUM> y,
  ) {
    return (_EC_KEY_set_public_key_affine_coordinates ??= _lookup<
                ffi.NativeFunction<
                    _c_EC_KEY_set_public_key_affine_coordinates>>(
            'EC_KEY_set_public_key_affine_coordinates')
        .asFunction<_dart_EC_KEY_set_public_key_affine_coordinates>())(
      key,
      x,
      y,
    );
  }

  _dart_EC_KEY_set_public_key_affine_coordinates?
      _EC_KEY_set_public_key_affine_coordinates;

  /// // EC_KEY_generate_key generates a random, private key, calculates the
  /// // corresponding public key and stores both in |key|. It returns one on success
  /// // or zero otherwise.
  int EC_KEY_generate_key(
    ffi.Pointer<ec_key_st> key,
  ) {
    return (_EC_KEY_generate_key ??=
        _lookup<ffi.NativeFunction<_c_EC_KEY_generate_key>>(
                'EC_KEY_generate_key')
            .asFunction<_dart_EC_KEY_generate_key>())(
      key,
    );
  }

  _dart_EC_KEY_generate_key? _EC_KEY_generate_key;

  /// // ECDH_compute_key calculates the shared key between |pub_key| and |priv_key|.
  /// // If |kdf| is not NULL, then it is called with the bytes of the shared key and
  /// // the parameter |out|. When |kdf| returns, the value of |*outlen| becomes the
  /// // return value. Otherwise, as many bytes of the shared key as will fit are
  /// // copied directly to, at most, |outlen| bytes at |out|. It returns the number
  /// // of bytes written to |out|, or -1 on error.
  int ECDH_compute_key(
    ffi.Pointer<ffi.Void> out,
    int outlen,
    ffi.Pointer<ec_point_st> pub_key,
    ffi.Pointer<ec_key_st> priv_key,
    ffi.Pointer<ffi.NativeFunction<_typedefC_6>> kdf,
  ) {
    return (_ECDH_compute_key ??=
        _lookup<ffi.NativeFunction<_c_ECDH_compute_key>>('ECDH_compute_key')
            .asFunction<_dart_ECDH_compute_key>())(
      out,
      outlen,
      pub_key,
      priv_key,
      kdf,
    );
  }

  _dart_ECDH_compute_key? _ECDH_compute_key;

  /// // ECDSA_SIG_new returns a fresh |ECDSA_SIG| structure or NULL on error.
  ffi.Pointer<ecdsa_sig_st> ECDSA_SIG_new() {
    return (_ECDSA_SIG_new ??=
        _lookup<ffi.NativeFunction<_c_ECDSA_SIG_new>>('ECDSA_SIG_new')
            .asFunction<_dart_ECDSA_SIG_new>())();
  }

  _dart_ECDSA_SIG_new? _ECDSA_SIG_new;

  /// // ECDSA_SIG_free frees |sig| its member |BIGNUM|s.
  void ECDSA_SIG_free(
    ffi.Pointer<ecdsa_sig_st> sig,
  ) {
    return (_ECDSA_SIG_free ??=
        _lookup<ffi.NativeFunction<_c_ECDSA_SIG_free>>('ECDSA_SIG_free')
            .asFunction<_dart_ECDSA_SIG_free>())(
      sig,
    );
  }

  _dart_ECDSA_SIG_free? _ECDSA_SIG_free;

  /// // ECDSA_SIG_get0 sets |*out_r| and |*out_s|, if non-NULL, to the two
  /// // components of |sig|.
  void ECDSA_SIG_get0(
    ffi.Pointer<ecdsa_sig_st> sig,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_r,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_s,
  ) {
    return (_ECDSA_SIG_get0 ??=
        _lookup<ffi.NativeFunction<_c_ECDSA_SIG_get0>>('ECDSA_SIG_get0')
            .asFunction<_dart_ECDSA_SIG_get0>())(
      sig,
      out_r,
      out_s,
    );
  }

  _dart_ECDSA_SIG_get0? _ECDSA_SIG_get0;

  /// // ECDSA_SIG_parse parses a DER-encoded ECDSA-Sig-Value structure from |cbs| and
  /// // advances |cbs|. It returns a newly-allocated |ECDSA_SIG| or NULL on error.
  ffi.Pointer<ecdsa_sig_st> ECDSA_SIG_parse(
    ffi.Pointer<CBS> cbs,
  ) {
    return (_ECDSA_SIG_parse ??=
        _lookup<ffi.NativeFunction<_c_ECDSA_SIG_parse>>('ECDSA_SIG_parse')
            .asFunction<_dart_ECDSA_SIG_parse>())(
      cbs,
    );
  }

  _dart_ECDSA_SIG_parse? _ECDSA_SIG_parse;

  /// // ECDSA_SIG_marshal marshals |sig| as a DER-encoded ECDSA-Sig-Value and appends
  /// // the result to |cbb|. It returns one on success and zero on error.
  int ECDSA_SIG_marshal(
    ffi.Pointer<CBB> cbb,
    ffi.Pointer<ecdsa_sig_st> sig,
  ) {
    return (_ECDSA_SIG_marshal ??=
        _lookup<ffi.NativeFunction<_c_ECDSA_SIG_marshal>>('ECDSA_SIG_marshal')
            .asFunction<_dart_ECDSA_SIG_marshal>())(
      cbb,
      sig,
    );
  }

  _dart_ECDSA_SIG_marshal? _ECDSA_SIG_marshal;

  /// // CBS_init sets |cbs| to point to |data|. It does not take ownership of
  /// // |data|.
  void CBS_init(
    ffi.Pointer<CBS> cbs,
    ffi.Pointer<ffi.Uint8> data,
    int len,
  ) {
    return (_CBS_init ??= _lookup<ffi.NativeFunction<_c_CBS_init>>('CBS_init')
        .asFunction<_dart_CBS_init>())(
      cbs,
      data,
      len,
    );
  }

  _dart_CBS_init? _CBS_init;

  /// // CBB_zero sets an uninitialised |cbb| to the zero state. It must be
  /// // initialised with |CBB_init| or |CBB_init_fixed| before use, but it is safe to
  /// // call |CBB_cleanup| without a successful |CBB_init|. This may be used for more
  /// // uniform cleanup of a |CBB|.
  void CBB_zero(
    ffi.Pointer<CBB> cbb,
  ) {
    return (_CBB_zero ??= _lookup<ffi.NativeFunction<_c_CBB_zero>>('CBB_zero')
        .asFunction<_dart_CBB_zero>())(
      cbb,
    );
  }

  _dart_CBB_zero? _CBB_zero;

  /// // CBB_init initialises |cbb| with |initial_capacity|. Since a |CBB| grows as
  /// // needed, the |initial_capacity| is just a hint. It returns one on success or
  /// // zero on allocation failure.
  int CBB_init(
    ffi.Pointer<CBB> cbb,
    int initial_capacity,
  ) {
    return (_CBB_init ??= _lookup<ffi.NativeFunction<_c_CBB_init>>('CBB_init')
        .asFunction<_dart_CBB_init>())(
      cbb,
      initial_capacity,
    );
  }

  _dart_CBB_init? _CBB_init;

  /// // CBB_cleanup frees all resources owned by |cbb| and other |CBB| objects
  /// // writing to the same buffer. This should be used in an error case where a
  /// // serialisation is abandoned.
  /// //
  /// // This function can only be called on a "top level" |CBB|, i.e. one initialised
  /// // with |CBB_init| or |CBB_init_fixed|, or a |CBB| set to the zero state with
  /// // |CBB_zero|.
  void CBB_cleanup(
    ffi.Pointer<CBB> cbb,
  ) {
    return (_CBB_cleanup ??=
        _lookup<ffi.NativeFunction<_c_CBB_cleanup>>('CBB_cleanup')
            .asFunction<_dart_CBB_cleanup>())(
      cbb,
    );
  }

  _dart_CBB_cleanup? _CBB_cleanup;

  /// // CBB_flush causes any pending length prefixes to be written out and any child
  /// // |CBB| objects of |cbb| to be invalidated. This allows |cbb| to continue to be
  /// // used after the children go out of scope, e.g. when local |CBB| objects are
  /// // added as children to a |CBB| that persists after a function returns. This
  /// // function returns one on success or zero on error.
  int CBB_flush(
    ffi.Pointer<CBB> cbb,
  ) {
    return (_CBB_flush ??=
        _lookup<ffi.NativeFunction<_c_CBB_flush>>('CBB_flush')
            .asFunction<_dart_CBB_flush>())(
      cbb,
    );
  }

  _dart_CBB_flush? _CBB_flush;

  /// // CBB_data returns a pointer to the bytes written to |cbb|. It does not flush
  /// // |cbb|. The pointer is valid until the next operation to |cbb|.
  /// //
  /// // To avoid unfinalized length prefixes, it is a fatal error to call this on a
  /// // CBB with any active children.
  ffi.Pointer<ffi.Uint8> CBB_data(
    ffi.Pointer<CBB> cbb,
  ) {
    return (_CBB_data ??= _lookup<ffi.NativeFunction<_c_CBB_data>>('CBB_data')
        .asFunction<_dart_CBB_data>())(
      cbb,
    );
  }

  _dart_CBB_data? _CBB_data;

  /// // CBB_len returns the number of bytes written to |cbb|. It does not flush
  /// // |cbb|.
  /// //
  /// // To avoid unfinalized length prefixes, it is a fatal error to call this on a
  /// // CBB with any active children.
  int CBB_len(
    ffi.Pointer<CBB> cbb,
  ) {
    return (_CBB_len ??= _lookup<ffi.NativeFunction<_c_CBB_len>>('CBB_len')
        .asFunction<_dart_CBB_len>())(
      cbb,
    );
  }

  _dart_CBB_len? _CBB_len;

  /// // RSA_new returns a new, empty |RSA| object or NULL on error.
  ffi.Pointer<rsa_st> RSA_new() {
    return (_RSA_new ??= _lookup<ffi.NativeFunction<_c_RSA_new>>('RSA_new')
        .asFunction<_dart_RSA_new>())();
  }

  _dart_RSA_new? _RSA_new;

  /// // RSA_free decrements the reference count of |rsa| and frees it if the
  /// // reference count drops to zero.
  void RSA_free(
    ffi.Pointer<rsa_st> rsa,
  ) {
    return (_RSA_free ??= _lookup<ffi.NativeFunction<_c_RSA_free>>('RSA_free')
        .asFunction<_dart_RSA_free>())(
      rsa,
    );
  }

  _dart_RSA_free? _RSA_free;

  /// // RSA_get0_key sets |*out_n|, |*out_e|, and |*out_d|, if non-NULL, to |rsa|'s
  /// // modulus, public exponent, and private exponent, respectively. If |rsa| is a
  /// // public key, the private exponent will be set to NULL.
  void RSA_get0_key(
    ffi.Pointer<rsa_st> rsa,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_n,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_e,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_d,
  ) {
    return (_RSA_get0_key ??=
        _lookup<ffi.NativeFunction<_c_RSA_get0_key>>('RSA_get0_key')
            .asFunction<_dart_RSA_get0_key>())(
      rsa,
      out_n,
      out_e,
      out_d,
    );
  }

  _dart_RSA_get0_key? _RSA_get0_key;

  /// // RSA_get0_factors sets |*out_p| and |*out_q|, if non-NULL, to |rsa|'s prime
  /// // factors. If |rsa| is a public key, they will be set to NULL.
  void RSA_get0_factors(
    ffi.Pointer<rsa_st> rsa,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_p,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_q,
  ) {
    return (_RSA_get0_factors ??=
        _lookup<ffi.NativeFunction<_c_RSA_get0_factors>>('RSA_get0_factors')
            .asFunction<_dart_RSA_get0_factors>())(
      rsa,
      out_p,
      out_q,
    );
  }

  _dart_RSA_get0_factors? _RSA_get0_factors;

  /// // RSA_get0_crt_params sets |*out_dmp1|, |*out_dmq1|, and |*out_iqmp|, if
  /// // non-NULL, to |rsa|'s CRT parameters. These are d (mod p-1), d (mod q-1) and
  /// // q^-1 (mod p), respectively. If |rsa| is a public key, each parameter will be
  /// // set to NULL.
  void RSA_get0_crt_params(
    ffi.Pointer<rsa_st> rsa,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_dmp1,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_dmq1,
    ffi.Pointer<ffi.Pointer<BIGNUM>> out_iqmp,
  ) {
    return (_RSA_get0_crt_params ??=
        _lookup<ffi.NativeFunction<_c_RSA_get0_crt_params>>(
                'RSA_get0_crt_params')
            .asFunction<_dart_RSA_get0_crt_params>())(
      rsa,
      out_dmp1,
      out_dmq1,
      out_iqmp,
    );
  }

  _dart_RSA_get0_crt_params? _RSA_get0_crt_params;

  /// // RSA_set0_key sets |rsa|'s modulus, public exponent, and private exponent to
  /// // |n|, |e|, and |d| respectively, if non-NULL. On success, it takes ownership
  /// // of each argument and returns one. Otherwise, it returns zero.
  /// //
  /// // |d| may be NULL, but |n| and |e| must either be non-NULL or already
  /// // configured on |rsa|.
  /// //
  /// // It is an error to call this function after |rsa| has been used for a
  /// // cryptographic operation. Construct a new |RSA| object instead.
  int RSA_set0_key(
    ffi.Pointer<rsa_st> rsa,
    ffi.Pointer<BIGNUM> n,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<BIGNUM> d,
  ) {
    return (_RSA_set0_key ??=
        _lookup<ffi.NativeFunction<_c_RSA_set0_key>>('RSA_set0_key')
            .asFunction<_dart_RSA_set0_key>())(
      rsa,
      n,
      e,
      d,
    );
  }

  _dart_RSA_set0_key? _RSA_set0_key;

  /// // RSA_set0_factors sets |rsa|'s prime factors to |p| and |q|, if non-NULL, and
  /// // takes ownership of them. On success, it takes ownership of each argument and
  /// // returns one. Otherwise, it returns zero.
  /// //
  /// // Each argument must either be non-NULL or already configured on |rsa|.
  /// //
  /// // It is an error to call this function after |rsa| has been used for a
  /// // cryptographic operation. Construct a new |RSA| object instead.
  int RSA_set0_factors(
    ffi.Pointer<rsa_st> rsa,
    ffi.Pointer<BIGNUM> p,
    ffi.Pointer<BIGNUM> q,
  ) {
    return (_RSA_set0_factors ??=
        _lookup<ffi.NativeFunction<_c_RSA_set0_factors>>('RSA_set0_factors')
            .asFunction<_dart_RSA_set0_factors>())(
      rsa,
      p,
      q,
    );
  }

  _dart_RSA_set0_factors? _RSA_set0_factors;

  /// // RSA_set0_crt_params sets |rsa|'s CRT parameters to |dmp1|, |dmq1|, and
  /// // |iqmp|, if non-NULL, and takes ownership of them. On success, it takes
  /// // ownership of its parameters and returns one. Otherwise, it returns zero.
  /// //
  /// // Each argument must either be non-NULL or already configured on |rsa|.
  /// //
  /// // It is an error to call this function after |rsa| has been used for a
  /// // cryptographic operation. Construct a new |RSA| object instead.
  int RSA_set0_crt_params(
    ffi.Pointer<rsa_st> rsa,
    ffi.Pointer<BIGNUM> dmp1,
    ffi.Pointer<BIGNUM> dmq1,
    ffi.Pointer<BIGNUM> iqmp,
  ) {
    return (_RSA_set0_crt_params ??=
        _lookup<ffi.NativeFunction<_c_RSA_set0_crt_params>>(
                'RSA_set0_crt_params')
            .asFunction<_dart_RSA_set0_crt_params>())(
      rsa,
      dmp1,
      dmq1,
      iqmp,
    );
  }

  _dart_RSA_set0_crt_params? _RSA_set0_crt_params;

  /// // RSA_generate_key_ex generates a new RSA key where the modulus has size
  /// // |bits| and the public exponent is |e|. If unsure, |RSA_F4| is a good value
  /// // for |e|. If |cb| is not NULL then it is called during the key generation
  /// // process. In addition to the calls documented for |BN_generate_prime_ex|, it
  /// // is called with event=2 when the n'th prime is rejected as unsuitable and
  /// // with event=3 when a suitable value for |p| is found.
  /// //
  /// // It returns one on success or zero on error.
  int RSA_generate_key_ex(
    ffi.Pointer<rsa_st> rsa,
    int bits,
    ffi.Pointer<BIGNUM> e,
    ffi.Pointer<bn_gencb_st> cb,
  ) {
    return (_RSA_generate_key_ex ??=
        _lookup<ffi.NativeFunction<_c_RSA_generate_key_ex>>(
                'RSA_generate_key_ex')
            .asFunction<_dart_RSA_generate_key_ex>())(
      rsa,
      bits,
      e,
      cb,
    );
  }

  _dart_RSA_generate_key_ex? _RSA_generate_key_ex;

  /// // RSAPublicKey_dup allocates a fresh |RSA| and copies the public key from
  /// // |rsa| into it. It returns the fresh |RSA| object, or NULL on error.
  ffi.Pointer<rsa_st> RSAPublicKey_dup(
    ffi.Pointer<rsa_st> rsa,
  ) {
    return (_RSAPublicKey_dup ??=
        _lookup<ffi.NativeFunction<_c_RSAPublicKey_dup>>('RSAPublicKey_dup')
            .asFunction<_dart_RSAPublicKey_dup>())(
      rsa,
    );
  }

  _dart_RSAPublicKey_dup? _RSAPublicKey_dup;

  /// // RSA_check_key performs basic validity tests on |rsa|. It returns one if
  /// // they pass and zero otherwise. Opaque keys and public keys always pass. If it
  /// // returns zero then a more detailed error is available on the error queue.
  int RSA_check_key(
    ffi.Pointer<rsa_st> rsa,
  ) {
    return (_RSA_check_key ??=
        _lookup<ffi.NativeFunction<_c_RSA_check_key>>('RSA_check_key')
            .asFunction<_dart_RSA_check_key>())(
      rsa,
    );
  }

  _dart_RSA_check_key? _RSA_check_key;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_ALGORS_it =
      _lookup<ASN1_ITEM_st>('X509_ALGORS_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_ALGORS_it => _X509_ALGORS_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_VAL_it =
      _lookup<ASN1_ITEM_st>('X509_VAL_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_VAL_it => _X509_VAL_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_PUBKEY_it =
      _lookup<ASN1_ITEM_st>('X509_PUBKEY_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_PUBKEY_it => _X509_PUBKEY_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_SIG_it =
      _lookup<ASN1_ITEM_st>('X509_SIG_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_SIG_it => _X509_SIG_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_REQ_INFO_it =
      _lookup<ASN1_ITEM_st>('X509_REQ_INFO_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_REQ_INFO_it => _X509_REQ_INFO_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_REQ_it =
      _lookup<ASN1_ITEM_st>('X509_REQ_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_REQ_it => _X509_REQ_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_ATTRIBUTE_it =
      _lookup<ASN1_ITEM_st>('X509_ATTRIBUTE_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_ATTRIBUTE_it => _X509_ATTRIBUTE_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_EXTENSION_it =
      _lookup<ASN1_ITEM_st>('X509_EXTENSION_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_EXTENSION_it => _X509_EXTENSION_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_EXTENSIONS_it =
      _lookup<ASN1_ITEM_st>('X509_EXTENSIONS_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_EXTENSIONS_it => _X509_EXTENSIONS_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_NAME_ENTRY_it =
      _lookup<ASN1_ITEM_st>('X509_NAME_ENTRY_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_NAME_ENTRY_it => _X509_NAME_ENTRY_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_NAME_it =
      _lookup<ASN1_ITEM_st>('X509_NAME_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_NAME_it => _X509_NAME_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_CINF_it =
      _lookup<ASN1_ITEM_st>('X509_CINF_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_CINF_it => _X509_CINF_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_it =
      _lookup<ASN1_ITEM_st>('X509_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_it => _X509_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_CERT_AUX_it =
      _lookup<ASN1_ITEM_st>('X509_CERT_AUX_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_CERT_AUX_it => _X509_CERT_AUX_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_REVOKED_it =
      _lookup<ASN1_ITEM_st>('X509_REVOKED_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_REVOKED_it => _X509_REVOKED_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_CRL_INFO_it =
      _lookup<ASN1_ITEM_st>('X509_CRL_INFO_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_CRL_INFO_it => _X509_CRL_INFO_it;

  late final ffi.Pointer<ASN1_ITEM_st> _X509_CRL_it =
      _lookup<ASN1_ITEM_st>('X509_CRL_it');

  ffi.Pointer<ASN1_ITEM_st> get X509_CRL_it => _X509_CRL_it;

  late final ffi.Pointer<ASN1_ITEM_st> _NETSCAPE_SPKI_it =
      _lookup<ASN1_ITEM_st>('NETSCAPE_SPKI_it');

  ffi.Pointer<ASN1_ITEM_st> get NETSCAPE_SPKI_it => _NETSCAPE_SPKI_it;

  late final ffi.Pointer<ASN1_ITEM_st> _NETSCAPE_SPKAC_it =
      _lookup<ASN1_ITEM_st>('NETSCAPE_SPKAC_it');

  ffi.Pointer<ASN1_ITEM_st> get NETSCAPE_SPKAC_it => _NETSCAPE_SPKAC_it;

  late final ffi.Pointer<ASN1_ITEM_st> _PKCS8_PRIV_KEY_INFO_it =
      _lookup<ASN1_ITEM_st>('PKCS8_PRIV_KEY_INFO_it');

  ffi.Pointer<ASN1_ITEM_st> get PKCS8_PRIV_KEY_INFO_it =>
      _PKCS8_PRIV_KEY_INFO_it;

  late final ffi.Pointer<ASN1_ITEM_st> _RSA_PSS_PARAMS_it =
      _lookup<ASN1_ITEM_st>('RSA_PSS_PARAMS_it');

  ffi.Pointer<ASN1_ITEM_st> get RSA_PSS_PARAMS_it => _RSA_PSS_PARAMS_it;

  late final ffi.Pointer<ffi.Int32> ___mb_cur_max =
      _lookup<ffi.Int32>('__mb_cur_max');

  int get __mb_cur_max => ___mb_cur_max.value;

  set __mb_cur_max(int value) => ___mb_cur_max.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.Int8>> _suboptarg =
      _lookup<ffi.Pointer<ffi.Int8>>('suboptarg');

  ffi.Pointer<ffi.Int8> get suboptarg => _suboptarg.value;

  set suboptarg(ffi.Pointer<ffi.Int8> value) => _suboptarg.value = value;

  /// // OPENSSL_malloc acts like a regular |malloc|.
  ffi.Pointer<ffi.Void> OPENSSL_malloc(
    int size,
  ) {
    return (_OPENSSL_malloc ??=
        _lookup<ffi.NativeFunction<_c_OPENSSL_malloc>>('OPENSSL_malloc')
            .asFunction<_dart_OPENSSL_malloc>())(
      size,
    );
  }

  _dart_OPENSSL_malloc? _OPENSSL_malloc;

  /// // OPENSSL_free does nothing if |ptr| is NULL. Otherwise it zeros out the
  /// // memory allocated at |ptr| and frees it.
  void OPENSSL_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return (_OPENSSL_free ??=
        _lookup<ffi.NativeFunction<_c_OPENSSL_free>>('OPENSSL_free')
            .asFunction<_dart_OPENSSL_free>())(
      ptr,
    );
  }

  _dart_OPENSSL_free? _OPENSSL_free;

  /// // CRYPTO_memcmp returns zero iff the |len| bytes at |a| and |b| are equal. It
  /// // takes an amount of time dependent on |len|, but independent of the contents
  /// // of |a| and |b|. Unlike memcmp, it cannot be used to put elements into a
  /// // defined order as the return value when a != b is undefined, other than to be
  /// // non-zero.
  int CRYPTO_memcmp(
    ffi.Pointer<ffi.Void> a,
    ffi.Pointer<ffi.Void> b,
    int len,
  ) {
    return (_CRYPTO_memcmp ??=
        _lookup<ffi.NativeFunction<_c_CRYPTO_memcmp>>('CRYPTO_memcmp')
            .asFunction<_dart_CRYPTO_memcmp>())(
      a,
      b,
      len,
    );
  }

  _dart_CRYPTO_memcmp? _CRYPTO_memcmp;

  /// // OPENSSL_memdup returns an allocated, duplicate of |size| bytes from |data| or
  /// // NULL on allocation failure.
  ffi.Pointer<ffi.Void> OPENSSL_memdup(
    ffi.Pointer<ffi.Void> data,
    int size,
  ) {
    return (_OPENSSL_memdup ??=
        _lookup<ffi.NativeFunction<_c_OPENSSL_memdup>>('OPENSSL_memdup')
            .asFunction<_dart_OPENSSL_memdup>())(
      data,
      size,
    );
  }

  _dart_OPENSSL_memdup? _OPENSSL_memdup;

  /// // BORINGSSL_self_test triggers the FIPS KAT-based self tests. It returns one on
  /// // success and zero on error.
  int BORINGSSL_self_test() {
    return (_BORINGSSL_self_test ??=
        _lookup<ffi.NativeFunction<_c_BORINGSSL_self_test>>(
                'BORINGSSL_self_test')
            .asFunction<_dart_BORINGSSL_self_test>())();
  }

  _dart_BORINGSSL_self_test? _BORINGSSL_self_test;

  late final ffi.Pointer<ASN1_ITEM_st> _PROXY_POLICY_it =
      _lookup<ASN1_ITEM_st>('PROXY_POLICY_it');

  ffi.Pointer<ASN1_ITEM_st> get PROXY_POLICY_it => _PROXY_POLICY_it;

  late final ffi.Pointer<ASN1_ITEM_st> _PROXY_CERT_INFO_EXTENSION_it =
      _lookup<ASN1_ITEM_st>('PROXY_CERT_INFO_EXTENSION_it');

  ffi.Pointer<ASN1_ITEM_st> get PROXY_CERT_INFO_EXTENSION_it =>
      _PROXY_CERT_INFO_EXTENSION_it;

  late final ffi.Pointer<ASN1_ITEM_st> _BASIC_CONSTRAINTS_it =
      _lookup<ASN1_ITEM_st>('BASIC_CONSTRAINTS_it');

  ffi.Pointer<ASN1_ITEM_st> get BASIC_CONSTRAINTS_it => _BASIC_CONSTRAINTS_it;

  late final ffi.Pointer<ASN1_ITEM_st> _SXNET_it =
      _lookup<ASN1_ITEM_st>('SXNET_it');

  ffi.Pointer<ASN1_ITEM_st> get SXNET_it => _SXNET_it;

  late final ffi.Pointer<ASN1_ITEM_st> _SXNETID_it =
      _lookup<ASN1_ITEM_st>('SXNETID_it');

  ffi.Pointer<ASN1_ITEM_st> get SXNETID_it => _SXNETID_it;

  late final ffi.Pointer<ASN1_ITEM_st> _AUTHORITY_KEYID_it =
      _lookup<ASN1_ITEM_st>('AUTHORITY_KEYID_it');

  ffi.Pointer<ASN1_ITEM_st> get AUTHORITY_KEYID_it => _AUTHORITY_KEYID_it;

  late final ffi.Pointer<ASN1_ITEM_st> _PKEY_USAGE_PERIOD_it =
      _lookup<ASN1_ITEM_st>('PKEY_USAGE_PERIOD_it');

  ffi.Pointer<ASN1_ITEM_st> get PKEY_USAGE_PERIOD_it => _PKEY_USAGE_PERIOD_it;

  late final ffi.Pointer<ASN1_ITEM_st> _GENERAL_NAME_it =
      _lookup<ASN1_ITEM_st>('GENERAL_NAME_it');

  ffi.Pointer<ASN1_ITEM_st> get GENERAL_NAME_it => _GENERAL_NAME_it;

  late final ffi.Pointer<ASN1_ITEM_st> _GENERAL_NAMES_it =
      _lookup<ASN1_ITEM_st>('GENERAL_NAMES_it');

  ffi.Pointer<ASN1_ITEM_st> get GENERAL_NAMES_it => _GENERAL_NAMES_it;

  late final ffi.Pointer<ASN1_ITEM_st> _OTHERNAME_it =
      _lookup<ASN1_ITEM_st>('OTHERNAME_it');

  ffi.Pointer<ASN1_ITEM_st> get OTHERNAME_it => _OTHERNAME_it;

  late final ffi.Pointer<ASN1_ITEM_st> _EDIPARTYNAME_it =
      _lookup<ASN1_ITEM_st>('EDIPARTYNAME_it');

  ffi.Pointer<ASN1_ITEM_st> get EDIPARTYNAME_it => _EDIPARTYNAME_it;

  late final ffi.Pointer<ASN1_ITEM_st> _EXTENDED_KEY_USAGE_it =
      _lookup<ASN1_ITEM_st>('EXTENDED_KEY_USAGE_it');

  ffi.Pointer<ASN1_ITEM_st> get EXTENDED_KEY_USAGE_it => _EXTENDED_KEY_USAGE_it;

  late final ffi.Pointer<ASN1_ITEM_st> _CERTIFICATEPOLICIES_it =
      _lookup<ASN1_ITEM_st>('CERTIFICATEPOLICIES_it');

  ffi.Pointer<ASN1_ITEM_st> get CERTIFICATEPOLICIES_it =>
      _CERTIFICATEPOLICIES_it;

  late final ffi.Pointer<ASN1_ITEM_st> _POLICYINFO_it =
      _lookup<ASN1_ITEM_st>('POLICYINFO_it');

  ffi.Pointer<ASN1_ITEM_st> get POLICYINFO_it => _POLICYINFO_it;

  late final ffi.Pointer<ASN1_ITEM_st> _POLICYQUALINFO_it =
      _lookup<ASN1_ITEM_st>('POLICYQUALINFO_it');

  ffi.Pointer<ASN1_ITEM_st> get POLICYQUALINFO_it => _POLICYQUALINFO_it;

  late final ffi.Pointer<ASN1_ITEM_st> _USERNOTICE_it =
      _lookup<ASN1_ITEM_st>('USERNOTICE_it');

  ffi.Pointer<ASN1_ITEM_st> get USERNOTICE_it => _USERNOTICE_it;

  late final ffi.Pointer<ASN1_ITEM_st> _NOTICEREF_it =
      _lookup<ASN1_ITEM_st>('NOTICEREF_it');

  ffi.Pointer<ASN1_ITEM_st> get NOTICEREF_it => _NOTICEREF_it;

  late final ffi.Pointer<ASN1_ITEM_st> _CRL_DIST_POINTS_it =
      _lookup<ASN1_ITEM_st>('CRL_DIST_POINTS_it');

  ffi.Pointer<ASN1_ITEM_st> get CRL_DIST_POINTS_it => _CRL_DIST_POINTS_it;

  late final ffi.Pointer<ASN1_ITEM_st> _DIST_POINT_it =
      _lookup<ASN1_ITEM_st>('DIST_POINT_it');

  ffi.Pointer<ASN1_ITEM_st> get DIST_POINT_it => _DIST_POINT_it;

  late final ffi.Pointer<ASN1_ITEM_st> _DIST_POINT_NAME_it =
      _lookup<ASN1_ITEM_st>('DIST_POINT_NAME_it');

  ffi.Pointer<ASN1_ITEM_st> get DIST_POINT_NAME_it => _DIST_POINT_NAME_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ISSUING_DIST_POINT_it =
      _lookup<ASN1_ITEM_st>('ISSUING_DIST_POINT_it');

  ffi.Pointer<ASN1_ITEM_st> get ISSUING_DIST_POINT_it => _ISSUING_DIST_POINT_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ACCESS_DESCRIPTION_it =
      _lookup<ASN1_ITEM_st>('ACCESS_DESCRIPTION_it');

  ffi.Pointer<ASN1_ITEM_st> get ACCESS_DESCRIPTION_it => _ACCESS_DESCRIPTION_it;

  late final ffi.Pointer<ASN1_ITEM_st> _AUTHORITY_INFO_ACCESS_it =
      _lookup<ASN1_ITEM_st>('AUTHORITY_INFO_ACCESS_it');

  ffi.Pointer<ASN1_ITEM_st> get AUTHORITY_INFO_ACCESS_it =>
      _AUTHORITY_INFO_ACCESS_it;

  late final ffi.Pointer<ASN1_ITEM_st> _POLICY_MAPPING_it =
      _lookup<ASN1_ITEM_st>('POLICY_MAPPING_it');

  ffi.Pointer<ASN1_ITEM_st> get POLICY_MAPPING_it => _POLICY_MAPPING_it;

  late final ffi.Pointer<ASN1_ITEM_st> _POLICY_MAPPINGS_it =
      _lookup<ASN1_ITEM_st>('POLICY_MAPPINGS_it');

  ffi.Pointer<ASN1_ITEM_st> get POLICY_MAPPINGS_it => _POLICY_MAPPINGS_it;

  late final ffi.Pointer<ASN1_ITEM_st> _GENERAL_SUBTREE_it =
      _lookup<ASN1_ITEM_st>('GENERAL_SUBTREE_it');

  ffi.Pointer<ASN1_ITEM_st> get GENERAL_SUBTREE_it => _GENERAL_SUBTREE_it;

  late final ffi.Pointer<ASN1_ITEM_st> _NAME_CONSTRAINTS_it =
      _lookup<ASN1_ITEM_st>('NAME_CONSTRAINTS_it');

  ffi.Pointer<ASN1_ITEM_st> get NAME_CONSTRAINTS_it => _NAME_CONSTRAINTS_it;

  late final ffi.Pointer<ASN1_ITEM_st> _POLICY_CONSTRAINTS_it =
      _lookup<ASN1_ITEM_st>('POLICY_CONSTRAINTS_it');

  ffi.Pointer<ASN1_ITEM_st> get POLICY_CONSTRAINTS_it => _POLICY_CONSTRAINTS_it;

  /// // HKDF computes HKDF (as specified by RFC 5869) of initial keying material
  /// // |secret| with |salt| and |info| using |digest|, and outputs |out_len| bytes
  /// // to |out_key|. It returns one on success and zero on error.
  /// //
  /// // HKDF is an Extract-and-Expand algorithm. It does not do any key stretching,
  /// // and as such, is not suited to be used alone to generate a key from a
  /// // password.
  int HKDF(
    ffi.Pointer<ffi.Uint8> out_key,
    int out_len,
    ffi.Pointer<EVP_MD> digest,
    ffi.Pointer<ffi.Uint8> secret,
    int secret_len,
    ffi.Pointer<ffi.Uint8> salt,
    int salt_len,
    ffi.Pointer<ffi.Uint8> info,
    int info_len,
  ) {
    return (_HKDF ??=
        _lookup<ffi.NativeFunction<_c_HKDF>>('HKDF').asFunction<_dart_HKDF>())(
      out_key,
      out_len,
      digest,
      secret,
      secret_len,
      salt,
      salt_len,
      info,
      info_len,
    );
  }

  _dart_HKDF? _HKDF;

  /// // HMAC_CTX_new allocates and initialises a new |HMAC_CTX| and returns it, or
  /// // NULL on allocation failure. The caller must use |HMAC_CTX_free| to release
  /// // the resulting object.
  ffi.Pointer<hmac_ctx_st> HMAC_CTX_new() {
    return (_HMAC_CTX_new ??=
        _lookup<ffi.NativeFunction<_c_HMAC_CTX_new>>('HMAC_CTX_new')
            .asFunction<_dart_HMAC_CTX_new>())();
  }

  _dart_HMAC_CTX_new? _HMAC_CTX_new;

  /// // HMAC_CTX_free calls |HMAC_CTX_cleanup| and then frees |ctx| itself.
  void HMAC_CTX_free(
    ffi.Pointer<hmac_ctx_st> ctx,
  ) {
    return (_HMAC_CTX_free ??=
        _lookup<ffi.NativeFunction<_c_HMAC_CTX_free>>('HMAC_CTX_free')
            .asFunction<_dart_HMAC_CTX_free>())(
      ctx,
    );
  }

  _dart_HMAC_CTX_free? _HMAC_CTX_free;

  /// // HMAC_Init_ex sets up an initialised |HMAC_CTX| to use |md| as the hash
  /// // function and |key| as the key. For a non-initial call, |md| may be NULL, in
  /// // which case the previous hash function will be used. If the hash function has
  /// // not changed and |key| is NULL, |ctx| reuses the previous key. It returns one
  /// // on success or zero on allocation failure.
  /// //
  /// // WARNING: NULL and empty keys are ambiguous on non-initial calls. Passing NULL
  /// // |key| but repeating the previous |md| reuses the previous key rather than the
  /// // empty key.
  int HMAC_Init_ex(
    ffi.Pointer<hmac_ctx_st> ctx,
    ffi.Pointer<ffi.Void> key,
    int key_len,
    ffi.Pointer<EVP_MD> md,
    ffi.Pointer<engine_st> impl,
  ) {
    return (_HMAC_Init_ex ??=
        _lookup<ffi.NativeFunction<_c_HMAC_Init_ex>>('HMAC_Init_ex')
            .asFunction<_dart_HMAC_Init_ex>())(
      ctx,
      key,
      key_len,
      md,
      impl,
    );
  }

  _dart_HMAC_Init_ex? _HMAC_Init_ex;

  /// // HMAC_Update hashes |data_len| bytes from |data| into the current HMAC
  /// // operation in |ctx|. It returns one.
  int HMAC_Update(
    ffi.Pointer<hmac_ctx_st> ctx,
    ffi.Pointer<ffi.Uint8> data,
    int data_len,
  ) {
    return (_HMAC_Update ??=
        _lookup<ffi.NativeFunction<_c_HMAC_Update>>('HMAC_Update')
            .asFunction<_dart_HMAC_Update>())(
      ctx,
      data,
      data_len,
    );
  }

  _dart_HMAC_Update? _HMAC_Update;

  /// // HMAC_Final completes the HMAC operation in |ctx| and writes the result to
  /// // |out| and the sets |*out_len| to the length of the result. On entry, |out|
  /// // must contain at least |HMAC_size| bytes of space. An output size of
  /// // |EVP_MAX_MD_SIZE| will always be large enough. It returns one on success or
  /// // zero on allocation failure.
  int HMAC_Final(
    ffi.Pointer<hmac_ctx_st> ctx,
    ffi.Pointer<ffi.Uint8> out,
    ffi.Pointer<ffi.Uint32> out_len,
  ) {
    return (_HMAC_Final ??=
        _lookup<ffi.NativeFunction<_c_HMAC_Final>>('HMAC_Final')
            .asFunction<_dart_HMAC_Final>())(
      ctx,
      out,
      out_len,
    );
  }

  _dart_HMAC_Final? _HMAC_Final;

  /// // HMAC_size returns the size, in bytes, of the HMAC that will be produced by
  /// // |ctx|. On entry, |ctx| must have been setup with |HMAC_Init_ex|.
  int HMAC_size(
    ffi.Pointer<hmac_ctx_st> ctx,
  ) {
    return (_HMAC_size ??=
        _lookup<ffi.NativeFunction<_c_HMAC_size>>('HMAC_size')
            .asFunction<_dart_HMAC_size>())(
      ctx,
    );
  }

  _dart_HMAC_size? _HMAC_size;

  /// // OPENSSL_ia32cap_P contains the Intel CPUID bits when running on an x86 or
  /// // x86-64 system.
  /// //
  /// //   Index 0:
  /// //     EDX for CPUID where EAX = 1
  /// //     Bit 20 is always zero
  /// //     Bit 28 is adjusted to reflect whether the data cache is shared between
  /// //       multiple logical cores
  /// //     Bit 30 is used to indicate an Intel CPU
  /// //   Index 1:
  /// //     ECX for CPUID where EAX = 1
  /// //     Bit 11 is used to indicate AMD XOP support, not SDBG
  /// //   Index 2:
  /// //     EBX for CPUID where EAX = 7
  /// //   Index 3:
  /// //     ECX for CPUID where EAX = 7
  /// //
  /// // Note: the CPUID bits are pre-adjusted for the OSXSAVE bit and the YMM and XMM
  /// // bits in XCR0, so it is not necessary to check those.
  late final ffi.Pointer<ffi.Pointer<ffi.Uint32>> _OPENSSL_ia32cap_P =
      _lookup<ffi.Pointer<ffi.Uint32>>('OPENSSL_ia32cap_P');

  ffi.Pointer<ffi.Uint32> get OPENSSL_ia32cap_P => _OPENSSL_ia32cap_P.value;

  set OPENSSL_ia32cap_P(ffi.Pointer<ffi.Uint32> value) =>
      _OPENSSL_ia32cap_P.value = value;

  /// // RAND_bytes writes |len| bytes of random data to |buf| and returns one.
  int RAND_bytes(
    ffi.Pointer<ffi.Uint8> buf,
    int len,
  ) {
    return (_RAND_bytes ??=
        _lookup<ffi.NativeFunction<_c_RAND_bytes>>('RAND_bytes')
            .asFunction<_dart_RAND_bytes>())(
      buf,
      len,
    );
  }

  _dart_RAND_bytes? _RAND_bytes;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_BOOLEAN_it =
      _lookup<ASN1_ITEM_st>('ASN1_BOOLEAN_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_BOOLEAN_it => _ASN1_BOOLEAN_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_TBOOLEAN_it =
      _lookup<ASN1_ITEM_st>('ASN1_TBOOLEAN_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_TBOOLEAN_it => _ASN1_TBOOLEAN_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_FBOOLEAN_it =
      _lookup<ASN1_ITEM_st>('ASN1_FBOOLEAN_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_FBOOLEAN_it => _ASN1_FBOOLEAN_it;

  late final ffi.Pointer<ASN1_ITEM_st> _ASN1_SEQUENCE_it =
      _lookup<ASN1_ITEM_st>('ASN1_SEQUENCE_it');

  ffi.Pointer<ASN1_ITEM_st> get ASN1_SEQUENCE_it => _ASN1_SEQUENCE_it;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<Dart_PostCObject_Type>>>
      _Dart_PostCObject_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_PostCObject_Type>>>(
          'Dart_PostCObject_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_PostCObject_Type>>
      get Dart_PostCObject_DL => _Dart_PostCObject_DL.value;

  set Dart_PostCObject_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_PostCObject_Type>> value) =>
      _Dart_PostCObject_DL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<Dart_PostInteger_Type>>>
      _Dart_PostInteger_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_PostInteger_Type>>>(
          'Dart_PostInteger_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_PostInteger_Type>>
      get Dart_PostInteger_DL => _Dart_PostInteger_DL.value;

  set Dart_PostInteger_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_PostInteger_Type>> value) =>
      _Dart_PostInteger_DL.value = value;

  late final ffi
          .Pointer<ffi.Pointer<ffi.NativeFunction<Dart_NewNativePort_Type>>>
      _Dart_NewNativePort_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_NewNativePort_Type>>>(
          'Dart_NewNativePort_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_NewNativePort_Type>>
      get Dart_NewNativePort_DL => _Dart_NewNativePort_DL.value;

  set Dart_NewNativePort_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_NewNativePort_Type>> value) =>
      _Dart_NewNativePort_DL.value = value;

  late final ffi
          .Pointer<ffi.Pointer<ffi.NativeFunction<Dart_CloseNativePort_Type>>>
      _Dart_CloseNativePort_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_CloseNativePort_Type>>>(
          'Dart_CloseNativePort_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_CloseNativePort_Type>>
      get Dart_CloseNativePort_DL => _Dart_CloseNativePort_DL.value;

  set Dart_CloseNativePort_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_CloseNativePort_Type>> value) =>
      _Dart_CloseNativePort_DL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<Dart_IsError_Type>>>
      _Dart_IsError_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_IsError_Type>>>(
          'Dart_IsError_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_IsError_Type>> get Dart_IsError_DL =>
      _Dart_IsError_DL.value;

  set Dart_IsError_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_IsError_Type>> value) =>
      _Dart_IsError_DL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<Dart_IsApiError_Type>>>
      _Dart_IsApiError_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_IsApiError_Type>>>(
          'Dart_IsApiError_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_IsApiError_Type>>
      get Dart_IsApiError_DL => _Dart_IsApiError_DL.value;

  set Dart_IsApiError_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_IsApiError_Type>> value) =>
      _Dart_IsApiError_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_IsUnhandledExceptionError_Type>>>
      _Dart_IsUnhandledExceptionError_DL = _lookup<
              ffi.Pointer<
                  ffi.NativeFunction<Dart_IsUnhandledExceptionError_Type>>>(
          'Dart_IsUnhandledExceptionError_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_IsUnhandledExceptionError_Type>>
      get Dart_IsUnhandledExceptionError_DL =>
          _Dart_IsUnhandledExceptionError_DL.value;

  set Dart_IsUnhandledExceptionError_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_IsUnhandledExceptionError_Type>>
              value) =>
      _Dart_IsUnhandledExceptionError_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_IsCompilationError_Type>>>
      _Dart_IsCompilationError_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_IsCompilationError_Type>>>(
          'Dart_IsCompilationError_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_IsCompilationError_Type>>
      get Dart_IsCompilationError_DL => _Dart_IsCompilationError_DL.value;

  set Dart_IsCompilationError_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_IsCompilationError_Type>>
              value) =>
      _Dart_IsCompilationError_DL.value = value;

  late final ffi
          .Pointer<ffi.Pointer<ffi.NativeFunction<Dart_IsFatalError_Type>>>
      _Dart_IsFatalError_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_IsFatalError_Type>>>(
          'Dart_IsFatalError_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_IsFatalError_Type>>
      get Dart_IsFatalError_DL => _Dart_IsFatalError_DL.value;

  set Dart_IsFatalError_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_IsFatalError_Type>> value) =>
      _Dart_IsFatalError_DL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<Dart_GetError_Type>>>
      _Dart_GetError_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_GetError_Type>>>(
          'Dart_GetError_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_GetError_Type>> get Dart_GetError_DL =>
      _Dart_GetError_DL.value;

  set Dart_GetError_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_GetError_Type>> value) =>
      _Dart_GetError_DL.value = value;

  late final ffi
          .Pointer<ffi.Pointer<ffi.NativeFunction<Dart_ErrorHasException_Type>>>
      _Dart_ErrorHasException_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_ErrorHasException_Type>>>(
          'Dart_ErrorHasException_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_ErrorHasException_Type>>
      get Dart_ErrorHasException_DL => _Dart_ErrorHasException_DL.value;

  set Dart_ErrorHasException_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_ErrorHasException_Type>> value) =>
      _Dart_ErrorHasException_DL.value = value;

  late final ffi
          .Pointer<ffi.Pointer<ffi.NativeFunction<Dart_ErrorGetException_Type>>>
      _Dart_ErrorGetException_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_ErrorGetException_Type>>>(
          'Dart_ErrorGetException_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_ErrorGetException_Type>>
      get Dart_ErrorGetException_DL => _Dart_ErrorGetException_DL.value;

  set Dart_ErrorGetException_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_ErrorGetException_Type>> value) =>
      _Dart_ErrorGetException_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_ErrorGetStackTrace_Type>>>
      _Dart_ErrorGetStackTrace_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_ErrorGetStackTrace_Type>>>(
          'Dart_ErrorGetStackTrace_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_ErrorGetStackTrace_Type>>
      get Dart_ErrorGetStackTrace_DL => _Dart_ErrorGetStackTrace_DL.value;

  set Dart_ErrorGetStackTrace_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_ErrorGetStackTrace_Type>>
              value) =>
      _Dart_ErrorGetStackTrace_DL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<Dart_NewApiError_Type>>>
      _Dart_NewApiError_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_NewApiError_Type>>>(
          'Dart_NewApiError_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_NewApiError_Type>>
      get Dart_NewApiError_DL => _Dart_NewApiError_DL.value;

  set Dart_NewApiError_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_NewApiError_Type>> value) =>
      _Dart_NewApiError_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_NewCompilationError_Type>>>
      _Dart_NewCompilationError_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_NewCompilationError_Type>>>(
          'Dart_NewCompilationError_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_NewCompilationError_Type>>
      get Dart_NewCompilationError_DL => _Dart_NewCompilationError_DL.value;

  set Dart_NewCompilationError_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_NewCompilationError_Type>>
              value) =>
      _Dart_NewCompilationError_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_NewUnhandledExceptionError_Type>>>
      _Dart_NewUnhandledExceptionError_DL = _lookup<
              ffi.Pointer<
                  ffi.NativeFunction<Dart_NewUnhandledExceptionError_Type>>>(
          'Dart_NewUnhandledExceptionError_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_NewUnhandledExceptionError_Type>>
      get Dart_NewUnhandledExceptionError_DL =>
          _Dart_NewUnhandledExceptionError_DL.value;

  set Dart_NewUnhandledExceptionError_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_NewUnhandledExceptionError_Type>>
              value) =>
      _Dart_NewUnhandledExceptionError_DL.value = value;

  late final ffi
          .Pointer<ffi.Pointer<ffi.NativeFunction<Dart_PropagateError_Type>>>
      _Dart_PropagateError_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_PropagateError_Type>>>(
          'Dart_PropagateError_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_PropagateError_Type>>
      get Dart_PropagateError_DL => _Dart_PropagateError_DL.value;

  set Dart_PropagateError_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_PropagateError_Type>> value) =>
      _Dart_PropagateError_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_HandleFromPersistent_Type>>>
      _Dart_HandleFromPersistent_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_HandleFromPersistent_Type>>>(
          'Dart_HandleFromPersistent_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_HandleFromPersistent_Type>>
      get Dart_HandleFromPersistent_DL => _Dart_HandleFromPersistent_DL.value;

  set Dart_HandleFromPersistent_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_HandleFromPersistent_Type>>
              value) =>
      _Dart_HandleFromPersistent_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_HandleFromWeakPersistent_Type>>>
      _Dart_HandleFromWeakPersistent_DL = _lookup<
              ffi.Pointer<
                  ffi.NativeFunction<Dart_HandleFromWeakPersistent_Type>>>(
          'Dart_HandleFromWeakPersistent_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_HandleFromWeakPersistent_Type>>
      get Dart_HandleFromWeakPersistent_DL =>
          _Dart_HandleFromWeakPersistent_DL.value;

  set Dart_HandleFromWeakPersistent_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_HandleFromWeakPersistent_Type>>
              value) =>
      _Dart_HandleFromWeakPersistent_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_NewPersistentHandle_Type>>>
      _Dart_NewPersistentHandle_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_NewPersistentHandle_Type>>>(
          'Dart_NewPersistentHandle_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_NewPersistentHandle_Type>>
      get Dart_NewPersistentHandle_DL => _Dart_NewPersistentHandle_DL.value;

  set Dart_NewPersistentHandle_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_NewPersistentHandle_Type>>
              value) =>
      _Dart_NewPersistentHandle_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_SetPersistentHandle_Type>>>
      _Dart_SetPersistentHandle_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_SetPersistentHandle_Type>>>(
          'Dart_SetPersistentHandle_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_SetPersistentHandle_Type>>
      get Dart_SetPersistentHandle_DL => _Dart_SetPersistentHandle_DL.value;

  set Dart_SetPersistentHandle_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_SetPersistentHandle_Type>>
              value) =>
      _Dart_SetPersistentHandle_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_DeletePersistentHandle_Type>>>
      _Dart_DeletePersistentHandle_DL = _lookup<
              ffi.Pointer<
                  ffi.NativeFunction<Dart_DeletePersistentHandle_Type>>>(
          'Dart_DeletePersistentHandle_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_DeletePersistentHandle_Type>>
      get Dart_DeletePersistentHandle_DL =>
          _Dart_DeletePersistentHandle_DL.value;

  set Dart_DeletePersistentHandle_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_DeletePersistentHandle_Type>>
              value) =>
      _Dart_DeletePersistentHandle_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_NewWeakPersistentHandle_Type>>>
      _Dart_NewWeakPersistentHandle_DL = _lookup<
              ffi.Pointer<
                  ffi.NativeFunction<Dart_NewWeakPersistentHandle_Type>>>(
          'Dart_NewWeakPersistentHandle_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_NewWeakPersistentHandle_Type>>
      get Dart_NewWeakPersistentHandle_DL =>
          _Dart_NewWeakPersistentHandle_DL.value;

  set Dart_NewWeakPersistentHandle_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_NewWeakPersistentHandle_Type>>
              value) =>
      _Dart_NewWeakPersistentHandle_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_DeleteWeakPersistentHandle_Type>>>
      _Dart_DeleteWeakPersistentHandle_DL = _lookup<
              ffi.Pointer<
                  ffi.NativeFunction<Dart_DeleteWeakPersistentHandle_Type>>>(
          'Dart_DeleteWeakPersistentHandle_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_DeleteWeakPersistentHandle_Type>>
      get Dart_DeleteWeakPersistentHandle_DL =>
          _Dart_DeleteWeakPersistentHandle_DL.value;

  set Dart_DeleteWeakPersistentHandle_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_DeleteWeakPersistentHandle_Type>>
              value) =>
      _Dart_DeleteWeakPersistentHandle_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_UpdateExternalSize_Type>>>
      _Dart_UpdateExternalSize_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_UpdateExternalSize_Type>>>(
          'Dart_UpdateExternalSize_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_UpdateExternalSize_Type>>
      get Dart_UpdateExternalSize_DL => _Dart_UpdateExternalSize_DL.value;

  set Dart_UpdateExternalSize_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_UpdateExternalSize_Type>>
              value) =>
      _Dart_UpdateExternalSize_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_NewFinalizableHandle_Type>>>
      _Dart_NewFinalizableHandle_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_NewFinalizableHandle_Type>>>(
          'Dart_NewFinalizableHandle_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_NewFinalizableHandle_Type>>
      get Dart_NewFinalizableHandle_DL => _Dart_NewFinalizableHandle_DL.value;

  set Dart_NewFinalizableHandle_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_NewFinalizableHandle_Type>>
              value) =>
      _Dart_NewFinalizableHandle_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<ffi.NativeFunction<Dart_DeleteFinalizableHandle_Type>>>
      _Dart_DeleteFinalizableHandle_DL = _lookup<
              ffi.Pointer<
                  ffi.NativeFunction<Dart_DeleteFinalizableHandle_Type>>>(
          'Dart_DeleteFinalizableHandle_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_DeleteFinalizableHandle_Type>>
      get Dart_DeleteFinalizableHandle_DL =>
          _Dart_DeleteFinalizableHandle_DL.value;

  set Dart_DeleteFinalizableHandle_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_DeleteFinalizableHandle_Type>>
              value) =>
      _Dart_DeleteFinalizableHandle_DL.value = value;

  late final ffi.Pointer<
          ffi.Pointer<
              ffi.NativeFunction<Dart_UpdateFinalizableExternalSize_Type>>>
      _Dart_UpdateFinalizableExternalSize_DL = _lookup<
              ffi.Pointer<
                  ffi.NativeFunction<Dart_UpdateFinalizableExternalSize_Type>>>(
          'Dart_UpdateFinalizableExternalSize_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_UpdateFinalizableExternalSize_Type>>
      get Dart_UpdateFinalizableExternalSize_DL =>
          _Dart_UpdateFinalizableExternalSize_DL.value;

  set Dart_UpdateFinalizableExternalSize_DL(
          ffi.Pointer<
                  ffi.NativeFunction<Dart_UpdateFinalizableExternalSize_Type>>
              value) =>
      _Dart_UpdateFinalizableExternalSize_DL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<Dart_Post_Type>>>
      _Dart_Post_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_Post_Type>>>('Dart_Post_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_Post_Type>> get Dart_Post_DL =>
      _Dart_Post_DL.value;

  set Dart_Post_DL(ffi.Pointer<ffi.NativeFunction<Dart_Post_Type>> value) =>
      _Dart_Post_DL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<Dart_NewSendPort_Type>>>
      _Dart_NewSendPort_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_NewSendPort_Type>>>(
          'Dart_NewSendPort_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_NewSendPort_Type>>
      get Dart_NewSendPort_DL => _Dart_NewSendPort_DL.value;

  set Dart_NewSendPort_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_NewSendPort_Type>> value) =>
      _Dart_NewSendPort_DL.value = value;

  late final ffi
          .Pointer<ffi.Pointer<ffi.NativeFunction<Dart_SendPortGetId_Type>>>
      _Dart_SendPortGetId_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_SendPortGetId_Type>>>(
          'Dart_SendPortGetId_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_SendPortGetId_Type>>
      get Dart_SendPortGetId_DL => _Dart_SendPortGetId_DL.value;

  set Dart_SendPortGetId_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_SendPortGetId_Type>> value) =>
      _Dart_SendPortGetId_DL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<Dart_EnterScope_Type>>>
      _Dart_EnterScope_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_EnterScope_Type>>>(
          'Dart_EnterScope_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_EnterScope_Type>>
      get Dart_EnterScope_DL => _Dart_EnterScope_DL.value;

  set Dart_EnterScope_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_EnterScope_Type>> value) =>
      _Dart_EnterScope_DL.value = value;

  late final ffi.Pointer<ffi.Pointer<ffi.NativeFunction<Dart_ExitScope_Type>>>
      _Dart_ExitScope_DL =
      _lookup<ffi.Pointer<ffi.NativeFunction<Dart_ExitScope_Type>>>(
          'Dart_ExitScope_DL');

  ffi.Pointer<ffi.NativeFunction<Dart_ExitScope_Type>> get Dart_ExitScope_DL =>
      _Dart_ExitScope_DL.value;

  set Dart_ExitScope_DL(
          ffi.Pointer<ffi.NativeFunction<Dart_ExitScope_Type>> value) =>
      _Dart_ExitScope_DL.value = value;

  /// // Initialize Dart API with dynamic linking.
  /// //
  /// // Must be called with `NativeApi.initializeApiDLData` from `dart:ffi`, before
  /// // using other functions.
  /// //
  /// // Returns 1 on success.
  int webcrypto_dart_dl_initialize(
    ffi.Pointer<ffi.Void> initialize_api_dl_data,
  ) {
    return (_webcrypto_dart_dl_initialize ??=
        _lookup<ffi.NativeFunction<_c_webcrypto_dart_dl_initialize>>(
                'webcrypto_dart_dl_initialize')
            .asFunction<_dart_webcrypto_dart_dl_initialize>())(
      initialize_api_dl_data,
    );
  }

  _dart_webcrypto_dart_dl_initialize? _webcrypto_dart_dl_initialize;

  /// // Attach a finalizer for pointer to object, such that `finalizer(pointer)` will
  /// // be called when `object` is collected by the Dart garbage collector.
  /// //
  /// // The external_allocation_size is used by the Dart garbage collector as a hint
  /// // about the size of the external allocation.
  /// //
  /// // Returns 1 on success.
  int webcrypto_dart_dl_attach_finalizer(
    Object object,
    ffi.Pointer<ffi.Void> pointer,
    ffi.Pointer<ffi.NativeFunction<webcrypto_finalizer_t>> finalizer,
    int external_allocation_size,
  ) {
    return (_webcrypto_dart_dl_attach_finalizer ??=
        _lookup<ffi.NativeFunction<_c_webcrypto_dart_dl_attach_finalizer>>(
                'webcrypto_dart_dl_attach_finalizer')
            .asFunction<_dart_webcrypto_dart_dl_attach_finalizer>())(
      object,
      pointer,
      finalizer,
      external_allocation_size,
    );
  }

  _dart_webcrypto_dart_dl_attach_finalizer? _webcrypto_dart_dl_attach_finalizer;

  /// // Symbol lookup table defined in `symbols.generated.h`, with indexes matching
  /// // the enum values in `lib/src/boringssl/lookup/symbols.generated.dart`.
  late final ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Void>>>
      __webcrypto_symbol_table =
      _lookup<ffi.Pointer<ffi.Pointer<ffi.Void>>>('_webcrypto_symbol_table');

  ffi.Pointer<ffi.Pointer<ffi.Void>> get _webcrypto_symbol_table =>
      __webcrypto_symbol_table.value;

  set _webcrypto_symbol_table(ffi.Pointer<ffi.Pointer<ffi.Void>> value) =>
      __webcrypto_symbol_table.value = value;

  /// // Function to lookup BoringSSL symbols based on index in the Sym enum.
  /// // See src/symbols.yaml for details.
  ffi.Pointer<ffi.Void> webcrypto_lookup_symbol(
    int index,
  ) {
    return (_webcrypto_lookup_symbol ??=
        _lookup<ffi.NativeFunction<_c_webcrypto_lookup_symbol>>(
                'webcrypto_lookup_symbol')
            .asFunction<_dart_webcrypto_lookup_symbol>())(
      index,
    );
  }

  _dart_webcrypto_lookup_symbol? _webcrypto_lookup_symbol;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Opaque {}

class _opaque_pthread_cond_t extends ffi.Opaque {}

class _opaque_pthread_condattr_t extends ffi.Opaque {}

class _opaque_pthread_mutex_t extends ffi.Opaque {}

class _opaque_pthread_mutexattr_t extends ffi.Opaque {}

class _opaque_pthread_once_t extends ffi.Opaque {}

class _opaque_pthread_rwlock_t extends ffi.Opaque {}

class _opaque_pthread_rwlockattr_t extends ffi.Opaque {}

class _opaque_pthread_t extends ffi.Opaque {}

class fd_set extends ffi.Opaque {}

class ASN1_ITEM_st extends ffi.Opaque {}

class asn1_object_st extends ffi.Opaque {}

class asn1_pctx_st extends ffi.Opaque {}

/// This is the base type that holds just about everything :-)
class asn1_string_st extends ffi.Opaque {}

class asn1_type_st extends ffi.Opaque {}

class AUTHORITY_KEYID_st extends ffi.Opaque {}

class BASIC_CONSTRAINTS_st extends ffi.Opaque {}

class DIST_POINT_st extends ffi.Opaque {}

/// // DSA_SIG_st (aka |DSA_SIG|) contains a DSA signature as a pair of integers.
class DSA_SIG_st extends ffi.Opaque {}

class ISSUING_DIST_POINT_st extends ffi.Opaque {}

class NAME_CONSTRAINTS_st extends ffi.Opaque {}

/// // The next 2 structures and their 8 routines were sent to me by
/// // Pat Richard <patr@x509.com> and are used to manipulate
/// // Netscapes spki structures - useful if you are writing a CA web page
class Netscape_spkac_st extends ffi.Opaque {}

class Netscape_spki_st extends ffi.Opaque {}

class RIPEMD160state_st extends ffi.Opaque {}

class X509_POLICY_CACHE_st extends ffi.Opaque {}

class X509_POLICY_LEVEL_st extends ffi.Opaque {}

class X509_POLICY_NODE_st extends ffi.Opaque {}

class X509_POLICY_TREE_st extends ffi.Opaque {}

/// This structure hold all parameters associated with a verify operation
/// by including an X509_VERIFY_PARAM structure in related structures the
/// parameters used can be customized
class X509_VERIFY_PARAM_st extends ffi.Opaque {}

class X509_algor_st extends ffi.Opaque {}

class X509_crl_info_st extends ffi.Opaque {}

class X509_crl_st extends ffi.Opaque {}

class X509_extension_st extends ffi.Opaque {}

class X509_info_st extends ffi.Opaque {}

class X509_name_entry_st extends ffi.Opaque {}

/// // we always keep X509_NAMEs in 2 forms.
class X509_name_st extends ffi.Opaque {}

class X509_pubkey_st extends ffi.Opaque {}

class X509_req_info_st extends ffi.Opaque {}

class X509_req_st extends ffi.Opaque {}

class X509_sig_st extends ffi.Opaque {}

class X509_val_st extends ffi.Opaque {}

class bignum_ctx extends ffi.Opaque {}

/// // Private functions
class BIGNUM extends ffi.Opaque {}

class bio_method_st extends ffi.Opaque {}

class bio_st extends ffi.Opaque {}

/// // bn_gencb_st, or |BN_GENCB|, holds a callback function that is used by
/// // generation functions that can take a very long time to complete. Use
/// // |BN_GENCB_set| to initialise a |BN_GENCB| structure.
/// //
/// // The callback receives the address of that |BN_GENCB| structure as its last
/// // argument and the user is free to put an arbitrary pointer in |arg|. The other
/// // arguments are set as follows:
/// //   event=BN_GENCB_GENERATED, n=i:   after generating the i'th possible prime
/// //                                    number.
/// //   event=BN_GENCB_PRIME_TEST, n=-1: when finished trial division primality
/// //                                    checks.
/// //   event=BN_GENCB_PRIME_TEST, n=i:  when the i'th primality test has finished.
/// //
/// // The callback can return zero to abort the generation progress or one to
/// // allow it to continue.
/// //
/// // When other code needs to call a BN generation function it will often take a
/// // BN_GENCB argument and may call the function with other argument values.
class bn_gencb_st extends ffi.Opaque {}

class bn_mont_ctx_st extends ffi.Opaque {}

/// // buf_mem_st (aka |BUF_MEM|) is a generic buffer object used by OpenSSL.
class buf_mem_st extends ffi.Opaque {}

class CBB extends ffi.Struct {
  external ffi.Pointer<ffi.Void> base;

  external ffi.Pointer<CBB> child;

  @ffi.IntPtr()
  external int offset;

  @ffi.Uint8()
  external int pending_len_len;

  @ffi.Int8()
  external int pending_is_asn1;

  @ffi.Int8()
  external int is_top_level;
}

/// // CRYPTO ByteString
class CBS extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> data;

  @ffi.IntPtr()
  external int len;
}

class cmac_ctx_st extends ffi.Opaque {}

class conf_st extends ffi.Opaque {}

class conf_value_st extends ffi.Opaque {}

class crypto_buffer_pool_st extends ffi.Opaque {}

class crypto_buffer_st extends ffi.Opaque {}

class dh_st extends ffi.Opaque {}

class dsa_st extends ffi.Opaque {}

class ec_group_st extends ffi.Opaque {}

class ec_key_st extends ffi.Opaque {}

class ec_point_st extends ffi.Opaque {}

/// // ecdsa_method_st is a structure of function pointers for implementing ECDSA.
/// // See engine.h.
class ecdsa_method_st extends ffi.Opaque {}

/// // Low-level signing and verification.
/// //
/// // Low-level functions handle signatures as |ECDSA_SIG| structures which allow
/// // the two values in an ECDSA signature to be handled separately.
class ecdsa_sig_st extends ffi.Opaque {}

class engine_st extends ffi.Opaque {}

class EVP_MD_CTX extends ffi.Opaque {}

class EVP_MD extends ffi.Opaque {}

class evp_aead_st extends ffi.Opaque {}

class evp_cipher_ctx_st extends ffi.Opaque {}

class evp_cipher_st extends ffi.Opaque {}

class evp_encode_ctx_st extends ffi.Opaque {}

class evp_pkey_asn1_method_st extends ffi.Opaque {}

class EVP_PKEY_CTX extends ffi.Opaque {}

class evp_pkey_method_st extends ffi.Opaque {}

/// // Private structures.
class EVP_PKEY extends ffi.Opaque {}

class hmac_ctx_st extends ffi.Opaque {}

class md4_state_st extends ffi.Opaque {}

class md5_state_st extends ffi.Opaque {}

class ossl_init_settings_st extends ffi.Opaque {}

class pkcs12_st extends ffi.Opaque {}

/// // PKCS#8 private key info structure
class pkcs8_priv_key_info_st extends ffi.Opaque {}

class private_key_st extends ffi.Opaque {}

class rand_meth_st extends ffi.Opaque {}

class rc4_key_st extends ffi.Opaque {}

class rsa_meth_st extends ffi.Opaque {}

class rsa_st extends ffi.Opaque {}

class sha256_state_st extends ffi.Opaque {}

class sha512_state_st extends ffi.Opaque {}

class sha_state_st extends ffi.Opaque {}

class spake2_ctx_st extends ffi.Opaque {}

class srtp_protection_profile_st extends ffi.Opaque {}

class ssl_cipher_st extends ffi.Opaque {}

class ssl_ctx_st extends ffi.Opaque {}

class ssl_method_st extends ffi.Opaque {}

class ssl_private_key_method_st extends ffi.Opaque {}

class ssl_quic_method_st extends ffi.Opaque {}

class ssl_session_st extends ffi.Opaque {}

class ssl_st extends ffi.Opaque {}

class ssl_ticket_aead_method_st extends ffi.Opaque {}

class st_ERR_FNS extends ffi.Opaque {}

class trust_token_st extends ffi.Opaque {}

class trust_token_client_st extends ffi.Opaque {}

class trust_token_issuer_st extends ffi.Opaque {}

class trust_token_method_st extends ffi.Opaque {}

class v3_ext_ctx extends ffi.Opaque {}

/// // a sequence of these are used
class x509_attributes_st extends ffi.Opaque {}

/// // This stuff is certificate "auxiliary info"
/// // it contains details which are useful in certificate
/// // stores and databases. When used this is tagged onto
/// // the end of the certificate itself
class x509_cert_aux_st extends ffi.Opaque {}

class x509_cinf_st extends ffi.Opaque {}

class x509_crl_method_st extends ffi.Opaque {}

/// This is the functions plus an instance of the local variables.
class x509_lookup_st extends ffi.Opaque {}

class x509_revoked_st extends ffi.Opaque {}

class x509_st extends ffi.Opaque {}

/// This is a used when verifying cert chains.  Since the
/// gathering of the cert chain can take some time (and have to be
/// 'retried', this needs to be kept and passed around.
class x509_store_ctx_st extends ffi.Opaque {}

/// This is used to hold everything.  It is used for all certificate
/// validation.  Once we have a certificate chain, the 'verify'
/// function is then called to actually check the cert chain.
class x509_store_st extends ffi.Opaque {}

/// // This is used for a table of trust checking functions
class x509_trust_st extends ffi.Opaque {}

class __sbuf extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> _base;

  @ffi.Int32()
  external int _size;
}

class __sFILEX extends ffi.Opaque {}

class FILE extends ffi.Opaque {}

/// // stack_st contains an array of pointers. It is not designed to be used
/// // directly, rather the wrapper macros should be used.
class _STACK extends ffi.Struct {
  /// // num contains the number of valid pointers in |data|.
  @ffi.IntPtr()
  external int num;

  external ffi.Pointer<ffi.Pointer<ffi.Void>> data;

  /// // sorted is non-zero if the values pointed to by |data| are in ascending
  /// // order, based on |comp|.
  @ffi.Int32()
  external int sorted;

  /// // num_alloc contains the number of pointers allocated in the buffer pointed
  /// // to by |data|, which may be larger than |num|.
  @ffi.IntPtr()
  external int num_alloc;

  /// // comp is an optional comparison function.
  external ffi.Pointer<ffi.NativeFunction<stack_cmp_func>> comp;
}

class stack_st_void extends ffi.Opaque {}

class stack_st_OPENSSL_STRING extends ffi.Opaque {}

class crypto_ex_data_st extends ffi.Opaque {}

class CRYPTO_dynlock_value extends ffi.Opaque {}

class CRYPTO_dynlock extends ffi.Struct {
  @ffi.Int32()
  external int references;

  external ffi.Pointer<CRYPTO_dynlock_value> data;
}

class stack_st_BIO extends ffi.Opaque {}

class EVP_CIPHER_INFO extends ffi.Opaque {}

class evp_md_pctx_ops extends ffi.Opaque {}

/// // An EVP_AEAD_CTX represents an AEAD algorithm configured with a specific key
/// // and message-independent IV.
class EVP_AEAD_CTX extends ffi.Opaque {}

/// // evp_aead_direction_t denotes the direction of an AEAD operation.
abstract class evp_aead_direction_t {
  static const int evp_aead_open = 0;
  static const int evp_aead_seal = 1;
}

class stack_st_CRYPTO_BUFFER extends ffi.Opaque {}

class stack_st_X509 extends ffi.Opaque {}

class stack_st_X509_CRL extends ffi.Opaque {}

/// // Deprecated functions.
/// //
/// // These functions are a compatibility layer over a subset of OpenSSL's PKCS#7
/// // API. It intentionally does not implement the whole thing, only the minimum
/// // needed to build cryptography.io.
class PKCS7_SIGNED extends ffi.Struct {
  external ffi.Pointer<stack_st_X509> cert;

  external ffi.Pointer<stack_st_X509_CRL> crl;
}

class PKCS7_SIGN_ENVELOPE extends ffi.Struct {
  external ffi.Pointer<stack_st_X509> cert;

  external ffi.Pointer<stack_st_X509_CRL> crl;
}

class PKCS7 extends ffi.Opaque {}

class timespec extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int64()
  external int tv_nsec;
}

class tm extends ffi.Struct {
  @ffi.Int32()
  external int tm_sec;

  @ffi.Int32()
  external int tm_min;

  @ffi.Int32()
  external int tm_hour;

  @ffi.Int32()
  external int tm_mday;

  @ffi.Int32()
  external int tm_mon;

  @ffi.Int32()
  external int tm_year;

  @ffi.Int32()
  external int tm_wday;

  @ffi.Int32()
  external int tm_yday;

  @ffi.Int32()
  external int tm_isdst;

  @ffi.Int64()
  external int tm_gmtoff;

  external ffi.Pointer<ffi.Int8> tm_zone;
}

abstract class clockid_t {
  static const int _CLOCK_REALTIME = 0;
  static const int _CLOCK_MONOTONIC = 6;
  static const int _CLOCK_MONOTONIC_RAW = 4;
  static const int _CLOCK_MONOTONIC_RAW_APPROX = 5;
  static const int _CLOCK_UPTIME_RAW = 8;
  static const int _CLOCK_UPTIME_RAW_APPROX = 9;
  static const int _CLOCK_PROCESS_CPUTIME_ID = 12;
  static const int _CLOCK_THREAD_CPUTIME_ID = 16;
}

class imaxdiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

/// // bn_primality_result_t enumerates the outcomes of primality-testing.
abstract class bn_primality_result_t {
  static const int bn_probably_prime = 0;
  static const int bn_composite = 1;
  static const int bn_non_prime_power_composite = 2;
}

class stack_st_ASN1_OBJECT extends ffi.Opaque {}

/// ASN1_ENCODING structure: this is used to save the received
/// encoding of an ASN1 type. This is useful to get round
/// problems with invalid encodings which can break signatures.
class ASN1_ENCODING extends ffi.Opaque {}

class ASN1_STRING_TABLE extends ffi.Struct {
  @ffi.Int32()
  external int nid;

  @ffi.Int64()
  external int minsize;

  @ffi.Int64()
  external int maxsize;

  @ffi.Uint64()
  external int mask;

  @ffi.Uint64()
  external int flags;
}

class ASN1_TEMPLATE_st extends ffi.Opaque {}

class ASN1_TLC_st extends ffi.Opaque {}

class ASN1_VALUE_st extends ffi.Opaque {}

class stack_st_ASN1_INTEGER extends ffi.Opaque {}

class stack_st_ASN1_TYPE extends ffi.Opaque {}

/// This is used to contain a list of bit names
class BIT_STRING_BITNAME extends ffi.Struct {
  @ffi.Int32()
  external int bitnum;

  external ffi.Pointer<ffi.Int8> lname;

  external ffi.Pointer<ffi.Int8> sname;
}

/// // openssl_method_common_st contains the common part of all method structures.
/// // This must be the first member of all method structures.
class openssl_method_common_st extends ffi.Struct {
  /// // dummy – not used.
  @ffi.Int32()
  external int references;

  @ffi.Int8()
  external int is_static;
}

/// // point_conversion_form_t enumerates forms, as defined in X9.62 (ECDSA), for
/// // the encoding of a elliptic curve point (x,y)
abstract class point_conversion_form_t {
  /// // POINT_CONVERSION_COMPRESSED indicates that the point is encoded as z||x,
  /// // where the octet z specifies which solution of the quadratic equation y
  /// // is.
  static const int POINT_CONVERSION_COMPRESSED = 2;

  /// // POINT_CONVERSION_UNCOMPRESSED indicates that the point is encoded as
  /// // z||x||y, where z is the octet 0x04.
  static const int POINT_CONVERSION_UNCOMPRESSED = 4;

  /// // POINT_CONVERSION_HYBRID indicates that the point is encoded as z||x||y,
  /// // where z specifies which solution of the quadratic equation y is. This is
  /// // not supported by the code and has never been observed in use.
  /// //
  /// // TODO(agl): remove once node.js no longer references this.
  static const int POINT_CONVERSION_HYBRID = 6;
}

class ec_method_st extends ffi.Opaque {}

/// // EC_builtin_curve describes a supported elliptic curve.
class EC_builtin_curve extends ffi.Struct {
  @ffi.Int32()
  external int nid;

  external ffi.Pointer<ffi.Int8> comment;
}

/// // CRYPTO ByteBuilder.
/// //
/// // |CBB| objects allow one to build length-prefixed serialisations. A |CBB|
/// // object is associated with a buffer and new buffers are created with
/// // |CBB_init|. Several |CBB| objects can point at the same buffer when a
/// // length-prefix is pending, however only a single |CBB| can be 'current' at
/// // any one time. For example, if one calls |CBB_add_u8_length_prefixed| then
/// // the new |CBB| points at the same buffer as the original. But if the original
/// // |CBB| is used then the length prefix is written out and the new |CBB| must
/// // not be used again.
/// //
/// // If one needs to force a length prefix to be written out because a |CBB| is
/// // going out of scope, use |CBB_flush|. If an operation on a |CBB| fails, it is
/// // in an undefined state and must not be used except to call |CBB_cleanup|.
class cbb_buffer_st extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> buf;

  /// // The number of valid bytes.
  @ffi.IntPtr()
  external int len;

  /// // The size of buf.
  @ffi.IntPtr()
  external int cap;

  /// One iff |buf| is owned by this object. If not then |buf|
  /// cannot be resized.
  @ffi.Int8()
  external int can_resize;

  /// One iff there was an error writing to this CBB. All future
  /// operations will fail.
  @ffi.Int8()
  external int error;
}

/// // Deprecated functions.
class OBJ_NAME extends ffi.Struct {
  @ffi.Int32()
  external int type;

  @ffi.Int32()
  external int alias;

  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> data;
}

class bn_blinding_st extends ffi.Opaque {}

class stack_st_X509_ALGOR extends ffi.Opaque {}

class stack_st_X509_NAME_ENTRY extends ffi.Opaque {}

class stack_st_X509_NAME extends ffi.Opaque {}

class stack_st_X509_EXTENSION extends ffi.Opaque {}

class stack_st_X509_ATTRIBUTE extends ffi.Opaque {}

class stack_st_DIST_POINT extends ffi.Opaque {}

class stack_st_GENERAL_NAME extends ffi.Opaque {}

class stack_st_X509_TRUST extends ffi.Opaque {}

class stack_st_X509_REVOKED extends ffi.Opaque {}

class stack_st_GENERAL_NAMES extends ffi.Opaque {}

class stack_st_X509_INFO extends ffi.Opaque {}

class X509_OBJECT extends ffi.Opaque {}

class stack_st_X509_LOOKUP extends ffi.Opaque {}

class stack_st_X509_OBJECT extends ffi.Opaque {}

/// This is a static that defines the function interface
class X509_LOOKUP_METHOD extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_7>> new_item;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_8>> free;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_9>> init;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_10>> shutdown;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_11>> ctrl;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_12>> get_by_subject;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_13>> get_by_issuer_serial;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_14>> get_by_fingerprint;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_15>> get_by_alias;
}

class X509_VERIFY_PARAM_ID_st extends ffi.Opaque {}

class stack_st_X509_VERIFY_PARAM extends ffi.Opaque {}

class stack_st_X509_POLICY_NODE extends ffi.Opaque {}

class stack_st_POLICYQUALINFO extends ffi.Opaque {}

class RSA_PSS_PARAMS extends ffi.Struct {
  external ffi.Pointer<X509_algor_st> hashAlgorithm;

  external ffi.Pointer<X509_algor_st> maskGenAlgorithm;

  external ffi.Pointer<asn1_string_st> saltLength;

  external ffi.Pointer<asn1_string_st> trailerField;
}

abstract class idtype_t {
  static const int P_ALL = 0;
  static const int P_PID = 1;
  static const int P_PGID = 2;
}

class __darwin_i386_thread_state extends ffi.Struct {
  @ffi.Uint32()
  external int __eax;

  @ffi.Uint32()
  external int __ebx;

  @ffi.Uint32()
  external int __ecx;

  @ffi.Uint32()
  external int __edx;

  @ffi.Uint32()
  external int __edi;

  @ffi.Uint32()
  external int __esi;

  @ffi.Uint32()
  external int __ebp;

  @ffi.Uint32()
  external int __esp;

  @ffi.Uint32()
  external int __ss;

  @ffi.Uint32()
  external int __eflags;

  @ffi.Uint32()
  external int __eip;

  @ffi.Uint32()
  external int __cs;

  @ffi.Uint32()
  external int __ds;

  @ffi.Uint32()
  external int __es;

  @ffi.Uint32()
  external int __fs;

  @ffi.Uint32()
  external int __gs;
}

class __darwin_fp_control extends ffi.Opaque {}

class __darwin_fp_status extends ffi.Opaque {}

class __darwin_mmst_reg extends ffi.Opaque {}

class __darwin_xmm_reg extends ffi.Opaque {}

class __darwin_ymm_reg extends ffi.Opaque {}

class __darwin_zmm_reg extends ffi.Opaque {}

class __darwin_opmask_reg extends ffi.Opaque {}

class __darwin_i386_float_state extends ffi.Opaque {}

class __darwin_i386_avx_state extends ffi.Opaque {}

class __darwin_i386_avx512_state extends ffi.Opaque {}

class __darwin_i386_exception_state extends ffi.Struct {
  @ffi.Uint16()
  external int __trapno;

  @ffi.Uint16()
  external int __cpu;

  @ffi.Uint32()
  external int __err;

  @ffi.Uint32()
  external int __faultvaddr;
}

class __darwin_x86_debug_state32 extends ffi.Struct {
  @ffi.Uint32()
  external int __dr0;

  @ffi.Uint32()
  external int __dr1;

  @ffi.Uint32()
  external int __dr2;

  @ffi.Uint32()
  external int __dr3;

  @ffi.Uint32()
  external int __dr4;

  @ffi.Uint32()
  external int __dr5;

  @ffi.Uint32()
  external int __dr6;

  @ffi.Uint32()
  external int __dr7;
}

class __x86_pagein_state extends ffi.Struct {
  @ffi.Int32()
  external int __pagein_error;
}

class __darwin_x86_thread_state64 extends ffi.Struct {
  @ffi.Uint64()
  external int __rax;

  @ffi.Uint64()
  external int __rbx;

  @ffi.Uint64()
  external int __rcx;

  @ffi.Uint64()
  external int __rdx;

  @ffi.Uint64()
  external int __rdi;

  @ffi.Uint64()
  external int __rsi;

  @ffi.Uint64()
  external int __rbp;

  @ffi.Uint64()
  external int __rsp;

  @ffi.Uint64()
  external int __r8;

  @ffi.Uint64()
  external int __r9;

  @ffi.Uint64()
  external int __r10;

  @ffi.Uint64()
  external int __r11;

  @ffi.Uint64()
  external int __r12;

  @ffi.Uint64()
  external int __r13;

  @ffi.Uint64()
  external int __r14;

  @ffi.Uint64()
  external int __r15;

  @ffi.Uint64()
  external int __rip;

  @ffi.Uint64()
  external int __rflags;

  @ffi.Uint64()
  external int __cs;

  @ffi.Uint64()
  external int __fs;

  @ffi.Uint64()
  external int __gs;
}

class __darwin_x86_thread_full_state64 extends ffi.Struct {
  external __darwin_x86_thread_state64 __ss64;

  @ffi.Uint64()
  external int __ds;

  @ffi.Uint64()
  external int __es;

  @ffi.Uint64()
  external int __ss;

  @ffi.Uint64()
  external int __gsbase;
}

class __darwin_x86_float_state64 extends ffi.Opaque {}

class __darwin_x86_avx_state64 extends ffi.Opaque {}

class __darwin_x86_avx512_state64 extends ffi.Opaque {}

class __darwin_x86_exception_state64 extends ffi.Struct {
  @ffi.Uint16()
  external int __trapno;

  @ffi.Uint16()
  external int __cpu;

  @ffi.Uint32()
  external int __err;

  @ffi.Uint64()
  external int __faultvaddr;
}

class __darwin_x86_debug_state64 extends ffi.Struct {
  @ffi.Uint64()
  external int __dr0;

  @ffi.Uint64()
  external int __dr1;

  @ffi.Uint64()
  external int __dr2;

  @ffi.Uint64()
  external int __dr3;

  @ffi.Uint64()
  external int __dr4;

  @ffi.Uint64()
  external int __dr5;

  @ffi.Uint64()
  external int __dr6;

  @ffi.Uint64()
  external int __dr7;
}

class __darwin_x86_cpmu_state64 extends ffi.Opaque {}

class __darwin_mcontext32 extends ffi.Opaque {}

class __darwin_mcontext_avx32 extends ffi.Opaque {}

class __darwin_mcontext_avx512_32 extends ffi.Opaque {}

class __darwin_mcontext64 extends ffi.Opaque {}

class __darwin_mcontext64_full extends ffi.Opaque {}

class __darwin_mcontext_avx64 extends ffi.Opaque {}

class __darwin_mcontext_avx64_full extends ffi.Opaque {}

class __darwin_mcontext_avx512_64 extends ffi.Opaque {}

class __darwin_mcontext_avx512_64_full extends ffi.Opaque {}

class __darwin_sigaltstack extends ffi.Struct {
  external ffi.Pointer<ffi.Void> ss_sp;

  @ffi.Uint64()
  external int ss_size;

  @ffi.Int32()
  external int ss_flags;
}

class __darwin_ucontext extends ffi.Struct {
  @ffi.Int32()
  external int uc_onstack;

  @ffi.Uint32()
  external int uc_sigmask;

  external __darwin_sigaltstack uc_stack;

  external ffi.Pointer<__darwin_ucontext> uc_link;

  @ffi.Uint64()
  external int uc_mcsize;

  external ffi.Pointer<__darwin_mcontext64> uc_mcontext;
}

class sigevent extends ffi.Opaque {}

class siginfo_t extends ffi.Opaque {}

class __sigaction extends ffi.Opaque {}

class sigaction extends ffi.Opaque {}

class sigvec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_17>> sv_handler;

  @ffi.Int32()
  external int sv_mask;

  @ffi.Int32()
  external int sv_flags;
}

class sigstack extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> ss_sp;

  @ffi.Int32()
  external int ss_onstack;
}

class timeval extends ffi.Struct {
  @ffi.Int64()
  external int tv_sec;

  @ffi.Int32()
  external int tv_usec;
}

class rusage extends ffi.Struct {
  external timeval ru_utime;

  external timeval ru_stime;

  @ffi.Int64()
  external int ru_maxrss;

  @ffi.Int64()
  external int ru_ixrss;

  @ffi.Int64()
  external int ru_idrss;

  @ffi.Int64()
  external int ru_isrss;

  @ffi.Int64()
  external int ru_minflt;

  @ffi.Int64()
  external int ru_majflt;

  @ffi.Int64()
  external int ru_nswap;

  @ffi.Int64()
  external int ru_inblock;

  @ffi.Int64()
  external int ru_oublock;

  @ffi.Int64()
  external int ru_msgsnd;

  @ffi.Int64()
  external int ru_msgrcv;

  @ffi.Int64()
  external int ru_nsignals;

  @ffi.Int64()
  external int ru_nvcsw;

  @ffi.Int64()
  external int ru_nivcsw;
}

class rusage_info_v0 extends ffi.Opaque {}

class rusage_info_v1 extends ffi.Opaque {}

class rusage_info_v2 extends ffi.Opaque {}

class rusage_info_v3 extends ffi.Opaque {}

class rusage_info_v4 extends ffi.Opaque {}

class rlimit extends ffi.Struct {
  @ffi.Uint64()
  external int rlim_cur;

  @ffi.Uint64()
  external int rlim_max;
}

class proc_rlimit_control_wakeupmon extends ffi.Struct {
  @ffi.Uint32()
  external int wm_flags;

  @ffi.Int32()
  external int wm_rate;
}

class div_t extends ffi.Struct {
  @ffi.Int32()
  external int quot;

  @ffi.Int32()
  external int rem;
}

class ldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class lldiv_t extends ffi.Struct {
  @ffi.Int64()
  external int quot;

  @ffi.Int64()
  external int rem;
}

class BF_KEY extends ffi.Opaque {}

/// // lhash_item_st is an element of a hash chain. It points to the opaque data
/// // for this element and to the next item in the chain. The linked-list is NULL
/// // terminated.
class LHASH_ITEM extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  external ffi.Pointer<LHASH_ITEM> next;

  /// // hash contains the cached, hash value of |data|.
  @ffi.Uint32()
  external int hash;
}

class lhash_st extends ffi.Opaque {}

class stack_st_CONF_VALUE extends ffi.Opaque {}

class lhash_st_CONF_VALUE extends ffi.Opaque {}

/// Forward reference
class v3_ext_method extends ffi.Opaque {}

class X509V3_CONF_METHOD extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_18>> get_string;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_19>> get_section;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_20>> free_string;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_21>> free_section;
}

class stack_st_X509V3_EXT_METHOD extends ffi.Opaque {}

class PKEY_USAGE_PERIOD extends ffi.Struct {
  external ffi.Pointer<asn1_string_st> notBefore;

  external ffi.Pointer<asn1_string_st> notAfter;
}

class OTHERNAME extends ffi.Struct {
  external ffi.Pointer<asn1_object_st> type_id;

  external ffi.Pointer<asn1_type_st> value;
}

class EDIPARTYNAME extends ffi.Struct {
  external ffi.Pointer<asn1_string_st> nameAssigner;

  external ffi.Pointer<asn1_string_st> partyName;
}

class GENERAL_NAME extends ffi.Opaque {}

class ACCESS_DESCRIPTION extends ffi.Struct {
  external ffi.Pointer<asn1_object_st> method;

  external ffi.Pointer<GENERAL_NAME> location;
}

class stack_st_ACCESS_DESCRIPTION extends ffi.Opaque {}

class DIST_POINT_NAME extends ffi.Opaque {}

/// Strong extranet structures
class SXNETID extends ffi.Struct {
  external ffi.Pointer<asn1_string_st> zone;

  external ffi.Pointer<asn1_string_st> user;
}

class stack_st_SXNETID extends ffi.Opaque {}

class SXNET extends ffi.Struct {
  external ffi.Pointer<asn1_string_st> version;

  external ffi.Pointer<stack_st_SXNETID> ids;
}

class NOTICEREF extends ffi.Struct {
  external ffi.Pointer<asn1_string_st> organization;

  external ffi.Pointer<stack_st_ASN1_INTEGER> noticenos;
}

class USERNOTICE extends ffi.Struct {
  external ffi.Pointer<NOTICEREF> noticeref;

  external ffi.Pointer<asn1_string_st> exptext;
}

class POLICYQUALINFO extends ffi.Opaque {}

class POLICYINFO extends ffi.Struct {
  external ffi.Pointer<asn1_object_st> policyid;

  external ffi.Pointer<stack_st_POLICYQUALINFO> qualifiers;
}

class stack_st_POLICYINFO extends ffi.Opaque {}

class POLICY_MAPPING extends ffi.Struct {
  external ffi.Pointer<asn1_object_st> issuerDomainPolicy;

  external ffi.Pointer<asn1_object_st> subjectDomainPolicy;
}

class stack_st_POLICY_MAPPING extends ffi.Opaque {}

class GENERAL_SUBTREE extends ffi.Struct {
  external ffi.Pointer<GENERAL_NAME> base;

  external ffi.Pointer<asn1_string_st> minimum;

  external ffi.Pointer<asn1_string_st> maximum;
}

class stack_st_GENERAL_SUBTREE extends ffi.Opaque {}

class POLICY_CONSTRAINTS extends ffi.Struct {
  external ffi.Pointer<asn1_string_st> requireExplicitPolicy;

  external ffi.Pointer<asn1_string_st> inhibitPolicyMapping;
}

/// Proxy certificate structures, see RFC 3820
class PROXY_POLICY extends ffi.Struct {
  external ffi.Pointer<asn1_object_st> policyLanguage;

  external ffi.Pointer<asn1_string_st> policy;
}

class PROXY_CERT_INFO_EXTENSION extends ffi.Struct {
  external ffi.Pointer<asn1_string_st> pcPathLengthConstraint;

  external ffi.Pointer<PROXY_POLICY> proxyPolicy;
}

class X509_PURPOSE extends ffi.Struct {
  @ffi.Int32()
  external int purpose;

  /// Default trust ID
  @ffi.Int32()
  external int trust;

  @ffi.Int32()
  external int flags;

  external ffi.Pointer<ffi.NativeFunction<_typedefC_22>> check_purpose;

  external ffi.Pointer<ffi.Int8> name;

  external ffi.Pointer<ffi.Int8> sname;

  external ffi.Pointer<ffi.Void> usr_data;
}

class stack_st_X509_PURPOSE extends ffi.Opaque {}

/// // aes_key_st should be an opaque type, but EVP requires that the size be
/// // known.
class aes_key_st extends ffi.Opaque {}

class CAST_KEY extends ffi.Opaque {}

/// // DES.
class DES_cblock extends ffi.Opaque {}

class DES_key_schedule extends ffi.Opaque {}

/// // HRSS
/// //
/// // HRSS is a structured-lattice-based post-quantum key encapsulation mechanism.
/// // The best exposition is https://eprint.iacr.org/2017/667.pdf although this
/// // implementation uses a different KEM construction based on
/// // https://eprint.iacr.org/2017/1005.pdf.
class HRSS_private_key extends ffi.Opaque {}

class HRSS_public_key extends ffi.Opaque {}

/// // spake2_role_t enumerates the different “roles” in SPAKE2. The protocol
/// // requires that the symmetry of the two parties be broken so one participant
/// // must be “Alice” and the other be “Bob”.
abstract class spake2_role_t {
  static const int spake2_role_alice = 0;
  static const int spake2_role_bob = 1;
}

class stack_st_TRUST_TOKEN extends ffi.Opaque {}

class ASN1_ADB_TABLE_st extends ffi.Opaque {}

class ASN1_ADB_st extends ffi.Opaque {}

class asn1_must_be_null_st extends ffi.Opaque {}

class ASN1_COMPAT_FUNCS extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<ASN1_new_func>> asn1_new;

  external ffi.Pointer<ffi.NativeFunction<ASN1_free_func>> asn1_free;

  external ffi.Pointer<ffi.NativeFunction<ASN1_d2i_func>> asn1_d2i;

  external ffi.Pointer<ffi.NativeFunction<ASN1_i2d_func>> asn1_i2d;
}

class ASN1_EXTERN_FUNCS extends ffi.Struct {
  external ffi.Pointer<ffi.Void> app_data;

  external ffi.Pointer<ffi.NativeFunction<ASN1_ex_new_func>> asn1_ex_new;

  external ffi.Pointer<ffi.NativeFunction<ASN1_ex_free_func>> asn1_ex_free;

  external ffi.Pointer<ffi.NativeFunction<ASN1_ex_free_func>> asn1_ex_clear;

  external ffi.Pointer<ffi.NativeFunction<ASN1_ex_d2i>> asn1_ex_d2i;

  external ffi.Pointer<ffi.NativeFunction<ASN1_ex_i2d>> asn1_ex_i2d;

  /// asn1_ex_print is unused.
  external ffi.Pointer<ffi.NativeFunction<ASN1_ex_print_func>> asn1_ex_print;
}

class ASN1_PRIMITIVE_FUNCS extends ffi.Struct {
  external ffi.Pointer<ffi.Void> app_data;

  @ffi.Uint64()
  external int flags;

  external ffi.Pointer<ffi.NativeFunction<ASN1_ex_new_func>> prim_new;

  external ffi.Pointer<ffi.NativeFunction<ASN1_ex_free_func>> prim_free;

  external ffi.Pointer<ffi.NativeFunction<ASN1_ex_free_func>> prim_clear;

  external ffi.Pointer<ffi.NativeFunction<ASN1_primitive_c2i>> prim_c2i;

  external ffi.Pointer<ffi.NativeFunction<ASN1_primitive_i2c>> prim_i2c;

  external ffi.Pointer<ffi.NativeFunction<ASN1_primitive_print>> prim_print;
}

class ASN1_AUX extends ffi.Struct {
  external ffi.Pointer<ffi.Void> app_data;

  @ffi.Int32()
  external int flags;

  /// Offset of reference value
  @ffi.Int32()
  external int ref_offset;

  external ffi.Pointer<ffi.NativeFunction<ASN1_aux_cb>> asn1_cb;

  /// Offset of ASN1_ENCODING structure
  @ffi.Int32()
  external int enc_offset;
}

/// For print related callbacks exarg points to this structure
class ASN1_PRINT_ARG extends ffi.Struct {
  external ffi.Pointer<bio_st> out;

  @ffi.Int32()
  external int indent;

  external ffi.Pointer<asn1_pctx_st> pctx;
}

/// For streaming related callbacks exarg points to this structure
class ASN1_STREAM_ARG extends ffi.Struct {
  /// BIO to stream through
  external ffi.Pointer<bio_st> out;

  /// BIO with filters appended
  external ffi.Pointer<bio_st> ndef_bio;

  /// Streaming I/O boundary
  external ffi.Pointer<ffi.Pointer<ffi.Uint8>> boundary;
}

class stack_st_ASN1_VALUE extends ffi.Opaque {}

class _Dart_Isolate extends ffi.Opaque {}

class _Dart_IsolateGroup extends ffi.Opaque {}

class _Dart_Handle extends ffi.Opaque {}

class _Dart_WeakPersistentHandle extends ffi.Opaque {}

class _Dart_FinalizableHandle extends ffi.Opaque {}

class Dart_IsolateFlags extends ffi.Struct {
  @ffi.Int32()
  external int version;

  @ffi.Uint8()
  external int enable_asserts;

  @ffi.Uint8()
  external int use_field_guards;

  @ffi.Uint8()
  external int use_osr;

  @ffi.Uint8()
  external int obfuscate;

  @ffi.Uint8()
  external int load_vmservice_library;

  @ffi.Uint8()
  external int copy_parent_code;

  @ffi.Uint8()
  external int null_safety;

  @ffi.Uint8()
  external int is_system_isolate;
}

/// Forward declaration
class Dart_CodeObserver extends ffi.Opaque {}

/// Describes how to initialize the VM. Used with Dart_Initialize.
///
/// \param version Identifies the version of the struct used by the client.
/// should be initialized to DART_INITIALIZE_PARAMS_CURRENT_VERSION.
/// \param vm_isolate_snapshot A buffer containing a snapshot of the VM isolate
/// or NULL if no snapshot is provided. If provided, the buffer must remain
/// valid until Dart_Cleanup returns.
/// \param instructions_snapshot A buffer containing a snapshot of precompiled
/// instructions, or NULL if no snapshot is provided. If provided, the buffer
/// must remain valid until Dart_Cleanup returns.
/// \param initialize_isolate A function to be called during isolate
/// initialization inside an existing isolate group.
/// See Dart_InitializeIsolateCallback.
/// \param create_group A function to be called during isolate group creation.
/// See Dart_IsolateGroupCreateCallback.
/// \param shutdown A function to be called right before an isolate is shutdown.
/// See Dart_IsolateShutdownCallback.
/// \param cleanup A function to be called after an isolate was shutdown.
/// See Dart_IsolateCleanupCallback.
/// \param cleanup_group A function to be called after an isolate group is shutdown.
/// See Dart_IsolateGroupCleanupCallback.
/// \param get_service_assets A function to be called by the service isolate when
/// it requires the vmservice assets archive.
/// See Dart_GetVMServiceAssetsArchive.
/// \param code_observer An external code observer callback function.
/// The observer can be invoked as early as during the Dart_Initialize() call.
class Dart_InitializeParams extends ffi.Struct {
  @ffi.Int32()
  external int version;

  external ffi.Pointer<ffi.Uint8> vm_snapshot_data;

  external ffi.Pointer<ffi.Uint8> vm_snapshot_instructions;

  external ffi.Pointer<ffi.NativeFunction<Dart_IsolateGroupCreateCallback>>
      create_group;

  external ffi.Pointer<ffi.NativeFunction<Dart_InitializeIsolateCallback>>
      initialize_isolate;

  external ffi.Pointer<ffi.NativeFunction<Dart_IsolateShutdownCallback>>
      shutdown_isolate;

  external ffi.Pointer<ffi.NativeFunction<Dart_IsolateCleanupCallback>>
      cleanup_isolate;

  external ffi.Pointer<ffi.NativeFunction<Dart_IsolateGroupCleanupCallback>>
      cleanup_group;

  external ffi.Pointer<ffi.NativeFunction<Dart_ThreadExitCallback>> thread_exit;

  external ffi.Pointer<ffi.NativeFunction<Dart_FileOpenCallback>> file_open;

  external ffi.Pointer<ffi.NativeFunction<Dart_FileReadCallback>> file_read;

  external ffi.Pointer<ffi.NativeFunction<Dart_FileWriteCallback>> file_write;

  external ffi.Pointer<ffi.NativeFunction<Dart_FileCloseCallback>> file_close;

  external ffi.Pointer<ffi.NativeFunction<Dart_EntropySource>> entropy_source;

  external ffi.Pointer<ffi.NativeFunction<Dart_GetVMServiceAssetsArchive>>
      get_service_assets;

  @ffi.Uint8()
  external int start_kernel_isolate;

  external ffi.Pointer<Dart_CodeObserver> code_observer;
}

abstract class Dart_CoreType_Id {
  static const int Dart_CoreType_Dynamic = 0;
  static const int Dart_CoreType_Int = 1;
  static const int Dart_CoreType_String = 2;
}

/// ==========
/// Typed Data
/// ==========
abstract class Dart_TypedData_Type {
  static const int Dart_TypedData_kByteData = 0;
  static const int Dart_TypedData_kInt8 = 1;
  static const int Dart_TypedData_kUint8 = 2;
  static const int Dart_TypedData_kUint8Clamped = 3;
  static const int Dart_TypedData_kInt16 = 4;
  static const int Dart_TypedData_kUint16 = 5;
  static const int Dart_TypedData_kInt32 = 6;
  static const int Dart_TypedData_kUint32 = 7;
  static const int Dart_TypedData_kInt64 = 8;
  static const int Dart_TypedData_kUint64 = 9;
  static const int Dart_TypedData_kFloat32 = 10;
  static const int Dart_TypedData_kFloat64 = 11;
  static const int Dart_TypedData_kInt32x4 = 12;
  static const int Dart_TypedData_kFloat32x4 = 13;
  static const int Dart_TypedData_kFloat64x2 = 14;
  static const int Dart_TypedData_kInvalid = 15;
}

class _Dart_NativeArguments extends ffi.Opaque {}

abstract class Dart_NativeArgument_Type {
  static const int Dart_NativeArgument_kBool = 0;
  static const int Dart_NativeArgument_kInt32 = 1;
  static const int Dart_NativeArgument_kUint32 = 2;
  static const int Dart_NativeArgument_kInt64 = 3;
  static const int Dart_NativeArgument_kUint64 = 4;
  static const int Dart_NativeArgument_kDouble = 5;
  static const int Dart_NativeArgument_kString = 6;
  static const int Dart_NativeArgument_kInstance = 7;
  static const int Dart_NativeArgument_kNativeFields = 8;
}

class Dart_NativeArgument_Descriptor extends ffi.Struct {
  @ffi.Uint8()
  external int type;

  @ffi.Uint8()
  external int index;
}

/// =====================
/// Scripts and Libraries
/// =====================
abstract class Dart_LibraryTag {
  static const int Dart_kCanonicalizeUrl = 0;
  static const int Dart_kImportTag = 1;
  static const int Dart_kKernelTag = 2;
  static const int Dart_kImportExtensionTag = 3;
}

/// // TODO(33433): Remove kernel service from the embedding API.
abstract class Dart_KernelCompilationStatus {
  static const int Dart_KernelCompilationStatus_Unknown = -1;
  static const int Dart_KernelCompilationStatus_Ok = 0;
  static const int Dart_KernelCompilationStatus_Error = 1;
  static const int Dart_KernelCompilationStatus_Crash = 2;
}

class Dart_KernelCompilationResult extends ffi.Struct {
  @ffi.Int32()
  external int status;

  @ffi.Uint8()
  external int null_safety;

  external ffi.Pointer<ffi.Int8> error;

  external ffi.Pointer<ffi.Uint8> kernel;

  @ffi.IntPtr()
  external int kernel_size;
}

abstract class Dart_KernelCompilationVerbosityLevel {
  static const int Dart_KernelCompilationVerbosityLevel_Error = 0;
  static const int Dart_KernelCompilationVerbosityLevel_Warning = 1;
  static const int Dart_KernelCompilationVerbosityLevel_Info = 2;
  static const int Dart_KernelCompilationVerbosityLevel_All = 3;
}

class Dart_SourceFile extends ffi.Struct {
  external ffi.Pointer<ffi.Int8> uri;

  external ffi.Pointer<ffi.Int8> source;
}

/// A Dart_CObject is used for representing Dart objects as native C
/// data outside the Dart heap. These objects are totally detached from
/// the Dart heap. Only a subset of the Dart objects have a
/// representation as a Dart_CObject.
///
/// The string encoding in the 'value.as_string' is UTF-8.
///
/// All the different types from dart:typed_data are exposed as type
/// kTypedData. The specific type from dart:typed_data is in the type
/// field of the as_typed_data structure. The length in the
/// as_typed_data structure is always in bytes.
///
/// The data for kTypedData is copied on message send and ownership remains with
/// the caller. The ownership of data for kExternalTyped is passed to the VM on
/// message send and returned when the VM invokes the
/// Dart_HandleFinalizer callback; a non-NULL callback must be provided.
abstract class Dart_CObject_Type {
  static const int Dart_CObject_kNull = 0;
  static const int Dart_CObject_kBool = 1;
  static const int Dart_CObject_kInt32 = 2;
  static const int Dart_CObject_kInt64 = 3;
  static const int Dart_CObject_kDouble = 4;
  static const int Dart_CObject_kString = 5;
  static const int Dart_CObject_kArray = 6;
  static const int Dart_CObject_kTypedData = 7;
  static const int Dart_CObject_kExternalTypedData = 8;
  static const int Dart_CObject_kSendPort = 9;
  static const int Dart_CObject_kCapability = 10;
  static const int Dart_CObject_kUnsupported = 11;
  static const int Dart_CObject_kNumberOfTypes = 12;
}

class Dart_CObject extends ffi.Opaque {}

const int ERR_LIB_NONE = 1;

const int ERR_LIB_SYS = 2;

const int ERR_LIB_BN = 3;

const int ERR_LIB_RSA = 4;

const int ERR_LIB_DH = 5;

const int ERR_LIB_EVP = 6;

const int ERR_LIB_BUF = 7;

const int ERR_LIB_OBJ = 8;

const int ERR_LIB_PEM = 9;

const int ERR_LIB_DSA = 10;

const int ERR_LIB_X509 = 11;

const int ERR_LIB_ASN1 = 12;

const int ERR_LIB_CONF = 13;

const int ERR_LIB_CRYPTO = 14;

const int ERR_LIB_EC = 15;

const int ERR_LIB_SSL = 16;

const int ERR_LIB_BIO = 17;

const int ERR_LIB_PKCS7 = 18;

const int ERR_LIB_PKCS8 = 19;

const int ERR_LIB_X509V3 = 20;

const int ERR_LIB_RAND = 21;

const int ERR_LIB_ENGINE = 22;

const int ERR_LIB_OCSP = 23;

const int ERR_LIB_UI = 24;

const int ERR_LIB_COMP = 25;

const int ERR_LIB_ECDSA = 26;

const int ERR_LIB_ECDH = 27;

const int ERR_LIB_HMAC = 28;

const int ERR_LIB_DIGEST = 29;

const int ERR_LIB_CIPHER = 30;

const int ERR_LIB_HKDF = 31;

const int ERR_LIB_TRUST_TOKEN = 32;

const int ERR_LIB_USER = 33;

const int ERR_NUM_LIBS = 34;

const int ERR_LIB_NONE_1 = 1;

const int ERR_LIB_SYS_1 = 2;

const int ERR_LIB_BN_1 = 3;

const int ERR_LIB_RSA_1 = 4;

const int ERR_LIB_DH_1 = 5;

const int ERR_LIB_EVP_1 = 6;

const int ERR_LIB_BUF_1 = 7;

const int ERR_LIB_OBJ_1 = 8;

const int ERR_LIB_PEM_1 = 9;

const int ERR_LIB_DSA_1 = 10;

const int ERR_LIB_X509_1 = 11;

const int ERR_LIB_ASN1_1 = 12;

const int ERR_LIB_CONF_1 = 13;

const int ERR_LIB_CRYPTO_1 = 14;

const int ERR_LIB_EC_1 = 15;

const int ERR_LIB_SSL_1 = 16;

const int ERR_LIB_BIO_1 = 17;

const int ERR_LIB_PKCS7_1 = 18;

const int ERR_LIB_PKCS8_1 = 19;

const int ERR_LIB_X509V3_1 = 20;

const int ERR_LIB_RAND_1 = 21;

const int ERR_LIB_ENGINE_1 = 22;

const int ERR_LIB_OCSP_1 = 23;

const int ERR_LIB_UI_1 = 24;

const int ERR_LIB_COMP_1 = 25;

const int ERR_LIB_ECDSA_1 = 26;

const int ERR_LIB_ECDH_1 = 27;

const int ERR_LIB_HMAC_1 = 28;

const int ERR_LIB_DIGEST_1 = 29;

const int ERR_LIB_CIPHER_1 = 30;

const int ERR_LIB_HKDF_1 = 31;

const int ERR_LIB_TRUST_TOKEN_1 = 32;

const int ERR_LIB_USER_1 = 33;

const int ERR_NUM_LIBS_1 = 34;

const int ERR_LIB_NONE_2 = 1;

const int ERR_LIB_SYS_2 = 2;

const int ERR_LIB_BN_2 = 3;

const int ERR_LIB_RSA_2 = 4;

const int ERR_LIB_DH_2 = 5;

const int ERR_LIB_EVP_2 = 6;

const int ERR_LIB_BUF_2 = 7;

const int ERR_LIB_OBJ_2 = 8;

const int ERR_LIB_PEM_2 = 9;

const int ERR_LIB_DSA_2 = 10;

const int ERR_LIB_X509_2 = 11;

const int ERR_LIB_ASN1_2 = 12;

const int ERR_LIB_CONF_2 = 13;

const int ERR_LIB_CRYPTO_2 = 14;

const int ERR_LIB_EC_2 = 15;

const int ERR_LIB_SSL_2 = 16;

const int ERR_LIB_BIO_2 = 17;

const int ERR_LIB_PKCS7_2 = 18;

const int ERR_LIB_PKCS8_2 = 19;

const int ERR_LIB_X509V3_2 = 20;

const int ERR_LIB_RAND_2 = 21;

const int ERR_LIB_ENGINE_2 = 22;

const int ERR_LIB_OCSP_2 = 23;

const int ERR_LIB_UI_2 = 24;

const int ERR_LIB_COMP_2 = 25;

const int ERR_LIB_ECDSA_2 = 26;

const int ERR_LIB_ECDH_2 = 27;

const int ERR_LIB_HMAC_2 = 28;

const int ERR_LIB_DIGEST_2 = 29;

const int ERR_LIB_CIPHER_2 = 30;

const int ERR_LIB_HKDF_2 = 31;

const int ERR_LIB_TRUST_TOKEN_2 = 32;

const int ERR_LIB_USER_2 = 33;

const int ERR_NUM_LIBS_2 = 34;

const int ERR_LIB_NONE_3 = 1;

const int ERR_LIB_SYS_3 = 2;

const int ERR_LIB_BN_3 = 3;

const int ERR_LIB_RSA_3 = 4;

const int ERR_LIB_DH_3 = 5;

const int ERR_LIB_EVP_3 = 6;

const int ERR_LIB_BUF_3 = 7;

const int ERR_LIB_OBJ_3 = 8;

const int ERR_LIB_PEM_3 = 9;

const int ERR_LIB_DSA_3 = 10;

const int ERR_LIB_X509_3 = 11;

const int ERR_LIB_ASN1_3 = 12;

const int ERR_LIB_CONF_3 = 13;

const int ERR_LIB_CRYPTO_3 = 14;

const int ERR_LIB_EC_3 = 15;

const int ERR_LIB_SSL_3 = 16;

const int ERR_LIB_BIO_3 = 17;

const int ERR_LIB_PKCS7_3 = 18;

const int ERR_LIB_PKCS8_3 = 19;

const int ERR_LIB_X509V3_3 = 20;

const int ERR_LIB_RAND_3 = 21;

const int ERR_LIB_ENGINE_3 = 22;

const int ERR_LIB_OCSP_3 = 23;

const int ERR_LIB_UI_3 = 24;

const int ERR_LIB_COMP_3 = 25;

const int ERR_LIB_ECDSA_3 = 26;

const int ERR_LIB_ECDH_3 = 27;

const int ERR_LIB_HMAC_3 = 28;

const int ERR_LIB_DIGEST_3 = 29;

const int ERR_LIB_CIPHER_3 = 30;

const int ERR_LIB_HKDF_3 = 31;

const int ERR_LIB_TRUST_TOKEN_3 = 32;

const int ERR_LIB_USER_3 = 33;

const int ERR_NUM_LIBS_3 = 34;

const int ERR_LIB_NONE_4 = 1;

const int ERR_LIB_SYS_4 = 2;

const int ERR_LIB_BN_4 = 3;

const int ERR_LIB_RSA_4 = 4;

const int ERR_LIB_DH_4 = 5;

const int ERR_LIB_EVP_4 = 6;

const int ERR_LIB_BUF_4 = 7;

const int ERR_LIB_OBJ_4 = 8;

const int ERR_LIB_PEM_4 = 9;

const int ERR_LIB_DSA_4 = 10;

const int ERR_LIB_X509_4 = 11;

const int ERR_LIB_ASN1_4 = 12;

const int ERR_LIB_CONF_4 = 13;

const int ERR_LIB_CRYPTO_4 = 14;

const int ERR_LIB_EC_4 = 15;

const int ERR_LIB_SSL_4 = 16;

const int ERR_LIB_BIO_4 = 17;

const int ERR_LIB_PKCS7_4 = 18;

const int ERR_LIB_PKCS8_4 = 19;

const int ERR_LIB_X509V3_4 = 20;

const int ERR_LIB_RAND_4 = 21;

const int ERR_LIB_ENGINE_4 = 22;

const int ERR_LIB_OCSP_4 = 23;

const int ERR_LIB_UI_4 = 24;

const int ERR_LIB_COMP_4 = 25;

const int ERR_LIB_ECDSA_4 = 26;

const int ERR_LIB_ECDH_4 = 27;

const int ERR_LIB_HMAC_4 = 28;

const int ERR_LIB_DIGEST_4 = 29;

const int ERR_LIB_CIPHER_4 = 30;

const int ERR_LIB_HKDF_4 = 31;

const int ERR_LIB_TRUST_TOKEN_4 = 32;

const int ERR_LIB_USER_4 = 33;

const int ERR_NUM_LIBS_4 = 34;

const int ERR_LIB_NONE_5 = 1;

const int ERR_LIB_SYS_5 = 2;

const int ERR_LIB_BN_5 = 3;

const int ERR_LIB_RSA_5 = 4;

const int ERR_LIB_DH_5 = 5;

const int ERR_LIB_EVP_5 = 6;

const int ERR_LIB_BUF_5 = 7;

const int ERR_LIB_OBJ_5 = 8;

const int ERR_LIB_PEM_5 = 9;

const int ERR_LIB_DSA_5 = 10;

const int ERR_LIB_X509_5 = 11;

const int ERR_LIB_ASN1_5 = 12;

const int ERR_LIB_CONF_5 = 13;

const int ERR_LIB_CRYPTO_5 = 14;

const int ERR_LIB_EC_5 = 15;

const int ERR_LIB_SSL_5 = 16;

const int ERR_LIB_BIO_5 = 17;

const int ERR_LIB_PKCS7_5 = 18;

const int ERR_LIB_PKCS8_5 = 19;

const int ERR_LIB_X509V3_5 = 20;

const int ERR_LIB_RAND_5 = 21;

const int ERR_LIB_ENGINE_5 = 22;

const int ERR_LIB_OCSP_5 = 23;

const int ERR_LIB_UI_5 = 24;

const int ERR_LIB_COMP_5 = 25;

const int ERR_LIB_ECDSA_5 = 26;

const int ERR_LIB_ECDH_5 = 27;

const int ERR_LIB_HMAC_5 = 28;

const int ERR_LIB_DIGEST_5 = 29;

const int ERR_LIB_CIPHER_5 = 30;

const int ERR_LIB_HKDF_5 = 31;

const int ERR_LIB_TRUST_TOKEN_5 = 32;

const int ERR_LIB_USER_5 = 33;

const int ERR_NUM_LIBS_5 = 34;

const int ERR_LIB_NONE_6 = 1;

const int ERR_LIB_SYS_6 = 2;

const int ERR_LIB_BN_6 = 3;

const int ERR_LIB_RSA_6 = 4;

const int ERR_LIB_DH_6 = 5;

const int ERR_LIB_EVP_6 = 6;

const int ERR_LIB_BUF_6 = 7;

const int ERR_LIB_OBJ_6 = 8;

const int ERR_LIB_PEM_6 = 9;

const int ERR_LIB_DSA_6 = 10;

const int ERR_LIB_X509_6 = 11;

const int ERR_LIB_ASN1_6 = 12;

const int ERR_LIB_CONF_6 = 13;

const int ERR_LIB_CRYPTO_6 = 14;

const int ERR_LIB_EC_6 = 15;

const int ERR_LIB_SSL_6 = 16;

const int ERR_LIB_BIO_6 = 17;

const int ERR_LIB_PKCS7_6 = 18;

const int ERR_LIB_PKCS8_6 = 19;

const int ERR_LIB_X509V3_6 = 20;

const int ERR_LIB_RAND_6 = 21;

const int ERR_LIB_ENGINE_6 = 22;

const int ERR_LIB_OCSP_6 = 23;

const int ERR_LIB_UI_6 = 24;

const int ERR_LIB_COMP_6 = 25;

const int ERR_LIB_ECDSA_6 = 26;

const int ERR_LIB_ECDH_6 = 27;

const int ERR_LIB_HMAC_6 = 28;

const int ERR_LIB_DIGEST_6 = 29;

const int ERR_LIB_CIPHER_6 = 30;

const int ERR_LIB_HKDF_6 = 31;

const int ERR_LIB_TRUST_TOKEN_6 = 32;

const int ERR_LIB_USER_6 = 33;

const int ERR_NUM_LIBS_6 = 34;

const int ERR_LIB_NONE_7 = 1;

const int ERR_LIB_SYS_7 = 2;

const int ERR_LIB_BN_7 = 3;

const int ERR_LIB_RSA_7 = 4;

const int ERR_LIB_DH_7 = 5;

const int ERR_LIB_EVP_7 = 6;

const int ERR_LIB_BUF_7 = 7;

const int ERR_LIB_OBJ_7 = 8;

const int ERR_LIB_PEM_7 = 9;

const int ERR_LIB_DSA_7 = 10;

const int ERR_LIB_X509_7 = 11;

const int ERR_LIB_ASN1_7 = 12;

const int ERR_LIB_CONF_7 = 13;

const int ERR_LIB_CRYPTO_7 = 14;

const int ERR_LIB_EC_7 = 15;

const int ERR_LIB_SSL_7 = 16;

const int ERR_LIB_BIO_7 = 17;

const int ERR_LIB_PKCS7_7 = 18;

const int ERR_LIB_PKCS8_7 = 19;

const int ERR_LIB_X509V3_7 = 20;

const int ERR_LIB_RAND_7 = 21;

const int ERR_LIB_ENGINE_7 = 22;

const int ERR_LIB_OCSP_7 = 23;

const int ERR_LIB_UI_7 = 24;

const int ERR_LIB_COMP_7 = 25;

const int ERR_LIB_ECDSA_7 = 26;

const int ERR_LIB_ECDH_7 = 27;

const int ERR_LIB_HMAC_7 = 28;

const int ERR_LIB_DIGEST_7 = 29;

const int ERR_LIB_CIPHER_7 = 30;

const int ERR_LIB_HKDF_7 = 31;

const int ERR_LIB_TRUST_TOKEN_7 = 32;

const int ERR_LIB_USER_7 = 33;

const int ERR_NUM_LIBS_7 = 34;

const int ERR_LIB_NONE_8 = 1;

const int ERR_LIB_SYS_8 = 2;

const int ERR_LIB_BN_8 = 3;

const int ERR_LIB_RSA_8 = 4;

const int ERR_LIB_DH_8 = 5;

const int ERR_LIB_EVP_8 = 6;

const int ERR_LIB_BUF_8 = 7;

const int ERR_LIB_OBJ_8 = 8;

const int ERR_LIB_PEM_8 = 9;

const int ERR_LIB_DSA_8 = 10;

const int ERR_LIB_X509_8 = 11;

const int ERR_LIB_ASN1_8 = 12;

const int ERR_LIB_CONF_8 = 13;

const int ERR_LIB_CRYPTO_8 = 14;

const int ERR_LIB_EC_8 = 15;

const int ERR_LIB_SSL_8 = 16;

const int ERR_LIB_BIO_8 = 17;

const int ERR_LIB_PKCS7_8 = 18;

const int ERR_LIB_PKCS8_8 = 19;

const int ERR_LIB_X509V3_8 = 20;

const int ERR_LIB_RAND_8 = 21;

const int ERR_LIB_ENGINE_8 = 22;

const int ERR_LIB_OCSP_8 = 23;

const int ERR_LIB_UI_8 = 24;

const int ERR_LIB_COMP_8 = 25;

const int ERR_LIB_ECDSA_8 = 26;

const int ERR_LIB_ECDH_8 = 27;

const int ERR_LIB_HMAC_8 = 28;

const int ERR_LIB_DIGEST_8 = 29;

const int ERR_LIB_CIPHER_8 = 30;

const int ERR_LIB_HKDF_8 = 31;

const int ERR_LIB_TRUST_TOKEN_8 = 32;

const int ERR_LIB_USER_8 = 33;

const int ERR_NUM_LIBS_8 = 34;

const int ERR_LIB_NONE_9 = 1;

const int ERR_LIB_SYS_9 = 2;

const int ERR_LIB_BN_9 = 3;

const int ERR_LIB_RSA_9 = 4;

const int ERR_LIB_DH_9 = 5;

const int ERR_LIB_EVP_9 = 6;

const int ERR_LIB_BUF_9 = 7;

const int ERR_LIB_OBJ_9 = 8;

const int ERR_LIB_PEM_9 = 9;

const int ERR_LIB_DSA_9 = 10;

const int ERR_LIB_X509_9 = 11;

const int ERR_LIB_ASN1_9 = 12;

const int ERR_LIB_CONF_9 = 13;

const int ERR_LIB_CRYPTO_9 = 14;

const int ERR_LIB_EC_9 = 15;

const int ERR_LIB_SSL_9 = 16;

const int ERR_LIB_BIO_9 = 17;

const int ERR_LIB_PKCS7_9 = 18;

const int ERR_LIB_PKCS8_9 = 19;

const int ERR_LIB_X509V3_9 = 20;

const int ERR_LIB_RAND_9 = 21;

const int ERR_LIB_ENGINE_9 = 22;

const int ERR_LIB_OCSP_9 = 23;

const int ERR_LIB_UI_9 = 24;

const int ERR_LIB_COMP_9 = 25;

const int ERR_LIB_ECDSA_9 = 26;

const int ERR_LIB_ECDH_9 = 27;

const int ERR_LIB_HMAC_9 = 28;

const int ERR_LIB_DIGEST_9 = 29;

const int ERR_LIB_CIPHER_9 = 30;

const int ERR_LIB_HKDF_9 = 31;

const int ERR_LIB_TRUST_TOKEN_9 = 32;

const int ERR_LIB_USER_9 = 33;

const int ERR_NUM_LIBS_9 = 34;

const int ERR_LIB_NONE_10 = 1;

const int ERR_LIB_SYS_10 = 2;

const int ERR_LIB_BN_10 = 3;

const int ERR_LIB_RSA_10 = 4;

const int ERR_LIB_DH_10 = 5;

const int ERR_LIB_EVP_10 = 6;

const int ERR_LIB_BUF_10 = 7;

const int ERR_LIB_OBJ_10 = 8;

const int ERR_LIB_PEM_10 = 9;

const int ERR_LIB_DSA_10 = 10;

const int ERR_LIB_X509_10 = 11;

const int ERR_LIB_ASN1_10 = 12;

const int ERR_LIB_CONF_10 = 13;

const int ERR_LIB_CRYPTO_10 = 14;

const int ERR_LIB_EC_10 = 15;

const int ERR_LIB_SSL_10 = 16;

const int ERR_LIB_BIO_10 = 17;

const int ERR_LIB_PKCS7_10 = 18;

const int ERR_LIB_PKCS8_10 = 19;

const int ERR_LIB_X509V3_10 = 20;

const int ERR_LIB_RAND_10 = 21;

const int ERR_LIB_ENGINE_10 = 22;

const int ERR_LIB_OCSP_10 = 23;

const int ERR_LIB_UI_10 = 24;

const int ERR_LIB_COMP_10 = 25;

const int ERR_LIB_ECDSA_10 = 26;

const int ERR_LIB_ECDH_10 = 27;

const int ERR_LIB_HMAC_10 = 28;

const int ERR_LIB_DIGEST_10 = 29;

const int ERR_LIB_CIPHER_10 = 30;

const int ERR_LIB_HKDF_10 = 31;

const int ERR_LIB_TRUST_TOKEN_10 = 32;

const int ERR_LIB_USER_10 = 33;

const int ERR_NUM_LIBS_10 = 34;

const int kNativeArgNumberPos = 0;

const int kNativeArgNumberSize = 8;

const int kNativeArgTypePos = 8;

const int kNativeArgTypeSize = 8;

const int kNativeArgNumberPos_1 = 0;

const int kNativeArgNumberSize_1 = 8;

const int kNativeArgTypePos_1 = 8;

const int kNativeArgTypeSize_1 = 8;

const int ERR_LIB_NONE_11 = 1;

const int ERR_LIB_SYS_11 = 2;

const int ERR_LIB_BN_11 = 3;

const int ERR_LIB_RSA_11 = 4;

const int ERR_LIB_DH_11 = 5;

const int ERR_LIB_EVP_11 = 6;

const int ERR_LIB_BUF_11 = 7;

const int ERR_LIB_OBJ_11 = 8;

const int ERR_LIB_PEM_11 = 9;

const int ERR_LIB_DSA_11 = 10;

const int ERR_LIB_X509_11 = 11;

const int ERR_LIB_ASN1_11 = 12;

const int ERR_LIB_CONF_11 = 13;

const int ERR_LIB_CRYPTO_11 = 14;

const int ERR_LIB_EC_11 = 15;

const int ERR_LIB_SSL_11 = 16;

const int ERR_LIB_BIO_11 = 17;

const int ERR_LIB_PKCS7_11 = 18;

const int ERR_LIB_PKCS8_11 = 19;

const int ERR_LIB_X509V3_11 = 20;

const int ERR_LIB_RAND_11 = 21;

const int ERR_LIB_ENGINE_11 = 22;

const int ERR_LIB_OCSP_11 = 23;

const int ERR_LIB_UI_11 = 24;

const int ERR_LIB_COMP_11 = 25;

const int ERR_LIB_ECDSA_11 = 26;

const int ERR_LIB_ECDH_11 = 27;

const int ERR_LIB_HMAC_11 = 28;

const int ERR_LIB_DIGEST_11 = 29;

const int ERR_LIB_CIPHER_11 = 30;

const int ERR_LIB_HKDF_11 = 31;

const int ERR_LIB_TRUST_TOKEN_11 = 32;

const int ERR_LIB_USER_11 = 33;

const int ERR_NUM_LIBS_11 = 34;

const int NULL = 0;

const int __WORDSIZE = 64;

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int USER_ADDR_NULL = 0;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101600;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int NBBY = 8;

const int NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int DYNAMIC_TARGETS_ENABLED = 0;

const int TARGET_OS_MAC = 1;

const int TARGET_OS_WIN32 = 0;

const int TARGET_OS_UNIX = 0;

const int TARGET_OS_OSX = 1;

const int TARGET_OS_IPHONE = 0;

const int TARGET_OS_IOS = 0;

const int TARGET_OS_WATCH = 0;

const int TARGET_OS_TV = 0;

const int TARGET_OS_MACCATALYST = 0;

const int TARGET_OS_UIKITFORMAC = 0;

const int TARGET_OS_SIMULATOR = 0;

const int TARGET_OS_EMBEDDED = 0;

const int TARGET_OS_RTKIT = 0;

const int TARGET_OS_DRIVERKIT = 0;

const int TARGET_IPHONE_SIMULATOR = 0;

const int TARGET_OS_NANO = 0;

const int TARGET_ABI_USES_IOS_VALUES = 0;

const int TARGET_CPU_PPC = 0;

const int TARGET_CPU_PPC64 = 0;

const int TARGET_CPU_68K = 0;

const int TARGET_CPU_X86 = 0;

const int TARGET_CPU_X86_64 = 1;

const int TARGET_CPU_ARM = 0;

const int TARGET_CPU_ARM64 = 0;

const int TARGET_CPU_MIPS = 0;

const int TARGET_CPU_SPARC = 0;

const int TARGET_CPU_ALPHA = 0;

const int TARGET_RT_MAC_CFM = 0;

const int TARGET_RT_MAC_MACHO = 1;

const int TARGET_RT_LITTLE_ENDIAN = 1;

const int TARGET_RT_BIG_ENDIAN = 0;

const int TARGET_RT_64_BIT = 1;

const int OPENSSL_VERSION_NUMBER = 269484159;

const int SSLEAY_VERSION_NUMBER = 269484159;

const int BORINGSSL_API_VERSION = 10;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int RENAME_SECLUDE = 1;

const int RENAME_SWAP = 2;

const int RENAME_EXCL = 4;

const int __SLBF = 1;

const int __SNBF = 2;

const int __SRD = 4;

const int __SWR = 8;

const int __SRW = 16;

const int __SEOF = 32;

const int __SERR = 64;

const int __SMBF = 128;

const int __SAPP = 256;

const int __SSTR = 512;

const int __SOPT = 1024;

const int __SNPT = 2048;

const int __SOFF = 4096;

const int __SMOD = 8192;

const int __SALC = 16384;

const int __SIGN = 32768;

const int _IOFBF = 0;

const int _IOLBF = 1;

const int _IONBF = 2;

const int BUFSIZ = 1024;

const int EOF = -1;

const int FOPEN_MAX = 20;

const int FILENAME_MAX = 1024;

const String P_tmpdir = '/var/tmp/';

const int L_tmpnam = 1024;

const int TMP_MAX = 308915776;

const int SEEK_SET = 0;

const int SEEK_CUR = 1;

const int SEEK_END = 2;

const int L_ctermid = 1024;

const int ERR_FLAG_STRING = 1;

const int ERR_R_SYS_LIB = 2;

const int ERR_R_BN_LIB = 3;

const int ERR_R_RSA_LIB = 4;

const int ERR_R_DH_LIB = 5;

const int ERR_R_EVP_LIB = 6;

const int ERR_R_BUF_LIB = 7;

const int ERR_R_OBJ_LIB = 8;

const int ERR_R_PEM_LIB = 9;

const int ERR_R_DSA_LIB = 10;

const int ERR_R_X509_LIB = 11;

const int ERR_R_ASN1_LIB = 12;

const int ERR_R_CONF_LIB = 13;

const int ERR_R_CRYPTO_LIB = 14;

const int ERR_R_EC_LIB = 15;

const int ERR_R_SSL_LIB = 16;

const int ERR_R_BIO_LIB = 17;

const int ERR_R_PKCS7_LIB = 18;

const int ERR_R_PKCS8_LIB = 19;

const int ERR_R_X509V3_LIB = 20;

const int ERR_R_RAND_LIB = 21;

const int ERR_R_ENGINE_LIB = 22;

const int ERR_R_OCSP_LIB = 23;

const int ERR_R_UI_LIB = 24;

const int ERR_R_COMP_LIB = 25;

const int ERR_R_ECDSA_LIB = 26;

const int ERR_R_ECDH_LIB = 27;

const int ERR_R_HMAC_LIB = 28;

const int ERR_R_USER_LIB = 33;

const int ERR_R_DIGEST_LIB = 29;

const int ERR_R_CIPHER_LIB = 30;

const int ERR_R_HKDF_LIB = 31;

const int ERR_R_TRUST_TOKEN_LIB = 32;

const int ERR_R_FATAL = 64;

const int ERR_R_MALLOC_FAILURE = 65;

const int ERR_R_SHOULD_NOT_HAVE_BEEN_CALLED = 66;

const int ERR_R_PASSED_NULL_PARAMETER = 67;

const int ERR_R_INTERNAL_ERROR = 68;

const int ERR_R_OVERFLOW = 69;

const int ERR_ERROR_STRING_BUF_LEN = 120;

const int ERR_TXT_STRING = 1;

const int ERR_NUM_ERRORS = 16;

const int CRYPTO_LOCK = 1;

const int CRYPTO_UNLOCK = 2;

const int CRYPTO_READ = 4;

const int CRYPTO_WRITE = 8;

const int BIO_RR_CONNECT = 2;

const int BIO_RR_ACCEPT = 3;

const int BIO_CB_FREE = 1;

const int BIO_CB_READ = 2;

const int BIO_CB_WRITE = 3;

const int BIO_CB_PUTS = 4;

const int BIO_CB_GETS = 5;

const int BIO_CB_CTRL = 6;

const int BIO_CB_RETURN = 128;

const int BIO_NOCLOSE = 0;

const int BIO_CLOSE = 1;

const int BIO_CTRL_DGRAM_QUERY_MTU = 40;

const int BIO_CTRL_DGRAM_SET_MTU = 42;

const int BIO_CTRL_DGRAM_MTU_EXCEEDED = 43;

const int BIO_CTRL_DGRAM_GET_PEER = 46;

const int BIO_CTRL_DGRAM_GET_FALLBACK_MTU = 47;

const int BIO_CTRL_RESET = 1;

const int BIO_CTRL_EOF = 2;

const int BIO_CTRL_INFO = 3;

const int BIO_CTRL_GET_CLOSE = 8;

const int BIO_CTRL_SET_CLOSE = 9;

const int BIO_CTRL_PENDING = 10;

const int BIO_CTRL_FLUSH = 11;

const int BIO_CTRL_WPENDING = 13;

const int BIO_CTRL_SET_CALLBACK = 14;

const int BIO_CTRL_GET_CALLBACK = 15;

const int BIO_CTRL_SET = 4;

const int BIO_CTRL_GET = 5;

const int BIO_CTRL_PUSH = 6;

const int BIO_CTRL_POP = 7;

const int BIO_CTRL_DUP = 12;

const int BIO_CTRL_SET_FILENAME = 30;

const int BIO_FLAGS_READ = 1;

const int BIO_FLAGS_WRITE = 2;

const int BIO_FLAGS_IO_SPECIAL = 4;

const int BIO_FLAGS_RWS = 7;

const int BIO_FLAGS_SHOULD_RETRY = 8;

const int BIO_FLAGS_BASE64_NO_NL = 256;

const int BIO_FLAGS_MEM_RDONLY = 512;

const int BIO_TYPE_NONE = 0;

const int BIO_TYPE_MEM = 1025;

const int BIO_TYPE_FILE = 1026;

const int BIO_TYPE_FD = 1284;

const int BIO_TYPE_SOCKET = 1285;

const int BIO_TYPE_NULL = 1030;

const int BIO_TYPE_SSL = 519;

const int BIO_TYPE_MD = 520;

const int BIO_TYPE_BUFFER = 521;

const int BIO_TYPE_CIPHER = 522;

const int BIO_TYPE_BASE64 = 523;

const int BIO_TYPE_CONNECT = 1292;

const int BIO_TYPE_ACCEPT = 1293;

const int BIO_TYPE_PROXY_CLIENT = 526;

const int BIO_TYPE_PROXY_SERVER = 527;

const int BIO_TYPE_NBIO_TEST = 528;

const int BIO_TYPE_NULL_FILTER = 529;

const int BIO_TYPE_BER = 530;

const int BIO_TYPE_BIO = 1043;

const int BIO_TYPE_LINEBUFFER = 532;

const int BIO_TYPE_DGRAM = 1301;

const int BIO_TYPE_ASN1 = 534;

const int BIO_TYPE_COMP = 535;

const int BIO_TYPE_DESCRIPTOR = 256;

const int BIO_TYPE_FILTER = 512;

const int BIO_TYPE_SOURCE_SINK = 1024;

const int BIO_TYPE_START = 128;

const int BIO_C_SET_CONNECT = 100;

const int BIO_C_DO_STATE_MACHINE = 101;

const int BIO_C_SET_NBIO = 102;

const int BIO_C_SET_PROXY_PARAM = 103;

const int BIO_C_SET_FD = 104;

const int BIO_C_GET_FD = 105;

const int BIO_C_SET_FILE_PTR = 106;

const int BIO_C_GET_FILE_PTR = 107;

const int BIO_C_SET_FILENAME = 108;

const int BIO_C_SET_SSL = 109;

const int BIO_C_GET_SSL = 110;

const int BIO_C_SET_MD = 111;

const int BIO_C_GET_MD = 112;

const int BIO_C_GET_CIPHER_STATUS = 113;

const int BIO_C_SET_BUF_MEM = 114;

const int BIO_C_GET_BUF_MEM_PTR = 115;

const int BIO_C_GET_BUFF_NUM_LINES = 116;

const int BIO_C_SET_BUFF_SIZE = 117;

const int BIO_C_SET_ACCEPT = 118;

const int BIO_C_SSL_MODE = 119;

const int BIO_C_GET_MD_CTX = 120;

const int BIO_C_GET_PROXY_PARAM = 121;

const int BIO_C_SET_BUFF_READ_DATA = 122;

const int BIO_C_GET_ACCEPT = 124;

const int BIO_C_SET_SSL_RENEGOTIATE_BYTES = 125;

const int BIO_C_GET_SSL_NUM_RENEGOTIATES = 126;

const int BIO_C_SET_SSL_RENEGOTIATE_TIMEOUT = 127;

const int BIO_C_FILE_SEEK = 128;

const int BIO_C_GET_CIPHER_CTX = 129;

const int BIO_C_SET_BUF_MEM_EOF_RETURN = 130;

const int BIO_C_SET_BIND_MODE = 131;

const int BIO_C_GET_BIND_MODE = 132;

const int BIO_C_FILE_TELL = 133;

const int BIO_C_GET_SOCKS = 134;

const int BIO_C_SET_SOCKS = 135;

const int BIO_C_SET_WRITE_BUF_SIZE = 136;

const int BIO_C_GET_WRITE_BUF_SIZE = 137;

const int BIO_C_GET_WRITE_GUARANTEE = 140;

const int BIO_C_GET_READ_REQUEST = 141;

const int BIO_C_SHUTDOWN_WR = 142;

const int BIO_C_NREAD0 = 143;

const int BIO_C_NREAD = 144;

const int BIO_C_NWRITE0 = 145;

const int BIO_C_NWRITE = 146;

const int BIO_C_RESET_READ_REQUEST = 147;

const int BIO_C_SET_MD_CTX = 148;

const int BIO_C_SET_PREFIX = 149;

const int BIO_C_GET_PREFIX = 150;

const int BIO_C_SET_SUFFIX = 151;

const int BIO_C_GET_SUFFIX = 152;

const int BIO_C_SET_EX_ARG = 153;

const int BIO_C_GET_EX_ARG = 154;

const int BIO_R_BAD_FOPEN_MODE = 100;

const int BIO_R_BROKEN_PIPE = 101;

const int BIO_R_CONNECT_ERROR = 102;

const int BIO_R_ERROR_SETTING_NBIO = 103;

const int BIO_R_INVALID_ARGUMENT = 104;

const int BIO_R_IN_USE = 105;

const int BIO_R_KEEPALIVE = 106;

const int BIO_R_NBIO_CONNECT_ERROR = 107;

const int BIO_R_NO_HOSTNAME_SPECIFIED = 108;

const int BIO_R_NO_PORT_SPECIFIED = 109;

const int BIO_R_NO_SUCH_FILE = 110;

const int BIO_R_NULL_PARAMETER = 111;

const int BIO_R_SYS_LIB = 112;

const int BIO_R_UNABLE_TO_CREATE_SOCKET = 113;

const int BIO_R_UNINITIALIZED = 114;

const int BIO_R_UNSUPPORTED_METHOD = 115;

const int BIO_R_WRITE_TO_READ_ONLY_BIO = 116;

const int EVP_CIPH_STREAM_CIPHER = 0;

const int EVP_CIPH_ECB_MODE = 1;

const int EVP_CIPH_CBC_MODE = 2;

const int EVP_CIPH_CFB_MODE = 3;

const int EVP_CIPH_OFB_MODE = 4;

const int EVP_CIPH_CTR_MODE = 5;

const int EVP_CIPH_GCM_MODE = 6;

const int EVP_CIPH_XTS_MODE = 7;

const int EVP_CIPH_VARIABLE_LENGTH = 64;

const int EVP_CIPH_ALWAYS_CALL_INIT = 128;

const int EVP_CIPH_CUSTOM_IV = 256;

const int EVP_CIPH_CTRL_INIT = 512;

const int EVP_CIPH_FLAG_CUSTOM_CIPHER = 1024;

const int EVP_CIPH_FLAG_AEAD_CIPHER = 2048;

const int EVP_CIPH_CUSTOM_COPY = 4096;

const int EVP_CIPH_CCM_MODE = -1;

const int EVP_CIPH_OCB_MODE = -2;

const int EVP_CIPH_WRAP_MODE = -3;

const int EVP_CIPHER_CTX_FLAG_WRAP_ALLOW = 0;

const int EVP_CIPH_NO_PADDING = 2048;

const int EVP_CTRL_INIT = 0;

const int EVP_CTRL_SET_KEY_LENGTH = 1;

const int EVP_CTRL_GET_RC2_KEY_BITS = 2;

const int EVP_CTRL_SET_RC2_KEY_BITS = 3;

const int EVP_CTRL_GET_RC5_ROUNDS = 4;

const int EVP_CTRL_SET_RC5_ROUNDS = 5;

const int EVP_CTRL_RAND_KEY = 6;

const int EVP_CTRL_PBE_PRF_NID = 7;

const int EVP_CTRL_COPY = 8;

const int EVP_CTRL_AEAD_SET_IVLEN = 9;

const int EVP_CTRL_AEAD_GET_TAG = 16;

const int EVP_CTRL_AEAD_SET_TAG = 17;

const int EVP_CTRL_AEAD_SET_IV_FIXED = 18;

const int EVP_CTRL_GCM_IV_GEN = 19;

const int EVP_CTRL_AEAD_SET_MAC_KEY = 23;

const int EVP_CTRL_GCM_SET_IV_INV = 24;

const int EVP_GCM_TLS_FIXED_IV_LEN = 4;

const int EVP_GCM_TLS_EXPLICIT_IV_LEN = 8;

const int EVP_GCM_TLS_TAG_LEN = 16;

const int EVP_CTRL_GCM_SET_IVLEN = 9;

const int EVP_CTRL_GCM_GET_TAG = 16;

const int EVP_CTRL_GCM_SET_TAG = 17;

const int EVP_CTRL_GCM_SET_IV_FIXED = 18;

const int EVP_MAX_KEY_LENGTH = 64;

const int EVP_MAX_IV_LENGTH = 16;

const int EVP_MAX_BLOCK_LENGTH = 32;

const int CIPHER_R_AES_KEY_SETUP_FAILED = 100;

const int CIPHER_R_BAD_DECRYPT = 101;

const int CIPHER_R_BAD_KEY_LENGTH = 102;

const int CIPHER_R_BUFFER_TOO_SMALL = 103;

const int CIPHER_R_CTRL_NOT_IMPLEMENTED = 104;

const int CIPHER_R_CTRL_OPERATION_NOT_IMPLEMENTED = 105;

const int CIPHER_R_DATA_NOT_MULTIPLE_OF_BLOCK_LENGTH = 106;

const int CIPHER_R_INITIALIZATION_ERROR = 107;

const int CIPHER_R_INPUT_NOT_INITIALIZED = 108;

const int CIPHER_R_INVALID_AD_SIZE = 109;

const int CIPHER_R_INVALID_KEY_LENGTH = 110;

const int CIPHER_R_INVALID_NONCE_SIZE = 111;

const int CIPHER_R_INVALID_OPERATION = 112;

const int CIPHER_R_IV_TOO_LARGE = 113;

const int CIPHER_R_NO_CIPHER_SET = 114;

const int CIPHER_R_OUTPUT_ALIASES_INPUT = 115;

const int CIPHER_R_TAG_TOO_LARGE = 116;

const int CIPHER_R_TOO_LARGE = 117;

const int CIPHER_R_UNSUPPORTED_AD_SIZE = 118;

const int CIPHER_R_UNSUPPORTED_INPUT_SIZE = 119;

const int CIPHER_R_UNSUPPORTED_KEY_SIZE = 120;

const int CIPHER_R_UNSUPPORTED_NONCE_SIZE = 121;

const int CIPHER_R_UNSUPPORTED_TAG_SIZE = 122;

const int CIPHER_R_WRONG_FINAL_BLOCK_LENGTH = 123;

const int CIPHER_R_NO_DIRECTION_SET = 124;

const int CIPHER_R_INVALID_NONCE = 125;

const int EVP_MAX_MD_SIZE = 64;

const int EVP_MAX_MD_BLOCK_SIZE = 128;

const int EVP_MD_FLAG_PKEY_DIGEST = 1;

const int EVP_MD_FLAG_DIGALGID_ABSENT = 2;

const int EVP_MD_FLAG_XOF = 4;

const int DIGEST_R_INPUT_NOT_INITIALIZED = 100;

const int DIGEST_R_DECODE_ERROR = 101;

const int DIGEST_R_UNKNOWN_HASH = 102;

const int EVP_AEAD_MAX_KEY_LENGTH = 80;

const int EVP_AEAD_MAX_NONCE_LENGTH = 24;

const int EVP_AEAD_MAX_OVERHEAD = 64;

const int EVP_AEAD_DEFAULT_TAG_LENGTH = 0;

const String SN_undef = 'UNDEF';

const String LN_undef = 'undefined';

const int NID_undef = 0;

const int OBJ_undef = 0;

const String SN_rsadsi = 'rsadsi';

const String LN_rsadsi = 'RSA Data Security, Inc.';

const int NID_rsadsi = 1;

const int OBJ_rsadsi = 1;

const String SN_pkcs = 'pkcs';

const String LN_pkcs = 'RSA Data Security, Inc. PKCS';

const int NID_pkcs = 2;

const int OBJ_pkcs = 1;

const String SN_md2 = 'MD2';

const String LN_md2 = 'md2';

const int NID_md2 = 3;

const int OBJ_md2 = 1;

const String SN_md5 = 'MD5';

const String LN_md5 = 'md5';

const int NID_md5 = 4;

const int OBJ_md5 = 1;

const String SN_rc4 = 'RC4';

const String LN_rc4 = 'rc4';

const int NID_rc4 = 5;

const int OBJ_rc4 = 1;

const String LN_rsaEncryption = 'rsaEncryption';

const int NID_rsaEncryption = 6;

const int OBJ_rsaEncryption = 1;

const String SN_md2WithRSAEncryption = 'RSA-MD2';

const String LN_md2WithRSAEncryption = 'md2WithRSAEncryption';

const int NID_md2WithRSAEncryption = 7;

const int OBJ_md2WithRSAEncryption = 1;

const String SN_md5WithRSAEncryption = 'RSA-MD5';

const String LN_md5WithRSAEncryption = 'md5WithRSAEncryption';

const int NID_md5WithRSAEncryption = 8;

const int OBJ_md5WithRSAEncryption = 1;

const String SN_pbeWithMD2AndDES_CBC = 'PBE-MD2-DES';

const String LN_pbeWithMD2AndDES_CBC = 'pbeWithMD2AndDES-CBC';

const int NID_pbeWithMD2AndDES_CBC = 9;

const int OBJ_pbeWithMD2AndDES_CBC = 1;

const String SN_pbeWithMD5AndDES_CBC = 'PBE-MD5-DES';

const String LN_pbeWithMD5AndDES_CBC = 'pbeWithMD5AndDES-CBC';

const int NID_pbeWithMD5AndDES_CBC = 10;

const int OBJ_pbeWithMD5AndDES_CBC = 1;

const String SN_X500 = 'X500';

const String LN_X500 = 'directory services (X.500)';

const int NID_X500 = 11;

const int OBJ_X500 = 2;

const String SN_X509 = 'X509';

const int NID_X509 = 12;

const int OBJ_X509 = 2;

const String SN_commonName = 'CN';

const String LN_commonName = 'commonName';

const int NID_commonName = 13;

const int OBJ_commonName = 2;

const String SN_countryName = 'C';

const String LN_countryName = 'countryName';

const int NID_countryName = 14;

const int OBJ_countryName = 2;

const String SN_localityName = 'L';

const String LN_localityName = 'localityName';

const int NID_localityName = 15;

const int OBJ_localityName = 2;

const String SN_stateOrProvinceName = 'ST';

const String LN_stateOrProvinceName = 'stateOrProvinceName';

const int NID_stateOrProvinceName = 16;

const int OBJ_stateOrProvinceName = 2;

const String SN_organizationName = 'O';

const String LN_organizationName = 'organizationName';

const int NID_organizationName = 17;

const int OBJ_organizationName = 2;

const String SN_organizationalUnitName = 'OU';

const String LN_organizationalUnitName = 'organizationalUnitName';

const int NID_organizationalUnitName = 18;

const int OBJ_organizationalUnitName = 2;

const String SN_rsa = 'RSA';

const String LN_rsa = 'rsa';

const int NID_rsa = 19;

const int OBJ_rsa = 2;

const String SN_pkcs7 = 'pkcs7';

const int NID_pkcs7 = 20;

const int OBJ_pkcs7 = 1;

const String LN_pkcs7_data = 'pkcs7-data';

const int NID_pkcs7_data = 21;

const int OBJ_pkcs7_data = 1;

const String LN_pkcs7_signed = 'pkcs7-signedData';

const int NID_pkcs7_signed = 22;

const int OBJ_pkcs7_signed = 1;

const String LN_pkcs7_enveloped = 'pkcs7-envelopedData';

const int NID_pkcs7_enveloped = 23;

const int OBJ_pkcs7_enveloped = 1;

const String LN_pkcs7_signedAndEnveloped = 'pkcs7-signedAndEnvelopedData';

const int NID_pkcs7_signedAndEnveloped = 24;

const int OBJ_pkcs7_signedAndEnveloped = 1;

const String LN_pkcs7_digest = 'pkcs7-digestData';

const int NID_pkcs7_digest = 25;

const int OBJ_pkcs7_digest = 1;

const String LN_pkcs7_encrypted = 'pkcs7-encryptedData';

const int NID_pkcs7_encrypted = 26;

const int OBJ_pkcs7_encrypted = 1;

const String SN_pkcs3 = 'pkcs3';

const int NID_pkcs3 = 27;

const int OBJ_pkcs3 = 1;

const String LN_dhKeyAgreement = 'dhKeyAgreement';

const int NID_dhKeyAgreement = 28;

const int OBJ_dhKeyAgreement = 1;

const String SN_des_ecb = 'DES-ECB';

const String LN_des_ecb = 'des-ecb';

const int NID_des_ecb = 29;

const int OBJ_des_ecb = 1;

const String SN_des_cfb64 = 'DES-CFB';

const String LN_des_cfb64 = 'des-cfb';

const int NID_des_cfb64 = 30;

const int OBJ_des_cfb64 = 1;

const String SN_des_cbc = 'DES-CBC';

const String LN_des_cbc = 'des-cbc';

const int NID_des_cbc = 31;

const int OBJ_des_cbc = 1;

const String SN_des_ede_ecb = 'DES-EDE';

const String LN_des_ede_ecb = 'des-ede';

const int NID_des_ede_ecb = 32;

const int OBJ_des_ede_ecb = 1;

const String SN_des_ede3_ecb = 'DES-EDE3';

const String LN_des_ede3_ecb = 'des-ede3';

const int NID_des_ede3_ecb = 33;

const String SN_idea_cbc = 'IDEA-CBC';

const String LN_idea_cbc = 'idea-cbc';

const int NID_idea_cbc = 34;

const int OBJ_idea_cbc = 1;

const String SN_idea_cfb64 = 'IDEA-CFB';

const String LN_idea_cfb64 = 'idea-cfb';

const int NID_idea_cfb64 = 35;

const String SN_idea_ecb = 'IDEA-ECB';

const String LN_idea_ecb = 'idea-ecb';

const int NID_idea_ecb = 36;

const String SN_rc2_cbc = 'RC2-CBC';

const String LN_rc2_cbc = 'rc2-cbc';

const int NID_rc2_cbc = 37;

const int OBJ_rc2_cbc = 1;

const String SN_rc2_ecb = 'RC2-ECB';

const String LN_rc2_ecb = 'rc2-ecb';

const int NID_rc2_ecb = 38;

const String SN_rc2_cfb64 = 'RC2-CFB';

const String LN_rc2_cfb64 = 'rc2-cfb';

const int NID_rc2_cfb64 = 39;

const String SN_rc2_ofb64 = 'RC2-OFB';

const String LN_rc2_ofb64 = 'rc2-ofb';

const int NID_rc2_ofb64 = 40;

const String SN_sha = 'SHA';

const String LN_sha = 'sha';

const int NID_sha = 41;

const int OBJ_sha = 1;

const String SN_shaWithRSAEncryption = 'RSA-SHA';

const String LN_shaWithRSAEncryption = 'shaWithRSAEncryption';

const int NID_shaWithRSAEncryption = 42;

const int OBJ_shaWithRSAEncryption = 1;

const String SN_des_ede_cbc = 'DES-EDE-CBC';

const String LN_des_ede_cbc = 'des-ede-cbc';

const int NID_des_ede_cbc = 43;

const String SN_des_ede3_cbc = 'DES-EDE3-CBC';

const String LN_des_ede3_cbc = 'des-ede3-cbc';

const int NID_des_ede3_cbc = 44;

const int OBJ_des_ede3_cbc = 1;

const String SN_des_ofb64 = 'DES-OFB';

const String LN_des_ofb64 = 'des-ofb';

const int NID_des_ofb64 = 45;

const int OBJ_des_ofb64 = 1;

const String SN_idea_ofb64 = 'IDEA-OFB';

const String LN_idea_ofb64 = 'idea-ofb';

const int NID_idea_ofb64 = 46;

const String SN_pkcs9 = 'pkcs9';

const int NID_pkcs9 = 47;

const int OBJ_pkcs9 = 1;

const String LN_pkcs9_emailAddress = 'emailAddress';

const int NID_pkcs9_emailAddress = 48;

const int OBJ_pkcs9_emailAddress = 1;

const String LN_pkcs9_unstructuredName = 'unstructuredName';

const int NID_pkcs9_unstructuredName = 49;

const int OBJ_pkcs9_unstructuredName = 1;

const String LN_pkcs9_contentType = 'contentType';

const int NID_pkcs9_contentType = 50;

const int OBJ_pkcs9_contentType = 1;

const String LN_pkcs9_messageDigest = 'messageDigest';

const int NID_pkcs9_messageDigest = 51;

const int OBJ_pkcs9_messageDigest = 1;

const String LN_pkcs9_signingTime = 'signingTime';

const int NID_pkcs9_signingTime = 52;

const int OBJ_pkcs9_signingTime = 1;

const String LN_pkcs9_countersignature = 'countersignature';

const int NID_pkcs9_countersignature = 53;

const int OBJ_pkcs9_countersignature = 1;

const String LN_pkcs9_challengePassword = 'challengePassword';

const int NID_pkcs9_challengePassword = 54;

const int OBJ_pkcs9_challengePassword = 1;

const String LN_pkcs9_unstructuredAddress = 'unstructuredAddress';

const int NID_pkcs9_unstructuredAddress = 55;

const int OBJ_pkcs9_unstructuredAddress = 1;

const String LN_pkcs9_extCertAttributes = 'extendedCertificateAttributes';

const int NID_pkcs9_extCertAttributes = 56;

const int OBJ_pkcs9_extCertAttributes = 1;

const String SN_netscape = 'Netscape';

const String LN_netscape = 'Netscape Communications Corp.';

const int NID_netscape = 57;

const int OBJ_netscape = 2;

const String SN_netscape_cert_extension = 'nsCertExt';

const String LN_netscape_cert_extension = 'Netscape Certificate Extension';

const int NID_netscape_cert_extension = 58;

const int OBJ_netscape_cert_extension = 2;

const String SN_netscape_data_type = 'nsDataType';

const String LN_netscape_data_type = 'Netscape Data Type';

const int NID_netscape_data_type = 59;

const int OBJ_netscape_data_type = 2;

const String SN_des_ede_cfb64 = 'DES-EDE-CFB';

const String LN_des_ede_cfb64 = 'des-ede-cfb';

const int NID_des_ede_cfb64 = 60;

const String SN_des_ede3_cfb64 = 'DES-EDE3-CFB';

const String LN_des_ede3_cfb64 = 'des-ede3-cfb';

const int NID_des_ede3_cfb64 = 61;

const String SN_des_ede_ofb64 = 'DES-EDE-OFB';

const String LN_des_ede_ofb64 = 'des-ede-ofb';

const int NID_des_ede_ofb64 = 62;

const String SN_des_ede3_ofb64 = 'DES-EDE3-OFB';

const String LN_des_ede3_ofb64 = 'des-ede3-ofb';

const int NID_des_ede3_ofb64 = 63;

const String SN_sha1 = 'SHA1';

const String LN_sha1 = 'sha1';

const int NID_sha1 = 64;

const int OBJ_sha1 = 1;

const String SN_sha1WithRSAEncryption = 'RSA-SHA1';

const String LN_sha1WithRSAEncryption = 'sha1WithRSAEncryption';

const int NID_sha1WithRSAEncryption = 65;

const int OBJ_sha1WithRSAEncryption = 1;

const String SN_dsaWithSHA = 'DSA-SHA';

const String LN_dsaWithSHA = 'dsaWithSHA';

const int NID_dsaWithSHA = 66;

const int OBJ_dsaWithSHA = 1;

const String SN_dsa_2 = 'DSA-old';

const String LN_dsa_2 = 'dsaEncryption-old';

const int NID_dsa_2 = 67;

const int OBJ_dsa_2 = 1;

const String SN_pbeWithSHA1AndRC2_CBC = 'PBE-SHA1-RC2-64';

const String LN_pbeWithSHA1AndRC2_CBC = 'pbeWithSHA1AndRC2-CBC';

const int NID_pbeWithSHA1AndRC2_CBC = 68;

const int OBJ_pbeWithSHA1AndRC2_CBC = 1;

const String LN_id_pbkdf2 = 'PBKDF2';

const int NID_id_pbkdf2 = 69;

const int OBJ_id_pbkdf2 = 1;

const String SN_dsaWithSHA1_2 = 'DSA-SHA1-old';

const String LN_dsaWithSHA1_2 = 'dsaWithSHA1-old';

const int NID_dsaWithSHA1_2 = 70;

const int OBJ_dsaWithSHA1_2 = 1;

const String SN_netscape_cert_type = 'nsCertType';

const String LN_netscape_cert_type = 'Netscape Cert Type';

const int NID_netscape_cert_type = 71;

const int OBJ_netscape_cert_type = 2;

const String SN_netscape_base_url = 'nsBaseUrl';

const String LN_netscape_base_url = 'Netscape Base Url';

const int NID_netscape_base_url = 72;

const int OBJ_netscape_base_url = 2;

const String SN_netscape_revocation_url = 'nsRevocationUrl';

const String LN_netscape_revocation_url = 'Netscape Revocation Url';

const int NID_netscape_revocation_url = 73;

const int OBJ_netscape_revocation_url = 2;

const String SN_netscape_ca_revocation_url = 'nsCaRevocationUrl';

const String LN_netscape_ca_revocation_url = 'Netscape CA Revocation Url';

const int NID_netscape_ca_revocation_url = 74;

const int OBJ_netscape_ca_revocation_url = 2;

const String SN_netscape_renewal_url = 'nsRenewalUrl';

const String LN_netscape_renewal_url = 'Netscape Renewal Url';

const int NID_netscape_renewal_url = 75;

const int OBJ_netscape_renewal_url = 2;

const String SN_netscape_ca_policy_url = 'nsCaPolicyUrl';

const String LN_netscape_ca_policy_url = 'Netscape CA Policy Url';

const int NID_netscape_ca_policy_url = 76;

const int OBJ_netscape_ca_policy_url = 2;

const String SN_netscape_ssl_server_name = 'nsSslServerName';

const String LN_netscape_ssl_server_name = 'Netscape SSL Server Name';

const int NID_netscape_ssl_server_name = 77;

const int OBJ_netscape_ssl_server_name = 2;

const String SN_netscape_comment = 'nsComment';

const String LN_netscape_comment = 'Netscape Comment';

const int NID_netscape_comment = 78;

const int OBJ_netscape_comment = 2;

const String SN_netscape_cert_sequence = 'nsCertSequence';

const String LN_netscape_cert_sequence = 'Netscape Certificate Sequence';

const int NID_netscape_cert_sequence = 79;

const int OBJ_netscape_cert_sequence = 2;

const String SN_desx_cbc = 'DESX-CBC';

const String LN_desx_cbc = 'desx-cbc';

const int NID_desx_cbc = 80;

const String SN_id_ce = 'id-ce';

const int NID_id_ce = 81;

const int OBJ_id_ce = 2;

const String SN_subject_key_identifier = 'subjectKeyIdentifier';

const String LN_subject_key_identifier = 'X509v3 Subject Key Identifier';

const int NID_subject_key_identifier = 82;

const int OBJ_subject_key_identifier = 2;

const String SN_key_usage = 'keyUsage';

const String LN_key_usage = 'X509v3 Key Usage';

const int NID_key_usage = 83;

const int OBJ_key_usage = 2;

const String SN_private_key_usage_period = 'privateKeyUsagePeriod';

const String LN_private_key_usage_period = 'X509v3 Private Key Usage Period';

const int NID_private_key_usage_period = 84;

const int OBJ_private_key_usage_period = 2;

const String SN_subject_alt_name = 'subjectAltName';

const String LN_subject_alt_name = 'X509v3 Subject Alternative Name';

const int NID_subject_alt_name = 85;

const int OBJ_subject_alt_name = 2;

const String SN_issuer_alt_name = 'issuerAltName';

const String LN_issuer_alt_name = 'X509v3 Issuer Alternative Name';

const int NID_issuer_alt_name = 86;

const int OBJ_issuer_alt_name = 2;

const String SN_basic_constraints = 'basicConstraints';

const String LN_basic_constraints = 'X509v3 Basic Constraints';

const int NID_basic_constraints = 87;

const int OBJ_basic_constraints = 2;

const String SN_crl_number = 'crlNumber';

const String LN_crl_number = 'X509v3 CRL Number';

const int NID_crl_number = 88;

const int OBJ_crl_number = 2;

const String SN_certificate_policies = 'certificatePolicies';

const String LN_certificate_policies = 'X509v3 Certificate Policies';

const int NID_certificate_policies = 89;

const int OBJ_certificate_policies = 2;

const String SN_authority_key_identifier = 'authorityKeyIdentifier';

const String LN_authority_key_identifier = 'X509v3 Authority Key Identifier';

const int NID_authority_key_identifier = 90;

const int OBJ_authority_key_identifier = 2;

const String SN_bf_cbc = 'BF-CBC';

const String LN_bf_cbc = 'bf-cbc';

const int NID_bf_cbc = 91;

const int OBJ_bf_cbc = 1;

const String SN_bf_ecb = 'BF-ECB';

const String LN_bf_ecb = 'bf-ecb';

const int NID_bf_ecb = 92;

const String SN_bf_cfb64 = 'BF-CFB';

const String LN_bf_cfb64 = 'bf-cfb';

const int NID_bf_cfb64 = 93;

const String SN_bf_ofb64 = 'BF-OFB';

const String LN_bf_ofb64 = 'bf-ofb';

const int NID_bf_ofb64 = 94;

const String SN_mdc2 = 'MDC2';

const String LN_mdc2 = 'mdc2';

const int NID_mdc2 = 95;

const int OBJ_mdc2 = 2;

const String SN_mdc2WithRSA = 'RSA-MDC2';

const String LN_mdc2WithRSA = 'mdc2WithRSA';

const int NID_mdc2WithRSA = 96;

const int OBJ_mdc2WithRSA = 2;

const String SN_rc4_40 = 'RC4-40';

const String LN_rc4_40 = 'rc4-40';

const int NID_rc4_40 = 97;

const String SN_rc2_40_cbc = 'RC2-40-CBC';

const String LN_rc2_40_cbc = 'rc2-40-cbc';

const int NID_rc2_40_cbc = 98;

const String SN_givenName = 'GN';

const String LN_givenName = 'givenName';

const int NID_givenName = 99;

const int OBJ_givenName = 2;

const String SN_surname = 'SN';

const String LN_surname = 'surname';

const int NID_surname = 100;

const int OBJ_surname = 2;

const String SN_initials = 'initials';

const String LN_initials = 'initials';

const int NID_initials = 101;

const int OBJ_initials = 2;

const String SN_crl_distribution_points = 'crlDistributionPoints';

const String LN_crl_distribution_points = 'X509v3 CRL Distribution Points';

const int NID_crl_distribution_points = 103;

const int OBJ_crl_distribution_points = 2;

const String SN_md5WithRSA = 'RSA-NP-MD5';

const String LN_md5WithRSA = 'md5WithRSA';

const int NID_md5WithRSA = 104;

const int OBJ_md5WithRSA = 1;

const String LN_serialNumber = 'serialNumber';

const int NID_serialNumber = 105;

const int OBJ_serialNumber = 2;

const String SN_title = 'title';

const String LN_title = 'title';

const int NID_title = 106;

const int OBJ_title = 2;

const String LN_description = 'description';

const int NID_description = 107;

const int OBJ_description = 2;

const String SN_cast5_cbc = 'CAST5-CBC';

const String LN_cast5_cbc = 'cast5-cbc';

const int NID_cast5_cbc = 108;

const int OBJ_cast5_cbc = 1;

const String SN_cast5_ecb = 'CAST5-ECB';

const String LN_cast5_ecb = 'cast5-ecb';

const int NID_cast5_ecb = 109;

const String SN_cast5_cfb64 = 'CAST5-CFB';

const String LN_cast5_cfb64 = 'cast5-cfb';

const int NID_cast5_cfb64 = 110;

const String SN_cast5_ofb64 = 'CAST5-OFB';

const String LN_cast5_ofb64 = 'cast5-ofb';

const int NID_cast5_ofb64 = 111;

const String LN_pbeWithMD5AndCast5_CBC = 'pbeWithMD5AndCast5CBC';

const int NID_pbeWithMD5AndCast5_CBC = 112;

const int OBJ_pbeWithMD5AndCast5_CBC = 1;

const String SN_dsaWithSHA1 = 'DSA-SHA1';

const String LN_dsaWithSHA1 = 'dsaWithSHA1';

const int NID_dsaWithSHA1 = 113;

const int OBJ_dsaWithSHA1 = 1;

const String SN_md5_sha1 = 'MD5-SHA1';

const String LN_md5_sha1 = 'md5-sha1';

const int NID_md5_sha1 = 114;

const String SN_sha1WithRSA = 'RSA-SHA1-2';

const String LN_sha1WithRSA = 'sha1WithRSA';

const int NID_sha1WithRSA = 115;

const int OBJ_sha1WithRSA = 1;

const String SN_dsa = 'DSA';

const String LN_dsa = 'dsaEncryption';

const int NID_dsa = 116;

const int OBJ_dsa = 1;

const String SN_ripemd160 = 'RIPEMD160';

const String LN_ripemd160 = 'ripemd160';

const int NID_ripemd160 = 117;

const int OBJ_ripemd160 = 1;

const String SN_ripemd160WithRSA = 'RSA-RIPEMD160';

const String LN_ripemd160WithRSA = 'ripemd160WithRSA';

const int NID_ripemd160WithRSA = 119;

const int OBJ_ripemd160WithRSA = 1;

const String SN_rc5_cbc = 'RC5-CBC';

const String LN_rc5_cbc = 'rc5-cbc';

const int NID_rc5_cbc = 120;

const int OBJ_rc5_cbc = 1;

const String SN_rc5_ecb = 'RC5-ECB';

const String LN_rc5_ecb = 'rc5-ecb';

const int NID_rc5_ecb = 121;

const String SN_rc5_cfb64 = 'RC5-CFB';

const String LN_rc5_cfb64 = 'rc5-cfb';

const int NID_rc5_cfb64 = 122;

const String SN_rc5_ofb64 = 'RC5-OFB';

const String LN_rc5_ofb64 = 'rc5-ofb';

const int NID_rc5_ofb64 = 123;

const String SN_zlib_compression = 'ZLIB';

const String LN_zlib_compression = 'zlib compression';

const int NID_zlib_compression = 125;

const int OBJ_zlib_compression = 1;

const String SN_ext_key_usage = 'extendedKeyUsage';

const String LN_ext_key_usage = 'X509v3 Extended Key Usage';

const int NID_ext_key_usage = 126;

const int OBJ_ext_key_usage = 2;

const String SN_id_pkix = 'PKIX';

const int NID_id_pkix = 127;

const int OBJ_id_pkix = 1;

const String SN_id_kp = 'id-kp';

const int NID_id_kp = 128;

const int OBJ_id_kp = 1;

const String SN_server_auth = 'serverAuth';

const String LN_server_auth = 'TLS Web Server Authentication';

const int NID_server_auth = 129;

const int OBJ_server_auth = 1;

const String SN_client_auth = 'clientAuth';

const String LN_client_auth = 'TLS Web Client Authentication';

const int NID_client_auth = 130;

const int OBJ_client_auth = 1;

const String SN_code_sign = 'codeSigning';

const String LN_code_sign = 'Code Signing';

const int NID_code_sign = 131;

const int OBJ_code_sign = 1;

const String SN_email_protect = 'emailProtection';

const String LN_email_protect = 'E-mail Protection';

const int NID_email_protect = 132;

const int OBJ_email_protect = 1;

const String SN_time_stamp = 'timeStamping';

const String LN_time_stamp = 'Time Stamping';

const int NID_time_stamp = 133;

const int OBJ_time_stamp = 1;

const String SN_ms_code_ind = 'msCodeInd';

const String LN_ms_code_ind = 'Microsoft Individual Code Signing';

const int NID_ms_code_ind = 134;

const int OBJ_ms_code_ind = 1;

const String SN_ms_code_com = 'msCodeCom';

const String LN_ms_code_com = 'Microsoft Commercial Code Signing';

const int NID_ms_code_com = 135;

const int OBJ_ms_code_com = 1;

const String SN_ms_ctl_sign = 'msCTLSign';

const String LN_ms_ctl_sign = 'Microsoft Trust List Signing';

const int NID_ms_ctl_sign = 136;

const int OBJ_ms_ctl_sign = 1;

const String SN_ms_sgc = 'msSGC';

const String LN_ms_sgc = 'Microsoft Server Gated Crypto';

const int NID_ms_sgc = 137;

const int OBJ_ms_sgc = 1;

const String SN_ms_efs = 'msEFS';

const String LN_ms_efs = 'Microsoft Encrypted File System';

const int NID_ms_efs = 138;

const int OBJ_ms_efs = 1;

const String SN_ns_sgc = 'nsSGC';

const String LN_ns_sgc = 'Netscape Server Gated Crypto';

const int NID_ns_sgc = 139;

const int OBJ_ns_sgc = 2;

const String SN_delta_crl = 'deltaCRL';

const String LN_delta_crl = 'X509v3 Delta CRL Indicator';

const int NID_delta_crl = 140;

const int OBJ_delta_crl = 2;

const String SN_crl_reason = 'CRLReason';

const String LN_crl_reason = 'X509v3 CRL Reason Code';

const int NID_crl_reason = 141;

const int OBJ_crl_reason = 2;

const String SN_invalidity_date = 'invalidityDate';

const String LN_invalidity_date = 'Invalidity Date';

const int NID_invalidity_date = 142;

const int OBJ_invalidity_date = 2;

const String SN_sxnet = 'SXNetID';

const String LN_sxnet = 'Strong Extranet ID';

const int NID_sxnet = 143;

const int OBJ_sxnet = 1;

const String SN_pbe_WithSHA1And128BitRC4 = 'PBE-SHA1-RC4-128';

const String LN_pbe_WithSHA1And128BitRC4 = 'pbeWithSHA1And128BitRC4';

const int NID_pbe_WithSHA1And128BitRC4 = 144;

const int OBJ_pbe_WithSHA1And128BitRC4 = 1;

const String SN_pbe_WithSHA1And40BitRC4 = 'PBE-SHA1-RC4-40';

const String LN_pbe_WithSHA1And40BitRC4 = 'pbeWithSHA1And40BitRC4';

const int NID_pbe_WithSHA1And40BitRC4 = 145;

const int OBJ_pbe_WithSHA1And40BitRC4 = 1;

const String SN_pbe_WithSHA1And3_Key_TripleDES_CBC = 'PBE-SHA1-3DES';

const String LN_pbe_WithSHA1And3_Key_TripleDES_CBC =
    'pbeWithSHA1And3-KeyTripleDES-CBC';

const int NID_pbe_WithSHA1And3_Key_TripleDES_CBC = 146;

const int OBJ_pbe_WithSHA1And3_Key_TripleDES_CBC = 1;

const String SN_pbe_WithSHA1And2_Key_TripleDES_CBC = 'PBE-SHA1-2DES';

const String LN_pbe_WithSHA1And2_Key_TripleDES_CBC =
    'pbeWithSHA1And2-KeyTripleDES-CBC';

const int NID_pbe_WithSHA1And2_Key_TripleDES_CBC = 147;

const int OBJ_pbe_WithSHA1And2_Key_TripleDES_CBC = 1;

const String SN_pbe_WithSHA1And128BitRC2_CBC = 'PBE-SHA1-RC2-128';

const String LN_pbe_WithSHA1And128BitRC2_CBC = 'pbeWithSHA1And128BitRC2-CBC';

const int NID_pbe_WithSHA1And128BitRC2_CBC = 148;

const int OBJ_pbe_WithSHA1And128BitRC2_CBC = 1;

const String SN_pbe_WithSHA1And40BitRC2_CBC = 'PBE-SHA1-RC2-40';

const String LN_pbe_WithSHA1And40BitRC2_CBC = 'pbeWithSHA1And40BitRC2-CBC';

const int NID_pbe_WithSHA1And40BitRC2_CBC = 149;

const int OBJ_pbe_WithSHA1And40BitRC2_CBC = 1;

const String LN_keyBag = 'keyBag';

const int NID_keyBag = 150;

const int OBJ_keyBag = 1;

const String LN_pkcs8ShroudedKeyBag = 'pkcs8ShroudedKeyBag';

const int NID_pkcs8ShroudedKeyBag = 151;

const int OBJ_pkcs8ShroudedKeyBag = 1;

const String LN_certBag = 'certBag';

const int NID_certBag = 152;

const int OBJ_certBag = 1;

const String LN_crlBag = 'crlBag';

const int NID_crlBag = 153;

const int OBJ_crlBag = 1;

const String LN_secretBag = 'secretBag';

const int NID_secretBag = 154;

const int OBJ_secretBag = 1;

const String LN_safeContentsBag = 'safeContentsBag';

const int NID_safeContentsBag = 155;

const int OBJ_safeContentsBag = 1;

const String LN_friendlyName = 'friendlyName';

const int NID_friendlyName = 156;

const int OBJ_friendlyName = 1;

const String LN_localKeyID = 'localKeyID';

const int NID_localKeyID = 157;

const int OBJ_localKeyID = 1;

const String LN_x509Certificate = 'x509Certificate';

const int NID_x509Certificate = 158;

const int OBJ_x509Certificate = 1;

const String LN_sdsiCertificate = 'sdsiCertificate';

const int NID_sdsiCertificate = 159;

const int OBJ_sdsiCertificate = 1;

const String LN_x509Crl = 'x509Crl';

const int NID_x509Crl = 160;

const int OBJ_x509Crl = 1;

const String LN_pbes2 = 'PBES2';

const int NID_pbes2 = 161;

const int OBJ_pbes2 = 1;

const String LN_pbmac1 = 'PBMAC1';

const int NID_pbmac1 = 162;

const int OBJ_pbmac1 = 1;

const String LN_hmacWithSHA1 = 'hmacWithSHA1';

const int NID_hmacWithSHA1 = 163;

const int OBJ_hmacWithSHA1 = 1;

const String SN_id_qt_cps = 'id-qt-cps';

const String LN_id_qt_cps = 'Policy Qualifier CPS';

const int NID_id_qt_cps = 164;

const int OBJ_id_qt_cps = 1;

const String SN_id_qt_unotice = 'id-qt-unotice';

const String LN_id_qt_unotice = 'Policy Qualifier User Notice';

const int NID_id_qt_unotice = 165;

const int OBJ_id_qt_unotice = 1;

const String SN_rc2_64_cbc = 'RC2-64-CBC';

const String LN_rc2_64_cbc = 'rc2-64-cbc';

const int NID_rc2_64_cbc = 166;

const String SN_SMIMECapabilities = 'SMIME-CAPS';

const String LN_SMIMECapabilities = 'S/MIME Capabilities';

const int NID_SMIMECapabilities = 167;

const int OBJ_SMIMECapabilities = 1;

const String SN_pbeWithMD2AndRC2_CBC = 'PBE-MD2-RC2-64';

const String LN_pbeWithMD2AndRC2_CBC = 'pbeWithMD2AndRC2-CBC';

const int NID_pbeWithMD2AndRC2_CBC = 168;

const int OBJ_pbeWithMD2AndRC2_CBC = 1;

const String SN_pbeWithMD5AndRC2_CBC = 'PBE-MD5-RC2-64';

const String LN_pbeWithMD5AndRC2_CBC = 'pbeWithMD5AndRC2-CBC';

const int NID_pbeWithMD5AndRC2_CBC = 169;

const int OBJ_pbeWithMD5AndRC2_CBC = 1;

const String SN_pbeWithSHA1AndDES_CBC = 'PBE-SHA1-DES';

const String LN_pbeWithSHA1AndDES_CBC = 'pbeWithSHA1AndDES-CBC';

const int NID_pbeWithSHA1AndDES_CBC = 170;

const int OBJ_pbeWithSHA1AndDES_CBC = 1;

const String SN_ms_ext_req = 'msExtReq';

const String LN_ms_ext_req = 'Microsoft Extension Request';

const int NID_ms_ext_req = 171;

const int OBJ_ms_ext_req = 1;

const String SN_ext_req = 'extReq';

const String LN_ext_req = 'Extension Request';

const int NID_ext_req = 172;

const int OBJ_ext_req = 1;

const String SN_name = 'name';

const String LN_name = 'name';

const int NID_name = 173;

const int OBJ_name = 2;

const String SN_dnQualifier = 'dnQualifier';

const String LN_dnQualifier = 'dnQualifier';

const int NID_dnQualifier = 174;

const int OBJ_dnQualifier = 2;

const String SN_id_pe = 'id-pe';

const int NID_id_pe = 175;

const int OBJ_id_pe = 1;

const String SN_id_ad = 'id-ad';

const int NID_id_ad = 176;

const int OBJ_id_ad = 1;

const String SN_info_access = 'authorityInfoAccess';

const String LN_info_access = 'Authority Information Access';

const int NID_info_access = 177;

const int OBJ_info_access = 1;

const String SN_ad_OCSP = 'OCSP';

const String LN_ad_OCSP = 'OCSP';

const int NID_ad_OCSP = 178;

const int OBJ_ad_OCSP = 1;

const String SN_ad_ca_issuers = 'caIssuers';

const String LN_ad_ca_issuers = 'CA Issuers';

const int NID_ad_ca_issuers = 179;

const int OBJ_ad_ca_issuers = 1;

const String SN_OCSP_sign = 'OCSPSigning';

const String LN_OCSP_sign = 'OCSP Signing';

const int NID_OCSP_sign = 180;

const int OBJ_OCSP_sign = 1;

const String SN_iso = 'ISO';

const String LN_iso = 'iso';

const int NID_iso = 181;

const int OBJ_iso = 1;

const String SN_member_body = 'member-body';

const String LN_member_body = 'ISO Member Body';

const int NID_member_body = 182;

const int OBJ_member_body = 1;

const String SN_ISO_US = 'ISO-US';

const String LN_ISO_US = 'ISO US Member Body';

const int NID_ISO_US = 183;

const int OBJ_ISO_US = 1;

const String SN_X9_57 = 'X9-57';

const String LN_X9_57 = 'X9.57';

const int NID_X9_57 = 184;

const int OBJ_X9_57 = 1;

const String SN_X9cm = 'X9cm';

const String LN_X9cm = 'X9.57 CM ?';

const int NID_X9cm = 185;

const int OBJ_X9cm = 1;

const String SN_pkcs1 = 'pkcs1';

const int NID_pkcs1 = 186;

const int OBJ_pkcs1 = 1;

const String SN_pkcs5 = 'pkcs5';

const int NID_pkcs5 = 187;

const int OBJ_pkcs5 = 1;

const String SN_SMIME = 'SMIME';

const String LN_SMIME = 'S/MIME';

const int NID_SMIME = 188;

const int OBJ_SMIME = 1;

const String SN_id_smime_mod = 'id-smime-mod';

const int NID_id_smime_mod = 189;

const int OBJ_id_smime_mod = 1;

const String SN_id_smime_ct = 'id-smime-ct';

const int NID_id_smime_ct = 190;

const int OBJ_id_smime_ct = 1;

const String SN_id_smime_aa = 'id-smime-aa';

const int NID_id_smime_aa = 191;

const int OBJ_id_smime_aa = 1;

const String SN_id_smime_alg = 'id-smime-alg';

const int NID_id_smime_alg = 192;

const int OBJ_id_smime_alg = 1;

const String SN_id_smime_cd = 'id-smime-cd';

const int NID_id_smime_cd = 193;

const int OBJ_id_smime_cd = 1;

const String SN_id_smime_spq = 'id-smime-spq';

const int NID_id_smime_spq = 194;

const int OBJ_id_smime_spq = 1;

const String SN_id_smime_cti = 'id-smime-cti';

const int NID_id_smime_cti = 195;

const int OBJ_id_smime_cti = 1;

const String SN_id_smime_mod_cms = 'id-smime-mod-cms';

const int NID_id_smime_mod_cms = 196;

const int OBJ_id_smime_mod_cms = 1;

const String SN_id_smime_mod_ess = 'id-smime-mod-ess';

const int NID_id_smime_mod_ess = 197;

const int OBJ_id_smime_mod_ess = 1;

const String SN_id_smime_mod_oid = 'id-smime-mod-oid';

const int NID_id_smime_mod_oid = 198;

const int OBJ_id_smime_mod_oid = 1;

const String SN_id_smime_mod_msg_v3 = 'id-smime-mod-msg-v3';

const int NID_id_smime_mod_msg_v3 = 199;

const int OBJ_id_smime_mod_msg_v3 = 1;

const String SN_id_smime_mod_ets_eSignature_88 =
    'id-smime-mod-ets-eSignature-88';

const int NID_id_smime_mod_ets_eSignature_88 = 200;

const int OBJ_id_smime_mod_ets_eSignature_88 = 1;

const String SN_id_smime_mod_ets_eSignature_97 =
    'id-smime-mod-ets-eSignature-97';

const int NID_id_smime_mod_ets_eSignature_97 = 201;

const int OBJ_id_smime_mod_ets_eSignature_97 = 1;

const String SN_id_smime_mod_ets_eSigPolicy_88 =
    'id-smime-mod-ets-eSigPolicy-88';

const int NID_id_smime_mod_ets_eSigPolicy_88 = 202;

const int OBJ_id_smime_mod_ets_eSigPolicy_88 = 1;

const String SN_id_smime_mod_ets_eSigPolicy_97 =
    'id-smime-mod-ets-eSigPolicy-97';

const int NID_id_smime_mod_ets_eSigPolicy_97 = 203;

const int OBJ_id_smime_mod_ets_eSigPolicy_97 = 1;

const String SN_id_smime_ct_receipt = 'id-smime-ct-receipt';

const int NID_id_smime_ct_receipt = 204;

const int OBJ_id_smime_ct_receipt = 1;

const String SN_id_smime_ct_authData = 'id-smime-ct-authData';

const int NID_id_smime_ct_authData = 205;

const int OBJ_id_smime_ct_authData = 1;

const String SN_id_smime_ct_publishCert = 'id-smime-ct-publishCert';

const int NID_id_smime_ct_publishCert = 206;

const int OBJ_id_smime_ct_publishCert = 1;

const String SN_id_smime_ct_TSTInfo = 'id-smime-ct-TSTInfo';

const int NID_id_smime_ct_TSTInfo = 207;

const int OBJ_id_smime_ct_TSTInfo = 1;

const String SN_id_smime_ct_TDTInfo = 'id-smime-ct-TDTInfo';

const int NID_id_smime_ct_TDTInfo = 208;

const int OBJ_id_smime_ct_TDTInfo = 1;

const String SN_id_smime_ct_contentInfo = 'id-smime-ct-contentInfo';

const int NID_id_smime_ct_contentInfo = 209;

const int OBJ_id_smime_ct_contentInfo = 1;

const String SN_id_smime_ct_DVCSRequestData = 'id-smime-ct-DVCSRequestData';

const int NID_id_smime_ct_DVCSRequestData = 210;

const int OBJ_id_smime_ct_DVCSRequestData = 1;

const String SN_id_smime_ct_DVCSResponseData = 'id-smime-ct-DVCSResponseData';

const int NID_id_smime_ct_DVCSResponseData = 211;

const int OBJ_id_smime_ct_DVCSResponseData = 1;

const String SN_id_smime_aa_receiptRequest = 'id-smime-aa-receiptRequest';

const int NID_id_smime_aa_receiptRequest = 212;

const int OBJ_id_smime_aa_receiptRequest = 1;

const String SN_id_smime_aa_securityLabel = 'id-smime-aa-securityLabel';

const int NID_id_smime_aa_securityLabel = 213;

const int OBJ_id_smime_aa_securityLabel = 1;

const String SN_id_smime_aa_mlExpandHistory = 'id-smime-aa-mlExpandHistory';

const int NID_id_smime_aa_mlExpandHistory = 214;

const int OBJ_id_smime_aa_mlExpandHistory = 1;

const String SN_id_smime_aa_contentHint = 'id-smime-aa-contentHint';

const int NID_id_smime_aa_contentHint = 215;

const int OBJ_id_smime_aa_contentHint = 1;

const String SN_id_smime_aa_msgSigDigest = 'id-smime-aa-msgSigDigest';

const int NID_id_smime_aa_msgSigDigest = 216;

const int OBJ_id_smime_aa_msgSigDigest = 1;

const String SN_id_smime_aa_encapContentType = 'id-smime-aa-encapContentType';

const int NID_id_smime_aa_encapContentType = 217;

const int OBJ_id_smime_aa_encapContentType = 1;

const String SN_id_smime_aa_contentIdentifier = 'id-smime-aa-contentIdentifier';

const int NID_id_smime_aa_contentIdentifier = 218;

const int OBJ_id_smime_aa_contentIdentifier = 1;

const String SN_id_smime_aa_macValue = 'id-smime-aa-macValue';

const int NID_id_smime_aa_macValue = 219;

const int OBJ_id_smime_aa_macValue = 1;

const String SN_id_smime_aa_equivalentLabels = 'id-smime-aa-equivalentLabels';

const int NID_id_smime_aa_equivalentLabels = 220;

const int OBJ_id_smime_aa_equivalentLabels = 1;

const String SN_id_smime_aa_contentReference = 'id-smime-aa-contentReference';

const int NID_id_smime_aa_contentReference = 221;

const int OBJ_id_smime_aa_contentReference = 1;

const String SN_id_smime_aa_encrypKeyPref = 'id-smime-aa-encrypKeyPref';

const int NID_id_smime_aa_encrypKeyPref = 222;

const int OBJ_id_smime_aa_encrypKeyPref = 1;

const String SN_id_smime_aa_signingCertificate =
    'id-smime-aa-signingCertificate';

const int NID_id_smime_aa_signingCertificate = 223;

const int OBJ_id_smime_aa_signingCertificate = 1;

const String SN_id_smime_aa_smimeEncryptCerts = 'id-smime-aa-smimeEncryptCerts';

const int NID_id_smime_aa_smimeEncryptCerts = 224;

const int OBJ_id_smime_aa_smimeEncryptCerts = 1;

const String SN_id_smime_aa_timeStampToken = 'id-smime-aa-timeStampToken';

const int NID_id_smime_aa_timeStampToken = 225;

const int OBJ_id_smime_aa_timeStampToken = 1;

const String SN_id_smime_aa_ets_sigPolicyId = 'id-smime-aa-ets-sigPolicyId';

const int NID_id_smime_aa_ets_sigPolicyId = 226;

const int OBJ_id_smime_aa_ets_sigPolicyId = 1;

const String SN_id_smime_aa_ets_commitmentType =
    'id-smime-aa-ets-commitmentType';

const int NID_id_smime_aa_ets_commitmentType = 227;

const int OBJ_id_smime_aa_ets_commitmentType = 1;

const String SN_id_smime_aa_ets_signerLocation =
    'id-smime-aa-ets-signerLocation';

const int NID_id_smime_aa_ets_signerLocation = 228;

const int OBJ_id_smime_aa_ets_signerLocation = 1;

const String SN_id_smime_aa_ets_signerAttr = 'id-smime-aa-ets-signerAttr';

const int NID_id_smime_aa_ets_signerAttr = 229;

const int OBJ_id_smime_aa_ets_signerAttr = 1;

const String SN_id_smime_aa_ets_otherSigCert = 'id-smime-aa-ets-otherSigCert';

const int NID_id_smime_aa_ets_otherSigCert = 230;

const int OBJ_id_smime_aa_ets_otherSigCert = 1;

const String SN_id_smime_aa_ets_contentTimestamp =
    'id-smime-aa-ets-contentTimestamp';

const int NID_id_smime_aa_ets_contentTimestamp = 231;

const int OBJ_id_smime_aa_ets_contentTimestamp = 1;

const String SN_id_smime_aa_ets_CertificateRefs =
    'id-smime-aa-ets-CertificateRefs';

const int NID_id_smime_aa_ets_CertificateRefs = 232;

const int OBJ_id_smime_aa_ets_CertificateRefs = 1;

const String SN_id_smime_aa_ets_RevocationRefs =
    'id-smime-aa-ets-RevocationRefs';

const int NID_id_smime_aa_ets_RevocationRefs = 233;

const int OBJ_id_smime_aa_ets_RevocationRefs = 1;

const String SN_id_smime_aa_ets_certValues = 'id-smime-aa-ets-certValues';

const int NID_id_smime_aa_ets_certValues = 234;

const int OBJ_id_smime_aa_ets_certValues = 1;

const String SN_id_smime_aa_ets_revocationValues =
    'id-smime-aa-ets-revocationValues';

const int NID_id_smime_aa_ets_revocationValues = 235;

const int OBJ_id_smime_aa_ets_revocationValues = 1;

const String SN_id_smime_aa_ets_escTimeStamp = 'id-smime-aa-ets-escTimeStamp';

const int NID_id_smime_aa_ets_escTimeStamp = 236;

const int OBJ_id_smime_aa_ets_escTimeStamp = 1;

const String SN_id_smime_aa_ets_certCRLTimestamp =
    'id-smime-aa-ets-certCRLTimestamp';

const int NID_id_smime_aa_ets_certCRLTimestamp = 237;

const int OBJ_id_smime_aa_ets_certCRLTimestamp = 1;

const String SN_id_smime_aa_ets_archiveTimeStamp =
    'id-smime-aa-ets-archiveTimeStamp';

const int NID_id_smime_aa_ets_archiveTimeStamp = 238;

const int OBJ_id_smime_aa_ets_archiveTimeStamp = 1;

const String SN_id_smime_aa_signatureType = 'id-smime-aa-signatureType';

const int NID_id_smime_aa_signatureType = 239;

const int OBJ_id_smime_aa_signatureType = 1;

const String SN_id_smime_aa_dvcs_dvc = 'id-smime-aa-dvcs-dvc';

const int NID_id_smime_aa_dvcs_dvc = 240;

const int OBJ_id_smime_aa_dvcs_dvc = 1;

const String SN_id_smime_alg_ESDHwith3DES = 'id-smime-alg-ESDHwith3DES';

const int NID_id_smime_alg_ESDHwith3DES = 241;

const int OBJ_id_smime_alg_ESDHwith3DES = 1;

const String SN_id_smime_alg_ESDHwithRC2 = 'id-smime-alg-ESDHwithRC2';

const int NID_id_smime_alg_ESDHwithRC2 = 242;

const int OBJ_id_smime_alg_ESDHwithRC2 = 1;

const String SN_id_smime_alg_3DESwrap = 'id-smime-alg-3DESwrap';

const int NID_id_smime_alg_3DESwrap = 243;

const int OBJ_id_smime_alg_3DESwrap = 1;

const String SN_id_smime_alg_RC2wrap = 'id-smime-alg-RC2wrap';

const int NID_id_smime_alg_RC2wrap = 244;

const int OBJ_id_smime_alg_RC2wrap = 1;

const String SN_id_smime_alg_ESDH = 'id-smime-alg-ESDH';

const int NID_id_smime_alg_ESDH = 245;

const int OBJ_id_smime_alg_ESDH = 1;

const String SN_id_smime_alg_CMS3DESwrap = 'id-smime-alg-CMS3DESwrap';

const int NID_id_smime_alg_CMS3DESwrap = 246;

const int OBJ_id_smime_alg_CMS3DESwrap = 1;

const String SN_id_smime_alg_CMSRC2wrap = 'id-smime-alg-CMSRC2wrap';

const int NID_id_smime_alg_CMSRC2wrap = 247;

const int OBJ_id_smime_alg_CMSRC2wrap = 1;

const String SN_id_smime_cd_ldap = 'id-smime-cd-ldap';

const int NID_id_smime_cd_ldap = 248;

const int OBJ_id_smime_cd_ldap = 1;

const String SN_id_smime_spq_ets_sqt_uri = 'id-smime-spq-ets-sqt-uri';

const int NID_id_smime_spq_ets_sqt_uri = 249;

const int OBJ_id_smime_spq_ets_sqt_uri = 1;

const String SN_id_smime_spq_ets_sqt_unotice = 'id-smime-spq-ets-sqt-unotice';

const int NID_id_smime_spq_ets_sqt_unotice = 250;

const int OBJ_id_smime_spq_ets_sqt_unotice = 1;

const String SN_id_smime_cti_ets_proofOfOrigin =
    'id-smime-cti-ets-proofOfOrigin';

const int NID_id_smime_cti_ets_proofOfOrigin = 251;

const int OBJ_id_smime_cti_ets_proofOfOrigin = 1;

const String SN_id_smime_cti_ets_proofOfReceipt =
    'id-smime-cti-ets-proofOfReceipt';

const int NID_id_smime_cti_ets_proofOfReceipt = 252;

const int OBJ_id_smime_cti_ets_proofOfReceipt = 1;

const String SN_id_smime_cti_ets_proofOfDelivery =
    'id-smime-cti-ets-proofOfDelivery';

const int NID_id_smime_cti_ets_proofOfDelivery = 253;

const int OBJ_id_smime_cti_ets_proofOfDelivery = 1;

const String SN_id_smime_cti_ets_proofOfSender =
    'id-smime-cti-ets-proofOfSender';

const int NID_id_smime_cti_ets_proofOfSender = 254;

const int OBJ_id_smime_cti_ets_proofOfSender = 1;

const String SN_id_smime_cti_ets_proofOfApproval =
    'id-smime-cti-ets-proofOfApproval';

const int NID_id_smime_cti_ets_proofOfApproval = 255;

const int OBJ_id_smime_cti_ets_proofOfApproval = 1;

const String SN_id_smime_cti_ets_proofOfCreation =
    'id-smime-cti-ets-proofOfCreation';

const int NID_id_smime_cti_ets_proofOfCreation = 256;

const int OBJ_id_smime_cti_ets_proofOfCreation = 1;

const String SN_md4 = 'MD4';

const String LN_md4 = 'md4';

const int NID_md4 = 257;

const int OBJ_md4 = 1;

const String SN_id_pkix_mod = 'id-pkix-mod';

const int NID_id_pkix_mod = 258;

const int OBJ_id_pkix_mod = 1;

const String SN_id_qt = 'id-qt';

const int NID_id_qt = 259;

const int OBJ_id_qt = 1;

const String SN_id_it = 'id-it';

const int NID_id_it = 260;

const int OBJ_id_it = 1;

const String SN_id_pkip = 'id-pkip';

const int NID_id_pkip = 261;

const int OBJ_id_pkip = 1;

const String SN_id_alg = 'id-alg';

const int NID_id_alg = 262;

const int OBJ_id_alg = 1;

const String SN_id_cmc = 'id-cmc';

const int NID_id_cmc = 263;

const int OBJ_id_cmc = 1;

const String SN_id_on = 'id-on';

const int NID_id_on = 264;

const int OBJ_id_on = 1;

const String SN_id_pda = 'id-pda';

const int NID_id_pda = 265;

const int OBJ_id_pda = 1;

const String SN_id_aca = 'id-aca';

const int NID_id_aca = 266;

const int OBJ_id_aca = 1;

const String SN_id_qcs = 'id-qcs';

const int NID_id_qcs = 267;

const int OBJ_id_qcs = 1;

const String SN_id_cct = 'id-cct';

const int NID_id_cct = 268;

const int OBJ_id_cct = 1;

const String SN_id_pkix1_explicit_88 = 'id-pkix1-explicit-88';

const int NID_id_pkix1_explicit_88 = 269;

const int OBJ_id_pkix1_explicit_88 = 1;

const String SN_id_pkix1_implicit_88 = 'id-pkix1-implicit-88';

const int NID_id_pkix1_implicit_88 = 270;

const int OBJ_id_pkix1_implicit_88 = 1;

const String SN_id_pkix1_explicit_93 = 'id-pkix1-explicit-93';

const int NID_id_pkix1_explicit_93 = 271;

const int OBJ_id_pkix1_explicit_93 = 1;

const String SN_id_pkix1_implicit_93 = 'id-pkix1-implicit-93';

const int NID_id_pkix1_implicit_93 = 272;

const int OBJ_id_pkix1_implicit_93 = 1;

const String SN_id_mod_crmf = 'id-mod-crmf';

const int NID_id_mod_crmf = 273;

const int OBJ_id_mod_crmf = 1;

const String SN_id_mod_cmc = 'id-mod-cmc';

const int NID_id_mod_cmc = 274;

const int OBJ_id_mod_cmc = 1;

const String SN_id_mod_kea_profile_88 = 'id-mod-kea-profile-88';

const int NID_id_mod_kea_profile_88 = 275;

const int OBJ_id_mod_kea_profile_88 = 1;

const String SN_id_mod_kea_profile_93 = 'id-mod-kea-profile-93';

const int NID_id_mod_kea_profile_93 = 276;

const int OBJ_id_mod_kea_profile_93 = 1;

const String SN_id_mod_cmp = 'id-mod-cmp';

const int NID_id_mod_cmp = 277;

const int OBJ_id_mod_cmp = 1;

const String SN_id_mod_qualified_cert_88 = 'id-mod-qualified-cert-88';

const int NID_id_mod_qualified_cert_88 = 278;

const int OBJ_id_mod_qualified_cert_88 = 1;

const String SN_id_mod_qualified_cert_93 = 'id-mod-qualified-cert-93';

const int NID_id_mod_qualified_cert_93 = 279;

const int OBJ_id_mod_qualified_cert_93 = 1;

const String SN_id_mod_attribute_cert = 'id-mod-attribute-cert';

const int NID_id_mod_attribute_cert = 280;

const int OBJ_id_mod_attribute_cert = 1;

const String SN_id_mod_timestamp_protocol = 'id-mod-timestamp-protocol';

const int NID_id_mod_timestamp_protocol = 281;

const int OBJ_id_mod_timestamp_protocol = 1;

const String SN_id_mod_ocsp = 'id-mod-ocsp';

const int NID_id_mod_ocsp = 282;

const int OBJ_id_mod_ocsp = 1;

const String SN_id_mod_dvcs = 'id-mod-dvcs';

const int NID_id_mod_dvcs = 283;

const int OBJ_id_mod_dvcs = 1;

const String SN_id_mod_cmp2000 = 'id-mod-cmp2000';

const int NID_id_mod_cmp2000 = 284;

const int OBJ_id_mod_cmp2000 = 1;

const String SN_biometricInfo = 'biometricInfo';

const String LN_biometricInfo = 'Biometric Info';

const int NID_biometricInfo = 285;

const int OBJ_biometricInfo = 1;

const String SN_qcStatements = 'qcStatements';

const int NID_qcStatements = 286;

const int OBJ_qcStatements = 1;

const String SN_ac_auditEntity = 'ac-auditEntity';

const int NID_ac_auditEntity = 287;

const int OBJ_ac_auditEntity = 1;

const String SN_ac_targeting = 'ac-targeting';

const int NID_ac_targeting = 288;

const int OBJ_ac_targeting = 1;

const String SN_aaControls = 'aaControls';

const int NID_aaControls = 289;

const int OBJ_aaControls = 1;

const String SN_sbgp_ipAddrBlock = 'sbgp-ipAddrBlock';

const int NID_sbgp_ipAddrBlock = 290;

const int OBJ_sbgp_ipAddrBlock = 1;

const String SN_sbgp_autonomousSysNum = 'sbgp-autonomousSysNum';

const int NID_sbgp_autonomousSysNum = 291;

const int OBJ_sbgp_autonomousSysNum = 1;

const String SN_sbgp_routerIdentifier = 'sbgp-routerIdentifier';

const int NID_sbgp_routerIdentifier = 292;

const int OBJ_sbgp_routerIdentifier = 1;

const String SN_textNotice = 'textNotice';

const int NID_textNotice = 293;

const int OBJ_textNotice = 1;

const String SN_ipsecEndSystem = 'ipsecEndSystem';

const String LN_ipsecEndSystem = 'IPSec End System';

const int NID_ipsecEndSystem = 294;

const int OBJ_ipsecEndSystem = 1;

const String SN_ipsecTunnel = 'ipsecTunnel';

const String LN_ipsecTunnel = 'IPSec Tunnel';

const int NID_ipsecTunnel = 295;

const int OBJ_ipsecTunnel = 1;

const String SN_ipsecUser = 'ipsecUser';

const String LN_ipsecUser = 'IPSec User';

const int NID_ipsecUser = 296;

const int OBJ_ipsecUser = 1;

const String SN_dvcs = 'DVCS';

const String LN_dvcs = 'dvcs';

const int NID_dvcs = 297;

const int OBJ_dvcs = 1;

const String SN_id_it_caProtEncCert = 'id-it-caProtEncCert';

const int NID_id_it_caProtEncCert = 298;

const int OBJ_id_it_caProtEncCert = 1;

const String SN_id_it_signKeyPairTypes = 'id-it-signKeyPairTypes';

const int NID_id_it_signKeyPairTypes = 299;

const int OBJ_id_it_signKeyPairTypes = 1;

const String SN_id_it_encKeyPairTypes = 'id-it-encKeyPairTypes';

const int NID_id_it_encKeyPairTypes = 300;

const int OBJ_id_it_encKeyPairTypes = 1;

const String SN_id_it_preferredSymmAlg = 'id-it-preferredSymmAlg';

const int NID_id_it_preferredSymmAlg = 301;

const int OBJ_id_it_preferredSymmAlg = 1;

const String SN_id_it_caKeyUpdateInfo = 'id-it-caKeyUpdateInfo';

const int NID_id_it_caKeyUpdateInfo = 302;

const int OBJ_id_it_caKeyUpdateInfo = 1;

const String SN_id_it_currentCRL = 'id-it-currentCRL';

const int NID_id_it_currentCRL = 303;

const int OBJ_id_it_currentCRL = 1;

const String SN_id_it_unsupportedOIDs = 'id-it-unsupportedOIDs';

const int NID_id_it_unsupportedOIDs = 304;

const int OBJ_id_it_unsupportedOIDs = 1;

const String SN_id_it_subscriptionRequest = 'id-it-subscriptionRequest';

const int NID_id_it_subscriptionRequest = 305;

const int OBJ_id_it_subscriptionRequest = 1;

const String SN_id_it_subscriptionResponse = 'id-it-subscriptionResponse';

const int NID_id_it_subscriptionResponse = 306;

const int OBJ_id_it_subscriptionResponse = 1;

const String SN_id_it_keyPairParamReq = 'id-it-keyPairParamReq';

const int NID_id_it_keyPairParamReq = 307;

const int OBJ_id_it_keyPairParamReq = 1;

const String SN_id_it_keyPairParamRep = 'id-it-keyPairParamRep';

const int NID_id_it_keyPairParamRep = 308;

const int OBJ_id_it_keyPairParamRep = 1;

const String SN_id_it_revPassphrase = 'id-it-revPassphrase';

const int NID_id_it_revPassphrase = 309;

const int OBJ_id_it_revPassphrase = 1;

const String SN_id_it_implicitConfirm = 'id-it-implicitConfirm';

const int NID_id_it_implicitConfirm = 310;

const int OBJ_id_it_implicitConfirm = 1;

const String SN_id_it_confirmWaitTime = 'id-it-confirmWaitTime';

const int NID_id_it_confirmWaitTime = 311;

const int OBJ_id_it_confirmWaitTime = 1;

const String SN_id_it_origPKIMessage = 'id-it-origPKIMessage';

const int NID_id_it_origPKIMessage = 312;

const int OBJ_id_it_origPKIMessage = 1;

const String SN_id_regCtrl = 'id-regCtrl';

const int NID_id_regCtrl = 313;

const int OBJ_id_regCtrl = 1;

const String SN_id_regInfo = 'id-regInfo';

const int NID_id_regInfo = 314;

const int OBJ_id_regInfo = 1;

const String SN_id_regCtrl_regToken = 'id-regCtrl-regToken';

const int NID_id_regCtrl_regToken = 315;

const int OBJ_id_regCtrl_regToken = 1;

const String SN_id_regCtrl_authenticator = 'id-regCtrl-authenticator';

const int NID_id_regCtrl_authenticator = 316;

const int OBJ_id_regCtrl_authenticator = 1;

const String SN_id_regCtrl_pkiPublicationInfo = 'id-regCtrl-pkiPublicationInfo';

const int NID_id_regCtrl_pkiPublicationInfo = 317;

const int OBJ_id_regCtrl_pkiPublicationInfo = 1;

const String SN_id_regCtrl_pkiArchiveOptions = 'id-regCtrl-pkiArchiveOptions';

const int NID_id_regCtrl_pkiArchiveOptions = 318;

const int OBJ_id_regCtrl_pkiArchiveOptions = 1;

const String SN_id_regCtrl_oldCertID = 'id-regCtrl-oldCertID';

const int NID_id_regCtrl_oldCertID = 319;

const int OBJ_id_regCtrl_oldCertID = 1;

const String SN_id_regCtrl_protocolEncrKey = 'id-regCtrl-protocolEncrKey';

const int NID_id_regCtrl_protocolEncrKey = 320;

const int OBJ_id_regCtrl_protocolEncrKey = 1;

const String SN_id_regInfo_utf8Pairs = 'id-regInfo-utf8Pairs';

const int NID_id_regInfo_utf8Pairs = 321;

const int OBJ_id_regInfo_utf8Pairs = 1;

const String SN_id_regInfo_certReq = 'id-regInfo-certReq';

const int NID_id_regInfo_certReq = 322;

const int OBJ_id_regInfo_certReq = 1;

const String SN_id_alg_des40 = 'id-alg-des40';

const int NID_id_alg_des40 = 323;

const int OBJ_id_alg_des40 = 1;

const String SN_id_alg_noSignature = 'id-alg-noSignature';

const int NID_id_alg_noSignature = 324;

const int OBJ_id_alg_noSignature = 1;

const String SN_id_alg_dh_sig_hmac_sha1 = 'id-alg-dh-sig-hmac-sha1';

const int NID_id_alg_dh_sig_hmac_sha1 = 325;

const int OBJ_id_alg_dh_sig_hmac_sha1 = 1;

const String SN_id_alg_dh_pop = 'id-alg-dh-pop';

const int NID_id_alg_dh_pop = 326;

const int OBJ_id_alg_dh_pop = 1;

const String SN_id_cmc_statusInfo = 'id-cmc-statusInfo';

const int NID_id_cmc_statusInfo = 327;

const int OBJ_id_cmc_statusInfo = 1;

const String SN_id_cmc_identification = 'id-cmc-identification';

const int NID_id_cmc_identification = 328;

const int OBJ_id_cmc_identification = 1;

const String SN_id_cmc_identityProof = 'id-cmc-identityProof';

const int NID_id_cmc_identityProof = 329;

const int OBJ_id_cmc_identityProof = 1;

const String SN_id_cmc_dataReturn = 'id-cmc-dataReturn';

const int NID_id_cmc_dataReturn = 330;

const int OBJ_id_cmc_dataReturn = 1;

const String SN_id_cmc_transactionId = 'id-cmc-transactionId';

const int NID_id_cmc_transactionId = 331;

const int OBJ_id_cmc_transactionId = 1;

const String SN_id_cmc_senderNonce = 'id-cmc-senderNonce';

const int NID_id_cmc_senderNonce = 332;

const int OBJ_id_cmc_senderNonce = 1;

const String SN_id_cmc_recipientNonce = 'id-cmc-recipientNonce';

const int NID_id_cmc_recipientNonce = 333;

const int OBJ_id_cmc_recipientNonce = 1;

const String SN_id_cmc_addExtensions = 'id-cmc-addExtensions';

const int NID_id_cmc_addExtensions = 334;

const int OBJ_id_cmc_addExtensions = 1;

const String SN_id_cmc_encryptedPOP = 'id-cmc-encryptedPOP';

const int NID_id_cmc_encryptedPOP = 335;

const int OBJ_id_cmc_encryptedPOP = 1;

const String SN_id_cmc_decryptedPOP = 'id-cmc-decryptedPOP';

const int NID_id_cmc_decryptedPOP = 336;

const int OBJ_id_cmc_decryptedPOP = 1;

const String SN_id_cmc_lraPOPWitness = 'id-cmc-lraPOPWitness';

const int NID_id_cmc_lraPOPWitness = 337;

const int OBJ_id_cmc_lraPOPWitness = 1;

const String SN_id_cmc_getCert = 'id-cmc-getCert';

const int NID_id_cmc_getCert = 338;

const int OBJ_id_cmc_getCert = 1;

const String SN_id_cmc_getCRL = 'id-cmc-getCRL';

const int NID_id_cmc_getCRL = 339;

const int OBJ_id_cmc_getCRL = 1;

const String SN_id_cmc_revokeRequest = 'id-cmc-revokeRequest';

const int NID_id_cmc_revokeRequest = 340;

const int OBJ_id_cmc_revokeRequest = 1;

const String SN_id_cmc_regInfo = 'id-cmc-regInfo';

const int NID_id_cmc_regInfo = 341;

const int OBJ_id_cmc_regInfo = 1;

const String SN_id_cmc_responseInfo = 'id-cmc-responseInfo';

const int NID_id_cmc_responseInfo = 342;

const int OBJ_id_cmc_responseInfo = 1;

const String SN_id_cmc_queryPending = 'id-cmc-queryPending';

const int NID_id_cmc_queryPending = 343;

const int OBJ_id_cmc_queryPending = 1;

const String SN_id_cmc_popLinkRandom = 'id-cmc-popLinkRandom';

const int NID_id_cmc_popLinkRandom = 344;

const int OBJ_id_cmc_popLinkRandom = 1;

const String SN_id_cmc_popLinkWitness = 'id-cmc-popLinkWitness';

const int NID_id_cmc_popLinkWitness = 345;

const int OBJ_id_cmc_popLinkWitness = 1;

const String SN_id_cmc_confirmCertAcceptance = 'id-cmc-confirmCertAcceptance';

const int NID_id_cmc_confirmCertAcceptance = 346;

const int OBJ_id_cmc_confirmCertAcceptance = 1;

const String SN_id_on_personalData = 'id-on-personalData';

const int NID_id_on_personalData = 347;

const int OBJ_id_on_personalData = 1;

const String SN_id_pda_dateOfBirth = 'id-pda-dateOfBirth';

const int NID_id_pda_dateOfBirth = 348;

const int OBJ_id_pda_dateOfBirth = 1;

const String SN_id_pda_placeOfBirth = 'id-pda-placeOfBirth';

const int NID_id_pda_placeOfBirth = 349;

const int OBJ_id_pda_placeOfBirth = 1;

const String SN_id_pda_gender = 'id-pda-gender';

const int NID_id_pda_gender = 351;

const int OBJ_id_pda_gender = 1;

const String SN_id_pda_countryOfCitizenship = 'id-pda-countryOfCitizenship';

const int NID_id_pda_countryOfCitizenship = 352;

const int OBJ_id_pda_countryOfCitizenship = 1;

const String SN_id_pda_countryOfResidence = 'id-pda-countryOfResidence';

const int NID_id_pda_countryOfResidence = 353;

const int OBJ_id_pda_countryOfResidence = 1;

const String SN_id_aca_authenticationInfo = 'id-aca-authenticationInfo';

const int NID_id_aca_authenticationInfo = 354;

const int OBJ_id_aca_authenticationInfo = 1;

const String SN_id_aca_accessIdentity = 'id-aca-accessIdentity';

const int NID_id_aca_accessIdentity = 355;

const int OBJ_id_aca_accessIdentity = 1;

const String SN_id_aca_chargingIdentity = 'id-aca-chargingIdentity';

const int NID_id_aca_chargingIdentity = 356;

const int OBJ_id_aca_chargingIdentity = 1;

const String SN_id_aca_group = 'id-aca-group';

const int NID_id_aca_group = 357;

const int OBJ_id_aca_group = 1;

const String SN_id_aca_role = 'id-aca-role';

const int NID_id_aca_role = 358;

const int OBJ_id_aca_role = 1;

const String SN_id_qcs_pkixQCSyntax_v1 = 'id-qcs-pkixQCSyntax-v1';

const int NID_id_qcs_pkixQCSyntax_v1 = 359;

const int OBJ_id_qcs_pkixQCSyntax_v1 = 1;

const String SN_id_cct_crs = 'id-cct-crs';

const int NID_id_cct_crs = 360;

const int OBJ_id_cct_crs = 1;

const String SN_id_cct_PKIData = 'id-cct-PKIData';

const int NID_id_cct_PKIData = 361;

const int OBJ_id_cct_PKIData = 1;

const String SN_id_cct_PKIResponse = 'id-cct-PKIResponse';

const int NID_id_cct_PKIResponse = 362;

const int OBJ_id_cct_PKIResponse = 1;

const String SN_ad_timeStamping = 'ad_timestamping';

const String LN_ad_timeStamping = 'AD Time Stamping';

const int NID_ad_timeStamping = 363;

const int OBJ_ad_timeStamping = 1;

const String SN_ad_dvcs = 'AD_DVCS';

const String LN_ad_dvcs = 'ad dvcs';

const int NID_ad_dvcs = 364;

const int OBJ_ad_dvcs = 1;

const String SN_id_pkix_OCSP_basic = 'basicOCSPResponse';

const String LN_id_pkix_OCSP_basic = 'Basic OCSP Response';

const int NID_id_pkix_OCSP_basic = 365;

const int OBJ_id_pkix_OCSP_basic = 1;

const String SN_id_pkix_OCSP_Nonce = 'Nonce';

const String LN_id_pkix_OCSP_Nonce = 'OCSP Nonce';

const int NID_id_pkix_OCSP_Nonce = 366;

const int OBJ_id_pkix_OCSP_Nonce = 1;

const String SN_id_pkix_OCSP_CrlID = 'CrlID';

const String LN_id_pkix_OCSP_CrlID = 'OCSP CRL ID';

const int NID_id_pkix_OCSP_CrlID = 367;

const int OBJ_id_pkix_OCSP_CrlID = 1;

const String SN_id_pkix_OCSP_acceptableResponses = 'acceptableResponses';

const String LN_id_pkix_OCSP_acceptableResponses = 'Acceptable OCSP Responses';

const int NID_id_pkix_OCSP_acceptableResponses = 368;

const int OBJ_id_pkix_OCSP_acceptableResponses = 1;

const String SN_id_pkix_OCSP_noCheck = 'noCheck';

const String LN_id_pkix_OCSP_noCheck = 'OCSP No Check';

const int NID_id_pkix_OCSP_noCheck = 369;

const int OBJ_id_pkix_OCSP_noCheck = 1;

const String SN_id_pkix_OCSP_archiveCutoff = 'archiveCutoff';

const String LN_id_pkix_OCSP_archiveCutoff = 'OCSP Archive Cutoff';

const int NID_id_pkix_OCSP_archiveCutoff = 370;

const int OBJ_id_pkix_OCSP_archiveCutoff = 1;

const String SN_id_pkix_OCSP_serviceLocator = 'serviceLocator';

const String LN_id_pkix_OCSP_serviceLocator = 'OCSP Service Locator';

const int NID_id_pkix_OCSP_serviceLocator = 371;

const int OBJ_id_pkix_OCSP_serviceLocator = 1;

const String SN_id_pkix_OCSP_extendedStatus = 'extendedStatus';

const String LN_id_pkix_OCSP_extendedStatus = 'Extended OCSP Status';

const int NID_id_pkix_OCSP_extendedStatus = 372;

const int OBJ_id_pkix_OCSP_extendedStatus = 1;

const String SN_id_pkix_OCSP_valid = 'valid';

const int NID_id_pkix_OCSP_valid = 373;

const int OBJ_id_pkix_OCSP_valid = 1;

const String SN_id_pkix_OCSP_path = 'path';

const int NID_id_pkix_OCSP_path = 374;

const int OBJ_id_pkix_OCSP_path = 1;

const String SN_id_pkix_OCSP_trustRoot = 'trustRoot';

const String LN_id_pkix_OCSP_trustRoot = 'Trust Root';

const int NID_id_pkix_OCSP_trustRoot = 375;

const int OBJ_id_pkix_OCSP_trustRoot = 1;

const String SN_algorithm = 'algorithm';

const String LN_algorithm = 'algorithm';

const int NID_algorithm = 376;

const int OBJ_algorithm = 1;

const String SN_rsaSignature = 'rsaSignature';

const int NID_rsaSignature = 377;

const int OBJ_rsaSignature = 1;

const String SN_X500algorithms = 'X500algorithms';

const String LN_X500algorithms = 'directory services - algorithms';

const int NID_X500algorithms = 378;

const int OBJ_X500algorithms = 2;

const String SN_org = 'ORG';

const String LN_org = 'org';

const int NID_org = 379;

const int OBJ_org = 1;

const String SN_dod = 'DOD';

const String LN_dod = 'dod';

const int NID_dod = 380;

const int OBJ_dod = 1;

const String SN_iana = 'IANA';

const String LN_iana = 'iana';

const int NID_iana = 381;

const int OBJ_iana = 1;

const String SN_Directory = 'directory';

const String LN_Directory = 'Directory';

const int NID_Directory = 382;

const int OBJ_Directory = 1;

const String SN_Management = 'mgmt';

const String LN_Management = 'Management';

const int NID_Management = 383;

const int OBJ_Management = 1;

const String SN_Experimental = 'experimental';

const String LN_Experimental = 'Experimental';

const int NID_Experimental = 384;

const int OBJ_Experimental = 1;

const String SN_Private = 'private';

const String LN_Private = 'Private';

const int NID_Private = 385;

const int OBJ_Private = 1;

const String SN_Security = 'security';

const String LN_Security = 'Security';

const int NID_Security = 386;

const int OBJ_Security = 1;

const String SN_SNMPv2 = 'snmpv2';

const String LN_SNMPv2 = 'SNMPv2';

const int NID_SNMPv2 = 387;

const int OBJ_SNMPv2 = 1;

const String LN_Mail = 'Mail';

const int NID_Mail = 388;

const int OBJ_Mail = 1;

const String SN_Enterprises = 'enterprises';

const String LN_Enterprises = 'Enterprises';

const int NID_Enterprises = 389;

const int OBJ_Enterprises = 1;

const String SN_dcObject = 'dcobject';

const String LN_dcObject = 'dcObject';

const int NID_dcObject = 390;

const int OBJ_dcObject = 1;

const String SN_domainComponent = 'DC';

const String LN_domainComponent = 'domainComponent';

const int NID_domainComponent = 391;

const int OBJ_domainComponent = 0;

const String SN_Domain = 'domain';

const String LN_Domain = 'Domain';

const int NID_Domain = 392;

const int OBJ_Domain = 0;

const String SN_selected_attribute_types = 'selected-attribute-types';

const String LN_selected_attribute_types = 'Selected Attribute Types';

const int NID_selected_attribute_types = 394;

const int OBJ_selected_attribute_types = 2;

const String SN_clearance = 'clearance';

const int NID_clearance = 395;

const int OBJ_clearance = 2;

const String SN_md4WithRSAEncryption = 'RSA-MD4';

const String LN_md4WithRSAEncryption = 'md4WithRSAEncryption';

const int NID_md4WithRSAEncryption = 396;

const int OBJ_md4WithRSAEncryption = 1;

const String SN_ac_proxying = 'ac-proxying';

const int NID_ac_proxying = 397;

const int OBJ_ac_proxying = 1;

const String SN_sinfo_access = 'subjectInfoAccess';

const String LN_sinfo_access = 'Subject Information Access';

const int NID_sinfo_access = 398;

const int OBJ_sinfo_access = 1;

const String SN_id_aca_encAttrs = 'id-aca-encAttrs';

const int NID_id_aca_encAttrs = 399;

const int OBJ_id_aca_encAttrs = 1;

const String SN_role = 'role';

const String LN_role = 'role';

const int NID_role = 400;

const int OBJ_role = 2;

const String SN_policy_constraints = 'policyConstraints';

const String LN_policy_constraints = 'X509v3 Policy Constraints';

const int NID_policy_constraints = 401;

const int OBJ_policy_constraints = 2;

const String SN_target_information = 'targetInformation';

const String LN_target_information = 'X509v3 AC Targeting';

const int NID_target_information = 402;

const int OBJ_target_information = 2;

const String SN_no_rev_avail = 'noRevAvail';

const String LN_no_rev_avail = 'X509v3 No Revocation Available';

const int NID_no_rev_avail = 403;

const int OBJ_no_rev_avail = 2;

const String SN_ansi_X9_62 = 'ansi-X9-62';

const String LN_ansi_X9_62 = 'ANSI X9.62';

const int NID_ansi_X9_62 = 405;

const int OBJ_ansi_X9_62 = 1;

const String SN_X9_62_prime_field = 'prime-field';

const int NID_X9_62_prime_field = 406;

const int OBJ_X9_62_prime_field = 1;

const String SN_X9_62_characteristic_two_field = 'characteristic-two-field';

const int NID_X9_62_characteristic_two_field = 407;

const int OBJ_X9_62_characteristic_two_field = 1;

const String SN_X9_62_id_ecPublicKey = 'id-ecPublicKey';

const int NID_X9_62_id_ecPublicKey = 408;

const int OBJ_X9_62_id_ecPublicKey = 1;

const String SN_X9_62_prime192v1 = 'prime192v1';

const int NID_X9_62_prime192v1 = 409;

const int OBJ_X9_62_prime192v1 = 1;

const String SN_X9_62_prime192v2 = 'prime192v2';

const int NID_X9_62_prime192v2 = 410;

const int OBJ_X9_62_prime192v2 = 1;

const String SN_X9_62_prime192v3 = 'prime192v3';

const int NID_X9_62_prime192v3 = 411;

const int OBJ_X9_62_prime192v3 = 1;

const String SN_X9_62_prime239v1 = 'prime239v1';

const int NID_X9_62_prime239v1 = 412;

const int OBJ_X9_62_prime239v1 = 1;

const String SN_X9_62_prime239v2 = 'prime239v2';

const int NID_X9_62_prime239v2 = 413;

const int OBJ_X9_62_prime239v2 = 1;

const String SN_X9_62_prime239v3 = 'prime239v3';

const int NID_X9_62_prime239v3 = 414;

const int OBJ_X9_62_prime239v3 = 1;

const String SN_X9_62_prime256v1 = 'prime256v1';

const int NID_X9_62_prime256v1 = 415;

const int OBJ_X9_62_prime256v1 = 1;

const String SN_ecdsa_with_SHA1 = 'ecdsa-with-SHA1';

const int NID_ecdsa_with_SHA1 = 416;

const int OBJ_ecdsa_with_SHA1 = 1;

const String SN_ms_csp_name = 'CSPName';

const String LN_ms_csp_name = 'Microsoft CSP Name';

const int NID_ms_csp_name = 417;

const int OBJ_ms_csp_name = 1;

const String SN_aes_128_ecb = 'AES-128-ECB';

const String LN_aes_128_ecb = 'aes-128-ecb';

const int NID_aes_128_ecb = 418;

const int OBJ_aes_128_ecb = 2;

const String SN_aes_128_cbc = 'AES-128-CBC';

const String LN_aes_128_cbc = 'aes-128-cbc';

const int NID_aes_128_cbc = 419;

const int OBJ_aes_128_cbc = 2;

const String SN_aes_128_ofb128 = 'AES-128-OFB';

const String LN_aes_128_ofb128 = 'aes-128-ofb';

const int NID_aes_128_ofb128 = 420;

const int OBJ_aes_128_ofb128 = 2;

const String SN_aes_128_cfb128 = 'AES-128-CFB';

const String LN_aes_128_cfb128 = 'aes-128-cfb';

const int NID_aes_128_cfb128 = 421;

const int OBJ_aes_128_cfb128 = 2;

const String SN_aes_192_ecb = 'AES-192-ECB';

const String LN_aes_192_ecb = 'aes-192-ecb';

const int NID_aes_192_ecb = 422;

const int OBJ_aes_192_ecb = 2;

const String SN_aes_192_cbc = 'AES-192-CBC';

const String LN_aes_192_cbc = 'aes-192-cbc';

const int NID_aes_192_cbc = 423;

const int OBJ_aes_192_cbc = 2;

const String SN_aes_192_ofb128 = 'AES-192-OFB';

const String LN_aes_192_ofb128 = 'aes-192-ofb';

const int NID_aes_192_ofb128 = 424;

const int OBJ_aes_192_ofb128 = 2;

const String SN_aes_192_cfb128 = 'AES-192-CFB';

const String LN_aes_192_cfb128 = 'aes-192-cfb';

const int NID_aes_192_cfb128 = 425;

const int OBJ_aes_192_cfb128 = 2;

const String SN_aes_256_ecb = 'AES-256-ECB';

const String LN_aes_256_ecb = 'aes-256-ecb';

const int NID_aes_256_ecb = 426;

const int OBJ_aes_256_ecb = 2;

const String SN_aes_256_cbc = 'AES-256-CBC';

const String LN_aes_256_cbc = 'aes-256-cbc';

const int NID_aes_256_cbc = 427;

const int OBJ_aes_256_cbc = 2;

const String SN_aes_256_ofb128 = 'AES-256-OFB';

const String LN_aes_256_ofb128 = 'aes-256-ofb';

const int NID_aes_256_ofb128 = 428;

const int OBJ_aes_256_ofb128 = 2;

const String SN_aes_256_cfb128 = 'AES-256-CFB';

const String LN_aes_256_cfb128 = 'aes-256-cfb';

const int NID_aes_256_cfb128 = 429;

const int OBJ_aes_256_cfb128 = 2;

const String SN_hold_instruction_code = 'holdInstructionCode';

const String LN_hold_instruction_code = 'Hold Instruction Code';

const int NID_hold_instruction_code = 430;

const int OBJ_hold_instruction_code = 2;

const String SN_hold_instruction_none = 'holdInstructionNone';

const String LN_hold_instruction_none = 'Hold Instruction None';

const int NID_hold_instruction_none = 431;

const int OBJ_hold_instruction_none = 1;

const String SN_hold_instruction_call_issuer = 'holdInstructionCallIssuer';

const String LN_hold_instruction_call_issuer = 'Hold Instruction Call Issuer';

const int NID_hold_instruction_call_issuer = 432;

const int OBJ_hold_instruction_call_issuer = 1;

const String SN_hold_instruction_reject = 'holdInstructionReject';

const String LN_hold_instruction_reject = 'Hold Instruction Reject';

const int NID_hold_instruction_reject = 433;

const int OBJ_hold_instruction_reject = 1;

const String SN_data = 'data';

const int NID_data = 434;

const int OBJ_data = 0;

const String SN_pss = 'pss';

const int NID_pss = 435;

const int OBJ_pss = 0;

const String SN_ucl = 'ucl';

const int NID_ucl = 436;

const int OBJ_ucl = 0;

const String SN_pilot = 'pilot';

const int NID_pilot = 437;

const int OBJ_pilot = 0;

const String LN_pilotAttributeType = 'pilotAttributeType';

const int NID_pilotAttributeType = 438;

const int OBJ_pilotAttributeType = 0;

const String LN_pilotAttributeSyntax = 'pilotAttributeSyntax';

const int NID_pilotAttributeSyntax = 439;

const int OBJ_pilotAttributeSyntax = 0;

const String LN_pilotObjectClass = 'pilotObjectClass';

const int NID_pilotObjectClass = 440;

const int OBJ_pilotObjectClass = 0;

const String LN_pilotGroups = 'pilotGroups';

const int NID_pilotGroups = 441;

const int OBJ_pilotGroups = 0;

const String LN_iA5StringSyntax = 'iA5StringSyntax';

const int NID_iA5StringSyntax = 442;

const int OBJ_iA5StringSyntax = 0;

const String LN_caseIgnoreIA5StringSyntax = 'caseIgnoreIA5StringSyntax';

const int NID_caseIgnoreIA5StringSyntax = 443;

const int OBJ_caseIgnoreIA5StringSyntax = 0;

const String LN_pilotObject = 'pilotObject';

const int NID_pilotObject = 444;

const int OBJ_pilotObject = 0;

const String LN_pilotPerson = 'pilotPerson';

const int NID_pilotPerson = 445;

const int OBJ_pilotPerson = 0;

const String SN_account = 'account';

const int NID_account = 446;

const int OBJ_account = 0;

const String SN_document = 'document';

const int NID_document = 447;

const int OBJ_document = 0;

const String SN_room = 'room';

const int NID_room = 448;

const int OBJ_room = 0;

const String LN_documentSeries = 'documentSeries';

const int NID_documentSeries = 449;

const int OBJ_documentSeries = 0;

const String LN_rFC822localPart = 'rFC822localPart';

const int NID_rFC822localPart = 450;

const int OBJ_rFC822localPart = 0;

const String LN_dNSDomain = 'dNSDomain';

const int NID_dNSDomain = 451;

const int OBJ_dNSDomain = 0;

const String LN_domainRelatedObject = 'domainRelatedObject';

const int NID_domainRelatedObject = 452;

const int OBJ_domainRelatedObject = 0;

const String LN_friendlyCountry = 'friendlyCountry';

const int NID_friendlyCountry = 453;

const int OBJ_friendlyCountry = 0;

const String LN_simpleSecurityObject = 'simpleSecurityObject';

const int NID_simpleSecurityObject = 454;

const int OBJ_simpleSecurityObject = 0;

const String LN_pilotOrganization = 'pilotOrganization';

const int NID_pilotOrganization = 455;

const int OBJ_pilotOrganization = 0;

const String LN_pilotDSA = 'pilotDSA';

const int NID_pilotDSA = 456;

const int OBJ_pilotDSA = 0;

const String LN_qualityLabelledData = 'qualityLabelledData';

const int NID_qualityLabelledData = 457;

const int OBJ_qualityLabelledData = 0;

const String SN_userId = 'UID';

const String LN_userId = 'userId';

const int NID_userId = 458;

const int OBJ_userId = 0;

const String LN_textEncodedORAddress = 'textEncodedORAddress';

const int NID_textEncodedORAddress = 459;

const int OBJ_textEncodedORAddress = 0;

const String SN_rfc822Mailbox = 'mail';

const String LN_rfc822Mailbox = 'rfc822Mailbox';

const int NID_rfc822Mailbox = 460;

const int OBJ_rfc822Mailbox = 0;

const String SN_info = 'info';

const int NID_info = 461;

const int OBJ_info = 0;

const String LN_favouriteDrink = 'favouriteDrink';

const int NID_favouriteDrink = 462;

const int OBJ_favouriteDrink = 0;

const String LN_roomNumber = 'roomNumber';

const int NID_roomNumber = 463;

const int OBJ_roomNumber = 0;

const String SN_photo = 'photo';

const int NID_photo = 464;

const int OBJ_photo = 0;

const String LN_userClass = 'userClass';

const int NID_userClass = 465;

const int OBJ_userClass = 0;

const String SN_host = 'host';

const int NID_host = 466;

const int OBJ_host = 0;

const String SN_manager = 'manager';

const int NID_manager = 467;

const int OBJ_manager = 0;

const String LN_documentIdentifier = 'documentIdentifier';

const int NID_documentIdentifier = 468;

const int OBJ_documentIdentifier = 0;

const String LN_documentTitle = 'documentTitle';

const int NID_documentTitle = 469;

const int OBJ_documentTitle = 0;

const String LN_documentVersion = 'documentVersion';

const int NID_documentVersion = 470;

const int OBJ_documentVersion = 0;

const String LN_documentAuthor = 'documentAuthor';

const int NID_documentAuthor = 471;

const int OBJ_documentAuthor = 0;

const String LN_documentLocation = 'documentLocation';

const int NID_documentLocation = 472;

const int OBJ_documentLocation = 0;

const String LN_homeTelephoneNumber = 'homeTelephoneNumber';

const int NID_homeTelephoneNumber = 473;

const int OBJ_homeTelephoneNumber = 0;

const String SN_secretary = 'secretary';

const int NID_secretary = 474;

const int OBJ_secretary = 0;

const String LN_otherMailbox = 'otherMailbox';

const int NID_otherMailbox = 475;

const int OBJ_otherMailbox = 0;

const String LN_lastModifiedTime = 'lastModifiedTime';

const int NID_lastModifiedTime = 476;

const int OBJ_lastModifiedTime = 0;

const String LN_lastModifiedBy = 'lastModifiedBy';

const int NID_lastModifiedBy = 477;

const int OBJ_lastModifiedBy = 0;

const String LN_aRecord = 'aRecord';

const int NID_aRecord = 478;

const int OBJ_aRecord = 0;

const String LN_pilotAttributeType27 = 'pilotAttributeType27';

const int NID_pilotAttributeType27 = 479;

const int OBJ_pilotAttributeType27 = 0;

const String LN_mXRecord = 'mXRecord';

const int NID_mXRecord = 480;

const int OBJ_mXRecord = 0;

const String LN_nSRecord = 'nSRecord';

const int NID_nSRecord = 481;

const int OBJ_nSRecord = 0;

const String LN_sOARecord = 'sOARecord';

const int NID_sOARecord = 482;

const int OBJ_sOARecord = 0;

const String LN_cNAMERecord = 'cNAMERecord';

const int NID_cNAMERecord = 483;

const int OBJ_cNAMERecord = 0;

const String LN_associatedDomain = 'associatedDomain';

const int NID_associatedDomain = 484;

const int OBJ_associatedDomain = 0;

const String LN_associatedName = 'associatedName';

const int NID_associatedName = 485;

const int OBJ_associatedName = 0;

const String LN_homePostalAddress = 'homePostalAddress';

const int NID_homePostalAddress = 486;

const int OBJ_homePostalAddress = 0;

const String LN_personalTitle = 'personalTitle';

const int NID_personalTitle = 487;

const int OBJ_personalTitle = 0;

const String LN_mobileTelephoneNumber = 'mobileTelephoneNumber';

const int NID_mobileTelephoneNumber = 488;

const int OBJ_mobileTelephoneNumber = 0;

const String LN_pagerTelephoneNumber = 'pagerTelephoneNumber';

const int NID_pagerTelephoneNumber = 489;

const int OBJ_pagerTelephoneNumber = 0;

const String LN_friendlyCountryName = 'friendlyCountryName';

const int NID_friendlyCountryName = 490;

const int OBJ_friendlyCountryName = 0;

const String LN_organizationalStatus = 'organizationalStatus';

const int NID_organizationalStatus = 491;

const int OBJ_organizationalStatus = 0;

const String LN_janetMailbox = 'janetMailbox';

const int NID_janetMailbox = 492;

const int OBJ_janetMailbox = 0;

const String LN_mailPreferenceOption = 'mailPreferenceOption';

const int NID_mailPreferenceOption = 493;

const int OBJ_mailPreferenceOption = 0;

const String LN_buildingName = 'buildingName';

const int NID_buildingName = 494;

const int OBJ_buildingName = 0;

const String LN_dSAQuality = 'dSAQuality';

const int NID_dSAQuality = 495;

const int OBJ_dSAQuality = 0;

const String LN_singleLevelQuality = 'singleLevelQuality';

const int NID_singleLevelQuality = 496;

const int OBJ_singleLevelQuality = 0;

const String LN_subtreeMinimumQuality = 'subtreeMinimumQuality';

const int NID_subtreeMinimumQuality = 497;

const int OBJ_subtreeMinimumQuality = 0;

const String LN_subtreeMaximumQuality = 'subtreeMaximumQuality';

const int NID_subtreeMaximumQuality = 498;

const int OBJ_subtreeMaximumQuality = 0;

const String LN_personalSignature = 'personalSignature';

const int NID_personalSignature = 499;

const int OBJ_personalSignature = 0;

const String LN_dITRedirect = 'dITRedirect';

const int NID_dITRedirect = 500;

const int OBJ_dITRedirect = 0;

const String SN_audio = 'audio';

const int NID_audio = 501;

const int OBJ_audio = 0;

const String LN_documentPublisher = 'documentPublisher';

const int NID_documentPublisher = 502;

const int OBJ_documentPublisher = 0;

const String LN_x500UniqueIdentifier = 'x500UniqueIdentifier';

const int NID_x500UniqueIdentifier = 503;

const int OBJ_x500UniqueIdentifier = 2;

const String SN_mime_mhs = 'mime-mhs';

const String LN_mime_mhs = 'MIME MHS';

const int NID_mime_mhs = 504;

const int OBJ_mime_mhs = 1;

const String SN_mime_mhs_headings = 'mime-mhs-headings';

const String LN_mime_mhs_headings = 'mime-mhs-headings';

const int NID_mime_mhs_headings = 505;

const int OBJ_mime_mhs_headings = 1;

const String SN_mime_mhs_bodies = 'mime-mhs-bodies';

const String LN_mime_mhs_bodies = 'mime-mhs-bodies';

const int NID_mime_mhs_bodies = 506;

const int OBJ_mime_mhs_bodies = 1;

const String SN_id_hex_partial_message = 'id-hex-partial-message';

const String LN_id_hex_partial_message = 'id-hex-partial-message';

const int NID_id_hex_partial_message = 507;

const int OBJ_id_hex_partial_message = 1;

const String SN_id_hex_multipart_message = 'id-hex-multipart-message';

const String LN_id_hex_multipart_message = 'id-hex-multipart-message';

const int NID_id_hex_multipart_message = 508;

const int OBJ_id_hex_multipart_message = 1;

const String LN_generationQualifier = 'generationQualifier';

const int NID_generationQualifier = 509;

const int OBJ_generationQualifier = 2;

const String LN_pseudonym = 'pseudonym';

const int NID_pseudonym = 510;

const int OBJ_pseudonym = 2;

const String SN_id_set = 'id-set';

const String LN_id_set = 'Secure Electronic Transactions';

const int NID_id_set = 512;

const int OBJ_id_set = 2;

const String SN_set_ctype = 'set-ctype';

const String LN_set_ctype = 'content types';

const int NID_set_ctype = 513;

const int OBJ_set_ctype = 2;

const String SN_set_msgExt = 'set-msgExt';

const String LN_set_msgExt = 'message extensions';

const int NID_set_msgExt = 514;

const int OBJ_set_msgExt = 2;

const String SN_set_attr = 'set-attr';

const int NID_set_attr = 515;

const int OBJ_set_attr = 2;

const String SN_set_policy = 'set-policy';

const int NID_set_policy = 516;

const int OBJ_set_policy = 2;

const String SN_set_certExt = 'set-certExt';

const String LN_set_certExt = 'certificate extensions';

const int NID_set_certExt = 517;

const int OBJ_set_certExt = 2;

const String SN_set_brand = 'set-brand';

const int NID_set_brand = 518;

const int OBJ_set_brand = 2;

const String SN_setct_PANData = 'setct-PANData';

const int NID_setct_PANData = 519;

const int OBJ_setct_PANData = 2;

const String SN_setct_PANToken = 'setct-PANToken';

const int NID_setct_PANToken = 520;

const int OBJ_setct_PANToken = 2;

const String SN_setct_PANOnly = 'setct-PANOnly';

const int NID_setct_PANOnly = 521;

const int OBJ_setct_PANOnly = 2;

const String SN_setct_OIData = 'setct-OIData';

const int NID_setct_OIData = 522;

const int OBJ_setct_OIData = 2;

const String SN_setct_PI = 'setct-PI';

const int NID_setct_PI = 523;

const int OBJ_setct_PI = 2;

const String SN_setct_PIData = 'setct-PIData';

const int NID_setct_PIData = 524;

const int OBJ_setct_PIData = 2;

const String SN_setct_PIDataUnsigned = 'setct-PIDataUnsigned';

const int NID_setct_PIDataUnsigned = 525;

const int OBJ_setct_PIDataUnsigned = 2;

const String SN_setct_HODInput = 'setct-HODInput';

const int NID_setct_HODInput = 526;

const int OBJ_setct_HODInput = 2;

const String SN_setct_AuthResBaggage = 'setct-AuthResBaggage';

const int NID_setct_AuthResBaggage = 527;

const int OBJ_setct_AuthResBaggage = 2;

const String SN_setct_AuthRevReqBaggage = 'setct-AuthRevReqBaggage';

const int NID_setct_AuthRevReqBaggage = 528;

const int OBJ_setct_AuthRevReqBaggage = 2;

const String SN_setct_AuthRevResBaggage = 'setct-AuthRevResBaggage';

const int NID_setct_AuthRevResBaggage = 529;

const int OBJ_setct_AuthRevResBaggage = 2;

const String SN_setct_CapTokenSeq = 'setct-CapTokenSeq';

const int NID_setct_CapTokenSeq = 530;

const int OBJ_setct_CapTokenSeq = 2;

const String SN_setct_PInitResData = 'setct-PInitResData';

const int NID_setct_PInitResData = 531;

const int OBJ_setct_PInitResData = 2;

const String SN_setct_PI_TBS = 'setct-PI-TBS';

const int NID_setct_PI_TBS = 532;

const int OBJ_setct_PI_TBS = 2;

const String SN_setct_PResData = 'setct-PResData';

const int NID_setct_PResData = 533;

const int OBJ_setct_PResData = 2;

const String SN_setct_AuthReqTBS = 'setct-AuthReqTBS';

const int NID_setct_AuthReqTBS = 534;

const int OBJ_setct_AuthReqTBS = 2;

const String SN_setct_AuthResTBS = 'setct-AuthResTBS';

const int NID_setct_AuthResTBS = 535;

const int OBJ_setct_AuthResTBS = 2;

const String SN_setct_AuthResTBSX = 'setct-AuthResTBSX';

const int NID_setct_AuthResTBSX = 536;

const int OBJ_setct_AuthResTBSX = 2;

const String SN_setct_AuthTokenTBS = 'setct-AuthTokenTBS';

const int NID_setct_AuthTokenTBS = 537;

const int OBJ_setct_AuthTokenTBS = 2;

const String SN_setct_CapTokenData = 'setct-CapTokenData';

const int NID_setct_CapTokenData = 538;

const int OBJ_setct_CapTokenData = 2;

const String SN_setct_CapTokenTBS = 'setct-CapTokenTBS';

const int NID_setct_CapTokenTBS = 539;

const int OBJ_setct_CapTokenTBS = 2;

const String SN_setct_AcqCardCodeMsg = 'setct-AcqCardCodeMsg';

const int NID_setct_AcqCardCodeMsg = 540;

const int OBJ_setct_AcqCardCodeMsg = 2;

const String SN_setct_AuthRevReqTBS = 'setct-AuthRevReqTBS';

const int NID_setct_AuthRevReqTBS = 541;

const int OBJ_setct_AuthRevReqTBS = 2;

const String SN_setct_AuthRevResData = 'setct-AuthRevResData';

const int NID_setct_AuthRevResData = 542;

const int OBJ_setct_AuthRevResData = 2;

const String SN_setct_AuthRevResTBS = 'setct-AuthRevResTBS';

const int NID_setct_AuthRevResTBS = 543;

const int OBJ_setct_AuthRevResTBS = 2;

const String SN_setct_CapReqTBS = 'setct-CapReqTBS';

const int NID_setct_CapReqTBS = 544;

const int OBJ_setct_CapReqTBS = 2;

const String SN_setct_CapReqTBSX = 'setct-CapReqTBSX';

const int NID_setct_CapReqTBSX = 545;

const int OBJ_setct_CapReqTBSX = 2;

const String SN_setct_CapResData = 'setct-CapResData';

const int NID_setct_CapResData = 546;

const int OBJ_setct_CapResData = 2;

const String SN_setct_CapRevReqTBS = 'setct-CapRevReqTBS';

const int NID_setct_CapRevReqTBS = 547;

const int OBJ_setct_CapRevReqTBS = 2;

const String SN_setct_CapRevReqTBSX = 'setct-CapRevReqTBSX';

const int NID_setct_CapRevReqTBSX = 548;

const int OBJ_setct_CapRevReqTBSX = 2;

const String SN_setct_CapRevResData = 'setct-CapRevResData';

const int NID_setct_CapRevResData = 549;

const int OBJ_setct_CapRevResData = 2;

const String SN_setct_CredReqTBS = 'setct-CredReqTBS';

const int NID_setct_CredReqTBS = 550;

const int OBJ_setct_CredReqTBS = 2;

const String SN_setct_CredReqTBSX = 'setct-CredReqTBSX';

const int NID_setct_CredReqTBSX = 551;

const int OBJ_setct_CredReqTBSX = 2;

const String SN_setct_CredResData = 'setct-CredResData';

const int NID_setct_CredResData = 552;

const int OBJ_setct_CredResData = 2;

const String SN_setct_CredRevReqTBS = 'setct-CredRevReqTBS';

const int NID_setct_CredRevReqTBS = 553;

const int OBJ_setct_CredRevReqTBS = 2;

const String SN_setct_CredRevReqTBSX = 'setct-CredRevReqTBSX';

const int NID_setct_CredRevReqTBSX = 554;

const int OBJ_setct_CredRevReqTBSX = 2;

const String SN_setct_CredRevResData = 'setct-CredRevResData';

const int NID_setct_CredRevResData = 555;

const int OBJ_setct_CredRevResData = 2;

const String SN_setct_PCertReqData = 'setct-PCertReqData';

const int NID_setct_PCertReqData = 556;

const int OBJ_setct_PCertReqData = 2;

const String SN_setct_PCertResTBS = 'setct-PCertResTBS';

const int NID_setct_PCertResTBS = 557;

const int OBJ_setct_PCertResTBS = 2;

const String SN_setct_BatchAdminReqData = 'setct-BatchAdminReqData';

const int NID_setct_BatchAdminReqData = 558;

const int OBJ_setct_BatchAdminReqData = 2;

const String SN_setct_BatchAdminResData = 'setct-BatchAdminResData';

const int NID_setct_BatchAdminResData = 559;

const int OBJ_setct_BatchAdminResData = 2;

const String SN_setct_CardCInitResTBS = 'setct-CardCInitResTBS';

const int NID_setct_CardCInitResTBS = 560;

const int OBJ_setct_CardCInitResTBS = 2;

const String SN_setct_MeAqCInitResTBS = 'setct-MeAqCInitResTBS';

const int NID_setct_MeAqCInitResTBS = 561;

const int OBJ_setct_MeAqCInitResTBS = 2;

const String SN_setct_RegFormResTBS = 'setct-RegFormResTBS';

const int NID_setct_RegFormResTBS = 562;

const int OBJ_setct_RegFormResTBS = 2;

const String SN_setct_CertReqData = 'setct-CertReqData';

const int NID_setct_CertReqData = 563;

const int OBJ_setct_CertReqData = 2;

const String SN_setct_CertReqTBS = 'setct-CertReqTBS';

const int NID_setct_CertReqTBS = 564;

const int OBJ_setct_CertReqTBS = 2;

const String SN_setct_CertResData = 'setct-CertResData';

const int NID_setct_CertResData = 565;

const int OBJ_setct_CertResData = 2;

const String SN_setct_CertInqReqTBS = 'setct-CertInqReqTBS';

const int NID_setct_CertInqReqTBS = 566;

const int OBJ_setct_CertInqReqTBS = 2;

const String SN_setct_ErrorTBS = 'setct-ErrorTBS';

const int NID_setct_ErrorTBS = 567;

const int OBJ_setct_ErrorTBS = 2;

const String SN_setct_PIDualSignedTBE = 'setct-PIDualSignedTBE';

const int NID_setct_PIDualSignedTBE = 568;

const int OBJ_setct_PIDualSignedTBE = 2;

const String SN_setct_PIUnsignedTBE = 'setct-PIUnsignedTBE';

const int NID_setct_PIUnsignedTBE = 569;

const int OBJ_setct_PIUnsignedTBE = 2;

const String SN_setct_AuthReqTBE = 'setct-AuthReqTBE';

const int NID_setct_AuthReqTBE = 570;

const int OBJ_setct_AuthReqTBE = 2;

const String SN_setct_AuthResTBE = 'setct-AuthResTBE';

const int NID_setct_AuthResTBE = 571;

const int OBJ_setct_AuthResTBE = 2;

const String SN_setct_AuthResTBEX = 'setct-AuthResTBEX';

const int NID_setct_AuthResTBEX = 572;

const int OBJ_setct_AuthResTBEX = 2;

const String SN_setct_AuthTokenTBE = 'setct-AuthTokenTBE';

const int NID_setct_AuthTokenTBE = 573;

const int OBJ_setct_AuthTokenTBE = 2;

const String SN_setct_CapTokenTBE = 'setct-CapTokenTBE';

const int NID_setct_CapTokenTBE = 574;

const int OBJ_setct_CapTokenTBE = 2;

const String SN_setct_CapTokenTBEX = 'setct-CapTokenTBEX';

const int NID_setct_CapTokenTBEX = 575;

const int OBJ_setct_CapTokenTBEX = 2;

const String SN_setct_AcqCardCodeMsgTBE = 'setct-AcqCardCodeMsgTBE';

const int NID_setct_AcqCardCodeMsgTBE = 576;

const int OBJ_setct_AcqCardCodeMsgTBE = 2;

const String SN_setct_AuthRevReqTBE = 'setct-AuthRevReqTBE';

const int NID_setct_AuthRevReqTBE = 577;

const int OBJ_setct_AuthRevReqTBE = 2;

const String SN_setct_AuthRevResTBE = 'setct-AuthRevResTBE';

const int NID_setct_AuthRevResTBE = 578;

const int OBJ_setct_AuthRevResTBE = 2;

const String SN_setct_AuthRevResTBEB = 'setct-AuthRevResTBEB';

const int NID_setct_AuthRevResTBEB = 579;

const int OBJ_setct_AuthRevResTBEB = 2;

const String SN_setct_CapReqTBE = 'setct-CapReqTBE';

const int NID_setct_CapReqTBE = 580;

const int OBJ_setct_CapReqTBE = 2;

const String SN_setct_CapReqTBEX = 'setct-CapReqTBEX';

const int NID_setct_CapReqTBEX = 581;

const int OBJ_setct_CapReqTBEX = 2;

const String SN_setct_CapResTBE = 'setct-CapResTBE';

const int NID_setct_CapResTBE = 582;

const int OBJ_setct_CapResTBE = 2;

const String SN_setct_CapRevReqTBE = 'setct-CapRevReqTBE';

const int NID_setct_CapRevReqTBE = 583;

const int OBJ_setct_CapRevReqTBE = 2;

const String SN_setct_CapRevReqTBEX = 'setct-CapRevReqTBEX';

const int NID_setct_CapRevReqTBEX = 584;

const int OBJ_setct_CapRevReqTBEX = 2;

const String SN_setct_CapRevResTBE = 'setct-CapRevResTBE';

const int NID_setct_CapRevResTBE = 585;

const int OBJ_setct_CapRevResTBE = 2;

const String SN_setct_CredReqTBE = 'setct-CredReqTBE';

const int NID_setct_CredReqTBE = 586;

const int OBJ_setct_CredReqTBE = 2;

const String SN_setct_CredReqTBEX = 'setct-CredReqTBEX';

const int NID_setct_CredReqTBEX = 587;

const int OBJ_setct_CredReqTBEX = 2;

const String SN_setct_CredResTBE = 'setct-CredResTBE';

const int NID_setct_CredResTBE = 588;

const int OBJ_setct_CredResTBE = 2;

const String SN_setct_CredRevReqTBE = 'setct-CredRevReqTBE';

const int NID_setct_CredRevReqTBE = 589;

const int OBJ_setct_CredRevReqTBE = 2;

const String SN_setct_CredRevReqTBEX = 'setct-CredRevReqTBEX';

const int NID_setct_CredRevReqTBEX = 590;

const int OBJ_setct_CredRevReqTBEX = 2;

const String SN_setct_CredRevResTBE = 'setct-CredRevResTBE';

const int NID_setct_CredRevResTBE = 591;

const int OBJ_setct_CredRevResTBE = 2;

const String SN_setct_BatchAdminReqTBE = 'setct-BatchAdminReqTBE';

const int NID_setct_BatchAdminReqTBE = 592;

const int OBJ_setct_BatchAdminReqTBE = 2;

const String SN_setct_BatchAdminResTBE = 'setct-BatchAdminResTBE';

const int NID_setct_BatchAdminResTBE = 593;

const int OBJ_setct_BatchAdminResTBE = 2;

const String SN_setct_RegFormReqTBE = 'setct-RegFormReqTBE';

const int NID_setct_RegFormReqTBE = 594;

const int OBJ_setct_RegFormReqTBE = 2;

const String SN_setct_CertReqTBE = 'setct-CertReqTBE';

const int NID_setct_CertReqTBE = 595;

const int OBJ_setct_CertReqTBE = 2;

const String SN_setct_CertReqTBEX = 'setct-CertReqTBEX';

const int NID_setct_CertReqTBEX = 596;

const int OBJ_setct_CertReqTBEX = 2;

const String SN_setct_CertResTBE = 'setct-CertResTBE';

const int NID_setct_CertResTBE = 597;

const int OBJ_setct_CertResTBE = 2;

const String SN_setct_CRLNotificationTBS = 'setct-CRLNotificationTBS';

const int NID_setct_CRLNotificationTBS = 598;

const int OBJ_setct_CRLNotificationTBS = 2;

const String SN_setct_CRLNotificationResTBS = 'setct-CRLNotificationResTBS';

const int NID_setct_CRLNotificationResTBS = 599;

const int OBJ_setct_CRLNotificationResTBS = 2;

const String SN_setct_BCIDistributionTBS = 'setct-BCIDistributionTBS';

const int NID_setct_BCIDistributionTBS = 600;

const int OBJ_setct_BCIDistributionTBS = 2;

const String SN_setext_genCrypt = 'setext-genCrypt';

const String LN_setext_genCrypt = 'generic cryptogram';

const int NID_setext_genCrypt = 601;

const int OBJ_setext_genCrypt = 2;

const String SN_setext_miAuth = 'setext-miAuth';

const String LN_setext_miAuth = 'merchant initiated auth';

const int NID_setext_miAuth = 602;

const int OBJ_setext_miAuth = 2;

const String SN_setext_pinSecure = 'setext-pinSecure';

const int NID_setext_pinSecure = 603;

const int OBJ_setext_pinSecure = 2;

const String SN_setext_pinAny = 'setext-pinAny';

const int NID_setext_pinAny = 604;

const int OBJ_setext_pinAny = 2;

const String SN_setext_track2 = 'setext-track2';

const int NID_setext_track2 = 605;

const int OBJ_setext_track2 = 2;

const String SN_setext_cv = 'setext-cv';

const String LN_setext_cv = 'additional verification';

const int NID_setext_cv = 606;

const int OBJ_setext_cv = 2;

const String SN_set_policy_root = 'set-policy-root';

const int NID_set_policy_root = 607;

const int OBJ_set_policy_root = 2;

const String SN_setCext_hashedRoot = 'setCext-hashedRoot';

const int NID_setCext_hashedRoot = 608;

const int OBJ_setCext_hashedRoot = 2;

const String SN_setCext_certType = 'setCext-certType';

const int NID_setCext_certType = 609;

const int OBJ_setCext_certType = 2;

const String SN_setCext_merchData = 'setCext-merchData';

const int NID_setCext_merchData = 610;

const int OBJ_setCext_merchData = 2;

const String SN_setCext_cCertRequired = 'setCext-cCertRequired';

const int NID_setCext_cCertRequired = 611;

const int OBJ_setCext_cCertRequired = 2;

const String SN_setCext_tunneling = 'setCext-tunneling';

const int NID_setCext_tunneling = 612;

const int OBJ_setCext_tunneling = 2;

const String SN_setCext_setExt = 'setCext-setExt';

const int NID_setCext_setExt = 613;

const int OBJ_setCext_setExt = 2;

const String SN_setCext_setQualf = 'setCext-setQualf';

const int NID_setCext_setQualf = 614;

const int OBJ_setCext_setQualf = 2;

const String SN_setCext_PGWYcapabilities = 'setCext-PGWYcapabilities';

const int NID_setCext_PGWYcapabilities = 615;

const int OBJ_setCext_PGWYcapabilities = 2;

const String SN_setCext_TokenIdentifier = 'setCext-TokenIdentifier';

const int NID_setCext_TokenIdentifier = 616;

const int OBJ_setCext_TokenIdentifier = 2;

const String SN_setCext_Track2Data = 'setCext-Track2Data';

const int NID_setCext_Track2Data = 617;

const int OBJ_setCext_Track2Data = 2;

const String SN_setCext_TokenType = 'setCext-TokenType';

const int NID_setCext_TokenType = 618;

const int OBJ_setCext_TokenType = 2;

const String SN_setCext_IssuerCapabilities = 'setCext-IssuerCapabilities';

const int NID_setCext_IssuerCapabilities = 619;

const int OBJ_setCext_IssuerCapabilities = 2;

const String SN_setAttr_Cert = 'setAttr-Cert';

const int NID_setAttr_Cert = 620;

const int OBJ_setAttr_Cert = 2;

const String SN_setAttr_PGWYcap = 'setAttr-PGWYcap';

const String LN_setAttr_PGWYcap = 'payment gateway capabilities';

const int NID_setAttr_PGWYcap = 621;

const int OBJ_setAttr_PGWYcap = 2;

const String SN_setAttr_TokenType = 'setAttr-TokenType';

const int NID_setAttr_TokenType = 622;

const int OBJ_setAttr_TokenType = 2;

const String SN_setAttr_IssCap = 'setAttr-IssCap';

const String LN_setAttr_IssCap = 'issuer capabilities';

const int NID_setAttr_IssCap = 623;

const int OBJ_setAttr_IssCap = 2;

const String SN_set_rootKeyThumb = 'set-rootKeyThumb';

const int NID_set_rootKeyThumb = 624;

const int OBJ_set_rootKeyThumb = 2;

const String SN_set_addPolicy = 'set-addPolicy';

const int NID_set_addPolicy = 625;

const int OBJ_set_addPolicy = 2;

const String SN_setAttr_Token_EMV = 'setAttr-Token-EMV';

const int NID_setAttr_Token_EMV = 626;

const int OBJ_setAttr_Token_EMV = 2;

const String SN_setAttr_Token_B0Prime = 'setAttr-Token-B0Prime';

const int NID_setAttr_Token_B0Prime = 627;

const int OBJ_setAttr_Token_B0Prime = 2;

const String SN_setAttr_IssCap_CVM = 'setAttr-IssCap-CVM';

const int NID_setAttr_IssCap_CVM = 628;

const int OBJ_setAttr_IssCap_CVM = 2;

const String SN_setAttr_IssCap_T2 = 'setAttr-IssCap-T2';

const int NID_setAttr_IssCap_T2 = 629;

const int OBJ_setAttr_IssCap_T2 = 2;

const String SN_setAttr_IssCap_Sig = 'setAttr-IssCap-Sig';

const int NID_setAttr_IssCap_Sig = 630;

const int OBJ_setAttr_IssCap_Sig = 2;

const String SN_setAttr_GenCryptgrm = 'setAttr-GenCryptgrm';

const String LN_setAttr_GenCryptgrm = 'generate cryptogram';

const int NID_setAttr_GenCryptgrm = 631;

const int OBJ_setAttr_GenCryptgrm = 2;

const String SN_setAttr_T2Enc = 'setAttr-T2Enc';

const String LN_setAttr_T2Enc = 'encrypted track 2';

const int NID_setAttr_T2Enc = 632;

const int OBJ_setAttr_T2Enc = 2;

const String SN_setAttr_T2cleartxt = 'setAttr-T2cleartxt';

const String LN_setAttr_T2cleartxt = 'cleartext track 2';

const int NID_setAttr_T2cleartxt = 633;

const int OBJ_setAttr_T2cleartxt = 2;

const String SN_setAttr_TokICCsig = 'setAttr-TokICCsig';

const String LN_setAttr_TokICCsig = 'ICC or token signature';

const int NID_setAttr_TokICCsig = 634;

const int OBJ_setAttr_TokICCsig = 2;

const String SN_setAttr_SecDevSig = 'setAttr-SecDevSig';

const String LN_setAttr_SecDevSig = 'secure device signature';

const int NID_setAttr_SecDevSig = 635;

const int OBJ_setAttr_SecDevSig = 2;

const String SN_set_brand_IATA_ATA = 'set-brand-IATA-ATA';

const int NID_set_brand_IATA_ATA = 636;

const int OBJ_set_brand_IATA_ATA = 2;

const String SN_set_brand_Diners = 'set-brand-Diners';

const int NID_set_brand_Diners = 637;

const int OBJ_set_brand_Diners = 2;

const String SN_set_brand_AmericanExpress = 'set-brand-AmericanExpress';

const int NID_set_brand_AmericanExpress = 638;

const int OBJ_set_brand_AmericanExpress = 2;

const String SN_set_brand_JCB = 'set-brand-JCB';

const int NID_set_brand_JCB = 639;

const int OBJ_set_brand_JCB = 2;

const String SN_set_brand_Visa = 'set-brand-Visa';

const int NID_set_brand_Visa = 640;

const int OBJ_set_brand_Visa = 2;

const String SN_set_brand_MasterCard = 'set-brand-MasterCard';

const int NID_set_brand_MasterCard = 641;

const int OBJ_set_brand_MasterCard = 2;

const String SN_set_brand_Novus = 'set-brand-Novus';

const int NID_set_brand_Novus = 642;

const int OBJ_set_brand_Novus = 2;

const String SN_des_cdmf = 'DES-CDMF';

const String LN_des_cdmf = 'des-cdmf';

const int NID_des_cdmf = 643;

const int OBJ_des_cdmf = 1;

const String SN_rsaOAEPEncryptionSET = 'rsaOAEPEncryptionSET';

const int NID_rsaOAEPEncryptionSET = 644;

const int OBJ_rsaOAEPEncryptionSET = 1;

const String SN_itu_t = 'ITU-T';

const String LN_itu_t = 'itu-t';

const int NID_itu_t = 645;

const int OBJ_itu_t = 0;

const String SN_joint_iso_itu_t = 'JOINT-ISO-ITU-T';

const String LN_joint_iso_itu_t = 'joint-iso-itu-t';

const int NID_joint_iso_itu_t = 646;

const int OBJ_joint_iso_itu_t = 2;

const String SN_international_organizations = 'international-organizations';

const String LN_international_organizations = 'International Organizations';

const int NID_international_organizations = 647;

const int OBJ_international_organizations = 2;

const String SN_ms_smartcard_login = 'msSmartcardLogin';

const String LN_ms_smartcard_login = 'Microsoft Smartcardlogin';

const int NID_ms_smartcard_login = 648;

const int OBJ_ms_smartcard_login = 1;

const String SN_ms_upn = 'msUPN';

const String LN_ms_upn = 'Microsoft Universal Principal Name';

const int NID_ms_upn = 649;

const int OBJ_ms_upn = 1;

const String SN_aes_128_cfb1 = 'AES-128-CFB1';

const String LN_aes_128_cfb1 = 'aes-128-cfb1';

const int NID_aes_128_cfb1 = 650;

const String SN_aes_192_cfb1 = 'AES-192-CFB1';

const String LN_aes_192_cfb1 = 'aes-192-cfb1';

const int NID_aes_192_cfb1 = 651;

const String SN_aes_256_cfb1 = 'AES-256-CFB1';

const String LN_aes_256_cfb1 = 'aes-256-cfb1';

const int NID_aes_256_cfb1 = 652;

const String SN_aes_128_cfb8 = 'AES-128-CFB8';

const String LN_aes_128_cfb8 = 'aes-128-cfb8';

const int NID_aes_128_cfb8 = 653;

const String SN_aes_192_cfb8 = 'AES-192-CFB8';

const String LN_aes_192_cfb8 = 'aes-192-cfb8';

const int NID_aes_192_cfb8 = 654;

const String SN_aes_256_cfb8 = 'AES-256-CFB8';

const String LN_aes_256_cfb8 = 'aes-256-cfb8';

const int NID_aes_256_cfb8 = 655;

const String SN_des_cfb1 = 'DES-CFB1';

const String LN_des_cfb1 = 'des-cfb1';

const int NID_des_cfb1 = 656;

const String SN_des_cfb8 = 'DES-CFB8';

const String LN_des_cfb8 = 'des-cfb8';

const int NID_des_cfb8 = 657;

const String SN_des_ede3_cfb1 = 'DES-EDE3-CFB1';

const String LN_des_ede3_cfb1 = 'des-ede3-cfb1';

const int NID_des_ede3_cfb1 = 658;

const String SN_des_ede3_cfb8 = 'DES-EDE3-CFB8';

const String LN_des_ede3_cfb8 = 'des-ede3-cfb8';

const int NID_des_ede3_cfb8 = 659;

const String SN_streetAddress = 'street';

const String LN_streetAddress = 'streetAddress';

const int NID_streetAddress = 660;

const int OBJ_streetAddress = 2;

const String LN_postalCode = 'postalCode';

const int NID_postalCode = 661;

const int OBJ_postalCode = 2;

const String SN_id_ppl = 'id-ppl';

const int NID_id_ppl = 662;

const int OBJ_id_ppl = 1;

const String SN_proxyCertInfo = 'proxyCertInfo';

const String LN_proxyCertInfo = 'Proxy Certificate Information';

const int NID_proxyCertInfo = 663;

const int OBJ_proxyCertInfo = 1;

const String SN_id_ppl_anyLanguage = 'id-ppl-anyLanguage';

const String LN_id_ppl_anyLanguage = 'Any language';

const int NID_id_ppl_anyLanguage = 664;

const int OBJ_id_ppl_anyLanguage = 1;

const String SN_id_ppl_inheritAll = 'id-ppl-inheritAll';

const String LN_id_ppl_inheritAll = 'Inherit all';

const int NID_id_ppl_inheritAll = 665;

const int OBJ_id_ppl_inheritAll = 1;

const String SN_name_constraints = 'nameConstraints';

const String LN_name_constraints = 'X509v3 Name Constraints';

const int NID_name_constraints = 666;

const int OBJ_name_constraints = 2;

const String SN_Independent = 'id-ppl-independent';

const String LN_Independent = 'Independent';

const int NID_Independent = 667;

const int OBJ_Independent = 1;

const String SN_sha256WithRSAEncryption = 'RSA-SHA256';

const String LN_sha256WithRSAEncryption = 'sha256WithRSAEncryption';

const int NID_sha256WithRSAEncryption = 668;

const int OBJ_sha256WithRSAEncryption = 1;

const String SN_sha384WithRSAEncryption = 'RSA-SHA384';

const String LN_sha384WithRSAEncryption = 'sha384WithRSAEncryption';

const int NID_sha384WithRSAEncryption = 669;

const int OBJ_sha384WithRSAEncryption = 1;

const String SN_sha512WithRSAEncryption = 'RSA-SHA512';

const String LN_sha512WithRSAEncryption = 'sha512WithRSAEncryption';

const int NID_sha512WithRSAEncryption = 670;

const int OBJ_sha512WithRSAEncryption = 1;

const String SN_sha224WithRSAEncryption = 'RSA-SHA224';

const String LN_sha224WithRSAEncryption = 'sha224WithRSAEncryption';

const int NID_sha224WithRSAEncryption = 671;

const int OBJ_sha224WithRSAEncryption = 1;

const String SN_sha256 = 'SHA256';

const String LN_sha256 = 'sha256';

const int NID_sha256 = 672;

const int OBJ_sha256 = 2;

const String SN_sha384 = 'SHA384';

const String LN_sha384 = 'sha384';

const int NID_sha384 = 673;

const int OBJ_sha384 = 2;

const String SN_sha512 = 'SHA512';

const String LN_sha512 = 'sha512';

const int NID_sha512 = 674;

const int OBJ_sha512 = 2;

const String SN_sha224 = 'SHA224';

const String LN_sha224 = 'sha224';

const int NID_sha224 = 675;

const int OBJ_sha224 = 2;

const String SN_identified_organization = 'identified-organization';

const int NID_identified_organization = 676;

const int OBJ_identified_organization = 1;

const String SN_certicom_arc = 'certicom-arc';

const int NID_certicom_arc = 677;

const int OBJ_certicom_arc = 1;

const String SN_wap = 'wap';

const int NID_wap = 678;

const int OBJ_wap = 2;

const String SN_wap_wsg = 'wap-wsg';

const int NID_wap_wsg = 679;

const int OBJ_wap_wsg = 2;

const String SN_X9_62_id_characteristic_two_basis =
    'id-characteristic-two-basis';

const int NID_X9_62_id_characteristic_two_basis = 680;

const int OBJ_X9_62_id_characteristic_two_basis = 1;

const String SN_X9_62_onBasis = 'onBasis';

const int NID_X9_62_onBasis = 681;

const int OBJ_X9_62_onBasis = 1;

const String SN_X9_62_tpBasis = 'tpBasis';

const int NID_X9_62_tpBasis = 682;

const int OBJ_X9_62_tpBasis = 1;

const String SN_X9_62_ppBasis = 'ppBasis';

const int NID_X9_62_ppBasis = 683;

const int OBJ_X9_62_ppBasis = 1;

const String SN_X9_62_c2pnb163v1 = 'c2pnb163v1';

const int NID_X9_62_c2pnb163v1 = 684;

const int OBJ_X9_62_c2pnb163v1 = 1;

const String SN_X9_62_c2pnb163v2 = 'c2pnb163v2';

const int NID_X9_62_c2pnb163v2 = 685;

const int OBJ_X9_62_c2pnb163v2 = 1;

const String SN_X9_62_c2pnb163v3 = 'c2pnb163v3';

const int NID_X9_62_c2pnb163v3 = 686;

const int OBJ_X9_62_c2pnb163v3 = 1;

const String SN_X9_62_c2pnb176v1 = 'c2pnb176v1';

const int NID_X9_62_c2pnb176v1 = 687;

const int OBJ_X9_62_c2pnb176v1 = 1;

const String SN_X9_62_c2tnb191v1 = 'c2tnb191v1';

const int NID_X9_62_c2tnb191v1 = 688;

const int OBJ_X9_62_c2tnb191v1 = 1;

const String SN_X9_62_c2tnb191v2 = 'c2tnb191v2';

const int NID_X9_62_c2tnb191v2 = 689;

const int OBJ_X9_62_c2tnb191v2 = 1;

const String SN_X9_62_c2tnb191v3 = 'c2tnb191v3';

const int NID_X9_62_c2tnb191v3 = 690;

const int OBJ_X9_62_c2tnb191v3 = 1;

const String SN_X9_62_c2onb191v4 = 'c2onb191v4';

const int NID_X9_62_c2onb191v4 = 691;

const int OBJ_X9_62_c2onb191v4 = 1;

const String SN_X9_62_c2onb191v5 = 'c2onb191v5';

const int NID_X9_62_c2onb191v5 = 692;

const int OBJ_X9_62_c2onb191v5 = 1;

const String SN_X9_62_c2pnb208w1 = 'c2pnb208w1';

const int NID_X9_62_c2pnb208w1 = 693;

const int OBJ_X9_62_c2pnb208w1 = 1;

const String SN_X9_62_c2tnb239v1 = 'c2tnb239v1';

const int NID_X9_62_c2tnb239v1 = 694;

const int OBJ_X9_62_c2tnb239v1 = 1;

const String SN_X9_62_c2tnb239v2 = 'c2tnb239v2';

const int NID_X9_62_c2tnb239v2 = 695;

const int OBJ_X9_62_c2tnb239v2 = 1;

const String SN_X9_62_c2tnb239v3 = 'c2tnb239v3';

const int NID_X9_62_c2tnb239v3 = 696;

const int OBJ_X9_62_c2tnb239v3 = 1;

const String SN_X9_62_c2onb239v4 = 'c2onb239v4';

const int NID_X9_62_c2onb239v4 = 697;

const int OBJ_X9_62_c2onb239v4 = 1;

const String SN_X9_62_c2onb239v5 = 'c2onb239v5';

const int NID_X9_62_c2onb239v5 = 698;

const int OBJ_X9_62_c2onb239v5 = 1;

const String SN_X9_62_c2pnb272w1 = 'c2pnb272w1';

const int NID_X9_62_c2pnb272w1 = 699;

const int OBJ_X9_62_c2pnb272w1 = 1;

const String SN_X9_62_c2pnb304w1 = 'c2pnb304w1';

const int NID_X9_62_c2pnb304w1 = 700;

const int OBJ_X9_62_c2pnb304w1 = 1;

const String SN_X9_62_c2tnb359v1 = 'c2tnb359v1';

const int NID_X9_62_c2tnb359v1 = 701;

const int OBJ_X9_62_c2tnb359v1 = 1;

const String SN_X9_62_c2pnb368w1 = 'c2pnb368w1';

const int NID_X9_62_c2pnb368w1 = 702;

const int OBJ_X9_62_c2pnb368w1 = 1;

const String SN_X9_62_c2tnb431r1 = 'c2tnb431r1';

const int NID_X9_62_c2tnb431r1 = 703;

const int OBJ_X9_62_c2tnb431r1 = 1;

const String SN_secp112r1 = 'secp112r1';

const int NID_secp112r1 = 704;

const int OBJ_secp112r1 = 1;

const String SN_secp112r2 = 'secp112r2';

const int NID_secp112r2 = 705;

const int OBJ_secp112r2 = 1;

const String SN_secp128r1 = 'secp128r1';

const int NID_secp128r1 = 706;

const int OBJ_secp128r1 = 1;

const String SN_secp128r2 = 'secp128r2';

const int NID_secp128r2 = 707;

const int OBJ_secp128r2 = 1;

const String SN_secp160k1 = 'secp160k1';

const int NID_secp160k1 = 708;

const int OBJ_secp160k1 = 1;

const String SN_secp160r1 = 'secp160r1';

const int NID_secp160r1 = 709;

const int OBJ_secp160r1 = 1;

const String SN_secp160r2 = 'secp160r2';

const int NID_secp160r2 = 710;

const int OBJ_secp160r2 = 1;

const String SN_secp192k1 = 'secp192k1';

const int NID_secp192k1 = 711;

const int OBJ_secp192k1 = 1;

const String SN_secp224k1 = 'secp224k1';

const int NID_secp224k1 = 712;

const int OBJ_secp224k1 = 1;

const String SN_secp224r1 = 'secp224r1';

const int NID_secp224r1 = 713;

const int OBJ_secp224r1 = 1;

const String SN_secp256k1 = 'secp256k1';

const int NID_secp256k1 = 714;

const int OBJ_secp256k1 = 1;

const String SN_secp384r1 = 'secp384r1';

const int NID_secp384r1 = 715;

const int OBJ_secp384r1 = 1;

const String SN_secp521r1 = 'secp521r1';

const int NID_secp521r1 = 716;

const int OBJ_secp521r1 = 1;

const String SN_sect113r1 = 'sect113r1';

const int NID_sect113r1 = 717;

const int OBJ_sect113r1 = 1;

const String SN_sect113r2 = 'sect113r2';

const int NID_sect113r2 = 718;

const int OBJ_sect113r2 = 1;

const String SN_sect131r1 = 'sect131r1';

const int NID_sect131r1 = 719;

const int OBJ_sect131r1 = 1;

const String SN_sect131r2 = 'sect131r2';

const int NID_sect131r2 = 720;

const int OBJ_sect131r2 = 1;

const String SN_sect163k1 = 'sect163k1';

const int NID_sect163k1 = 721;

const int OBJ_sect163k1 = 1;

const String SN_sect163r1 = 'sect163r1';

const int NID_sect163r1 = 722;

const int OBJ_sect163r1 = 1;

const String SN_sect163r2 = 'sect163r2';

const int NID_sect163r2 = 723;

const int OBJ_sect163r2 = 1;

const String SN_sect193r1 = 'sect193r1';

const int NID_sect193r1 = 724;

const int OBJ_sect193r1 = 1;

const String SN_sect193r2 = 'sect193r2';

const int NID_sect193r2 = 725;

const int OBJ_sect193r2 = 1;

const String SN_sect233k1 = 'sect233k1';

const int NID_sect233k1 = 726;

const int OBJ_sect233k1 = 1;

const String SN_sect233r1 = 'sect233r1';

const int NID_sect233r1 = 727;

const int OBJ_sect233r1 = 1;

const String SN_sect239k1 = 'sect239k1';

const int NID_sect239k1 = 728;

const int OBJ_sect239k1 = 1;

const String SN_sect283k1 = 'sect283k1';

const int NID_sect283k1 = 729;

const int OBJ_sect283k1 = 1;

const String SN_sect283r1 = 'sect283r1';

const int NID_sect283r1 = 730;

const int OBJ_sect283r1 = 1;

const String SN_sect409k1 = 'sect409k1';

const int NID_sect409k1 = 731;

const int OBJ_sect409k1 = 1;

const String SN_sect409r1 = 'sect409r1';

const int NID_sect409r1 = 732;

const int OBJ_sect409r1 = 1;

const String SN_sect571k1 = 'sect571k1';

const int NID_sect571k1 = 733;

const int OBJ_sect571k1 = 1;

const String SN_sect571r1 = 'sect571r1';

const int NID_sect571r1 = 734;

const int OBJ_sect571r1 = 1;

const String SN_wap_wsg_idm_ecid_wtls1 = 'wap-wsg-idm-ecid-wtls1';

const int NID_wap_wsg_idm_ecid_wtls1 = 735;

const int OBJ_wap_wsg_idm_ecid_wtls1 = 2;

const String SN_wap_wsg_idm_ecid_wtls3 = 'wap-wsg-idm-ecid-wtls3';

const int NID_wap_wsg_idm_ecid_wtls3 = 736;

const int OBJ_wap_wsg_idm_ecid_wtls3 = 2;

const String SN_wap_wsg_idm_ecid_wtls4 = 'wap-wsg-idm-ecid-wtls4';

const int NID_wap_wsg_idm_ecid_wtls4 = 737;

const int OBJ_wap_wsg_idm_ecid_wtls4 = 2;

const String SN_wap_wsg_idm_ecid_wtls5 = 'wap-wsg-idm-ecid-wtls5';

const int NID_wap_wsg_idm_ecid_wtls5 = 738;

const int OBJ_wap_wsg_idm_ecid_wtls5 = 2;

const String SN_wap_wsg_idm_ecid_wtls6 = 'wap-wsg-idm-ecid-wtls6';

const int NID_wap_wsg_idm_ecid_wtls6 = 739;

const int OBJ_wap_wsg_idm_ecid_wtls6 = 2;

const String SN_wap_wsg_idm_ecid_wtls7 = 'wap-wsg-idm-ecid-wtls7';

const int NID_wap_wsg_idm_ecid_wtls7 = 740;

const int OBJ_wap_wsg_idm_ecid_wtls7 = 2;

const String SN_wap_wsg_idm_ecid_wtls8 = 'wap-wsg-idm-ecid-wtls8';

const int NID_wap_wsg_idm_ecid_wtls8 = 741;

const int OBJ_wap_wsg_idm_ecid_wtls8 = 2;

const String SN_wap_wsg_idm_ecid_wtls9 = 'wap-wsg-idm-ecid-wtls9';

const int NID_wap_wsg_idm_ecid_wtls9 = 742;

const int OBJ_wap_wsg_idm_ecid_wtls9 = 2;

const String SN_wap_wsg_idm_ecid_wtls10 = 'wap-wsg-idm-ecid-wtls10';

const int NID_wap_wsg_idm_ecid_wtls10 = 743;

const int OBJ_wap_wsg_idm_ecid_wtls10 = 2;

const String SN_wap_wsg_idm_ecid_wtls11 = 'wap-wsg-idm-ecid-wtls11';

const int NID_wap_wsg_idm_ecid_wtls11 = 744;

const int OBJ_wap_wsg_idm_ecid_wtls11 = 2;

const String SN_wap_wsg_idm_ecid_wtls12 = 'wap-wsg-idm-ecid-wtls12';

const int NID_wap_wsg_idm_ecid_wtls12 = 745;

const int OBJ_wap_wsg_idm_ecid_wtls12 = 2;

const String SN_any_policy = 'anyPolicy';

const String LN_any_policy = 'X509v3 Any Policy';

const int NID_any_policy = 746;

const int OBJ_any_policy = 2;

const String SN_policy_mappings = 'policyMappings';

const String LN_policy_mappings = 'X509v3 Policy Mappings';

const int NID_policy_mappings = 747;

const int OBJ_policy_mappings = 2;

const String SN_inhibit_any_policy = 'inhibitAnyPolicy';

const String LN_inhibit_any_policy = 'X509v3 Inhibit Any Policy';

const int NID_inhibit_any_policy = 748;

const int OBJ_inhibit_any_policy = 2;

const String SN_ipsec3 = 'Oakley-EC2N-3';

const String LN_ipsec3 = 'ipsec3';

const int NID_ipsec3 = 749;

const String SN_ipsec4 = 'Oakley-EC2N-4';

const String LN_ipsec4 = 'ipsec4';

const int NID_ipsec4 = 750;

const String SN_camellia_128_cbc = 'CAMELLIA-128-CBC';

const String LN_camellia_128_cbc = 'camellia-128-cbc';

const int NID_camellia_128_cbc = 751;

const int OBJ_camellia_128_cbc = 1;

const String SN_camellia_192_cbc = 'CAMELLIA-192-CBC';

const String LN_camellia_192_cbc = 'camellia-192-cbc';

const int NID_camellia_192_cbc = 752;

const int OBJ_camellia_192_cbc = 1;

const String SN_camellia_256_cbc = 'CAMELLIA-256-CBC';

const String LN_camellia_256_cbc = 'camellia-256-cbc';

const int NID_camellia_256_cbc = 753;

const int OBJ_camellia_256_cbc = 1;

const String SN_camellia_128_ecb = 'CAMELLIA-128-ECB';

const String LN_camellia_128_ecb = 'camellia-128-ecb';

const int NID_camellia_128_ecb = 754;

const int OBJ_camellia_128_ecb = 0;

const String SN_camellia_192_ecb = 'CAMELLIA-192-ECB';

const String LN_camellia_192_ecb = 'camellia-192-ecb';

const int NID_camellia_192_ecb = 755;

const int OBJ_camellia_192_ecb = 0;

const String SN_camellia_256_ecb = 'CAMELLIA-256-ECB';

const String LN_camellia_256_ecb = 'camellia-256-ecb';

const int NID_camellia_256_ecb = 756;

const int OBJ_camellia_256_ecb = 0;

const String SN_camellia_128_cfb128 = 'CAMELLIA-128-CFB';

const String LN_camellia_128_cfb128 = 'camellia-128-cfb';

const int NID_camellia_128_cfb128 = 757;

const int OBJ_camellia_128_cfb128 = 0;

const String SN_camellia_192_cfb128 = 'CAMELLIA-192-CFB';

const String LN_camellia_192_cfb128 = 'camellia-192-cfb';

const int NID_camellia_192_cfb128 = 758;

const int OBJ_camellia_192_cfb128 = 0;

const String SN_camellia_256_cfb128 = 'CAMELLIA-256-CFB';

const String LN_camellia_256_cfb128 = 'camellia-256-cfb';

const int NID_camellia_256_cfb128 = 759;

const int OBJ_camellia_256_cfb128 = 0;

const String SN_camellia_128_cfb1 = 'CAMELLIA-128-CFB1';

const String LN_camellia_128_cfb1 = 'camellia-128-cfb1';

const int NID_camellia_128_cfb1 = 760;

const String SN_camellia_192_cfb1 = 'CAMELLIA-192-CFB1';

const String LN_camellia_192_cfb1 = 'camellia-192-cfb1';

const int NID_camellia_192_cfb1 = 761;

const String SN_camellia_256_cfb1 = 'CAMELLIA-256-CFB1';

const String LN_camellia_256_cfb1 = 'camellia-256-cfb1';

const int NID_camellia_256_cfb1 = 762;

const String SN_camellia_128_cfb8 = 'CAMELLIA-128-CFB8';

const String LN_camellia_128_cfb8 = 'camellia-128-cfb8';

const int NID_camellia_128_cfb8 = 763;

const String SN_camellia_192_cfb8 = 'CAMELLIA-192-CFB8';

const String LN_camellia_192_cfb8 = 'camellia-192-cfb8';

const int NID_camellia_192_cfb8 = 764;

const String SN_camellia_256_cfb8 = 'CAMELLIA-256-CFB8';

const String LN_camellia_256_cfb8 = 'camellia-256-cfb8';

const int NID_camellia_256_cfb8 = 765;

const String SN_camellia_128_ofb128 = 'CAMELLIA-128-OFB';

const String LN_camellia_128_ofb128 = 'camellia-128-ofb';

const int NID_camellia_128_ofb128 = 766;

const int OBJ_camellia_128_ofb128 = 0;

const String SN_camellia_192_ofb128 = 'CAMELLIA-192-OFB';

const String LN_camellia_192_ofb128 = 'camellia-192-ofb';

const int NID_camellia_192_ofb128 = 767;

const int OBJ_camellia_192_ofb128 = 0;

const String SN_camellia_256_ofb128 = 'CAMELLIA-256-OFB';

const String LN_camellia_256_ofb128 = 'camellia-256-ofb';

const int NID_camellia_256_ofb128 = 768;

const int OBJ_camellia_256_ofb128 = 0;

const String SN_subject_directory_attributes = 'subjectDirectoryAttributes';

const String LN_subject_directory_attributes =
    'X509v3 Subject Directory Attributes';

const int NID_subject_directory_attributes = 769;

const int OBJ_subject_directory_attributes = 2;

const String SN_issuing_distribution_point = 'issuingDistributionPoint';

const String LN_issuing_distribution_point =
    'X509v3 Issuing Distribution Point';

const int NID_issuing_distribution_point = 770;

const int OBJ_issuing_distribution_point = 2;

const String SN_certificate_issuer = 'certificateIssuer';

const String LN_certificate_issuer = 'X509v3 Certificate Issuer';

const int NID_certificate_issuer = 771;

const int OBJ_certificate_issuer = 2;

const String SN_kisa = 'KISA';

const String LN_kisa = 'kisa';

const int NID_kisa = 773;

const int OBJ_kisa = 1;

const String SN_seed_ecb = 'SEED-ECB';

const String LN_seed_ecb = 'seed-ecb';

const int NID_seed_ecb = 776;

const int OBJ_seed_ecb = 1;

const String SN_seed_cbc = 'SEED-CBC';

const String LN_seed_cbc = 'seed-cbc';

const int NID_seed_cbc = 777;

const int OBJ_seed_cbc = 1;

const String SN_seed_ofb128 = 'SEED-OFB';

const String LN_seed_ofb128 = 'seed-ofb';

const int NID_seed_ofb128 = 778;

const int OBJ_seed_ofb128 = 1;

const String SN_seed_cfb128 = 'SEED-CFB';

const String LN_seed_cfb128 = 'seed-cfb';

const int NID_seed_cfb128 = 779;

const int OBJ_seed_cfb128 = 1;

const String SN_hmac_md5 = 'HMAC-MD5';

const String LN_hmac_md5 = 'hmac-md5';

const int NID_hmac_md5 = 780;

const int OBJ_hmac_md5 = 1;

const String SN_hmac_sha1 = 'HMAC-SHA1';

const String LN_hmac_sha1 = 'hmac-sha1';

const int NID_hmac_sha1 = 781;

const int OBJ_hmac_sha1 = 1;

const String SN_id_PasswordBasedMAC = 'id-PasswordBasedMAC';

const String LN_id_PasswordBasedMAC = 'password based MAC';

const int NID_id_PasswordBasedMAC = 782;

const int OBJ_id_PasswordBasedMAC = 1;

const String SN_id_DHBasedMac = 'id-DHBasedMac';

const String LN_id_DHBasedMac = 'Diffie-Hellman based MAC';

const int NID_id_DHBasedMac = 783;

const int OBJ_id_DHBasedMac = 1;

const String SN_id_it_suppLangTags = 'id-it-suppLangTags';

const int NID_id_it_suppLangTags = 784;

const int OBJ_id_it_suppLangTags = 1;

const String SN_caRepository = 'caRepository';

const String LN_caRepository = 'CA Repository';

const int NID_caRepository = 785;

const int OBJ_caRepository = 1;

const String SN_id_smime_ct_compressedData = 'id-smime-ct-compressedData';

const int NID_id_smime_ct_compressedData = 786;

const int OBJ_id_smime_ct_compressedData = 1;

const String SN_id_ct_asciiTextWithCRLF = 'id-ct-asciiTextWithCRLF';

const int NID_id_ct_asciiTextWithCRLF = 787;

const int OBJ_id_ct_asciiTextWithCRLF = 1;

const String SN_id_aes128_wrap = 'id-aes128-wrap';

const int NID_id_aes128_wrap = 788;

const int OBJ_id_aes128_wrap = 2;

const String SN_id_aes192_wrap = 'id-aes192-wrap';

const int NID_id_aes192_wrap = 789;

const int OBJ_id_aes192_wrap = 2;

const String SN_id_aes256_wrap = 'id-aes256-wrap';

const int NID_id_aes256_wrap = 790;

const int OBJ_id_aes256_wrap = 2;

const String SN_ecdsa_with_Recommended = 'ecdsa-with-Recommended';

const int NID_ecdsa_with_Recommended = 791;

const int OBJ_ecdsa_with_Recommended = 1;

const String SN_ecdsa_with_Specified = 'ecdsa-with-Specified';

const int NID_ecdsa_with_Specified = 792;

const int OBJ_ecdsa_with_Specified = 1;

const String SN_ecdsa_with_SHA224 = 'ecdsa-with-SHA224';

const int NID_ecdsa_with_SHA224 = 793;

const int OBJ_ecdsa_with_SHA224 = 1;

const String SN_ecdsa_with_SHA256 = 'ecdsa-with-SHA256';

const int NID_ecdsa_with_SHA256 = 794;

const int OBJ_ecdsa_with_SHA256 = 1;

const String SN_ecdsa_with_SHA384 = 'ecdsa-with-SHA384';

const int NID_ecdsa_with_SHA384 = 795;

const int OBJ_ecdsa_with_SHA384 = 1;

const String SN_ecdsa_with_SHA512 = 'ecdsa-with-SHA512';

const int NID_ecdsa_with_SHA512 = 796;

const int OBJ_ecdsa_with_SHA512 = 1;

const String LN_hmacWithMD5 = 'hmacWithMD5';

const int NID_hmacWithMD5 = 797;

const int OBJ_hmacWithMD5 = 1;

const String LN_hmacWithSHA224 = 'hmacWithSHA224';

const int NID_hmacWithSHA224 = 798;

const int OBJ_hmacWithSHA224 = 1;

const String LN_hmacWithSHA256 = 'hmacWithSHA256';

const int NID_hmacWithSHA256 = 799;

const int OBJ_hmacWithSHA256 = 1;

const String LN_hmacWithSHA384 = 'hmacWithSHA384';

const int NID_hmacWithSHA384 = 800;

const int OBJ_hmacWithSHA384 = 1;

const String LN_hmacWithSHA512 = 'hmacWithSHA512';

const int NID_hmacWithSHA512 = 801;

const int OBJ_hmacWithSHA512 = 1;

const String SN_dsa_with_SHA224 = 'dsa_with_SHA224';

const int NID_dsa_with_SHA224 = 802;

const int OBJ_dsa_with_SHA224 = 2;

const String SN_dsa_with_SHA256 = 'dsa_with_SHA256';

const int NID_dsa_with_SHA256 = 803;

const int OBJ_dsa_with_SHA256 = 2;

const String SN_whirlpool = 'whirlpool';

const int NID_whirlpool = 804;

const int OBJ_whirlpool = 1;

const String SN_cryptopro = 'cryptopro';

const int NID_cryptopro = 805;

const int OBJ_cryptopro = 1;

const String SN_cryptocom = 'cryptocom';

const int NID_cryptocom = 806;

const int OBJ_cryptocom = 1;

const String SN_id_GostR3411_94_with_GostR3410_2001 =
    'id-GostR3411-94-with-GostR3410-2001';

const String LN_id_GostR3411_94_with_GostR3410_2001 =
    'GOST R 34.11-94 with GOST R 34.10-2001';

const int NID_id_GostR3411_94_with_GostR3410_2001 = 807;

const int OBJ_id_GostR3411_94_with_GostR3410_2001 = 1;

const String SN_id_GostR3411_94_with_GostR3410_94 =
    'id-GostR3411-94-with-GostR3410-94';

const String LN_id_GostR3411_94_with_GostR3410_94 =
    'GOST R 34.11-94 with GOST R 34.10-94';

const int NID_id_GostR3411_94_with_GostR3410_94 = 808;

const int OBJ_id_GostR3411_94_with_GostR3410_94 = 1;

const String SN_id_GostR3411_94 = 'md_gost94';

const String LN_id_GostR3411_94 = 'GOST R 34.11-94';

const int NID_id_GostR3411_94 = 809;

const int OBJ_id_GostR3411_94 = 1;

const String SN_id_HMACGostR3411_94 = 'id-HMACGostR3411-94';

const String LN_id_HMACGostR3411_94 = 'HMAC GOST 34.11-94';

const int NID_id_HMACGostR3411_94 = 810;

const int OBJ_id_HMACGostR3411_94 = 1;

const String SN_id_GostR3410_2001 = 'gost2001';

const String LN_id_GostR3410_2001 = 'GOST R 34.10-2001';

const int NID_id_GostR3410_2001 = 811;

const int OBJ_id_GostR3410_2001 = 1;

const String SN_id_GostR3410_94 = 'gost94';

const String LN_id_GostR3410_94 = 'GOST R 34.10-94';

const int NID_id_GostR3410_94 = 812;

const int OBJ_id_GostR3410_94 = 1;

const String SN_id_Gost28147_89 = 'gost89';

const String LN_id_Gost28147_89 = 'GOST 28147-89';

const int NID_id_Gost28147_89 = 813;

const int OBJ_id_Gost28147_89 = 1;

const String SN_gost89_cnt = 'gost89-cnt';

const int NID_gost89_cnt = 814;

const String SN_id_Gost28147_89_MAC = 'gost-mac';

const String LN_id_Gost28147_89_MAC = 'GOST 28147-89 MAC';

const int NID_id_Gost28147_89_MAC = 815;

const int OBJ_id_Gost28147_89_MAC = 1;

const String SN_id_GostR3411_94_prf = 'prf-gostr3411-94';

const String LN_id_GostR3411_94_prf = 'GOST R 34.11-94 PRF';

const int NID_id_GostR3411_94_prf = 816;

const int OBJ_id_GostR3411_94_prf = 1;

const String SN_id_GostR3410_2001DH = 'id-GostR3410-2001DH';

const String LN_id_GostR3410_2001DH = 'GOST R 34.10-2001 DH';

const int NID_id_GostR3410_2001DH = 817;

const int OBJ_id_GostR3410_2001DH = 1;

const String SN_id_GostR3410_94DH = 'id-GostR3410-94DH';

const String LN_id_GostR3410_94DH = 'GOST R 34.10-94 DH';

const int NID_id_GostR3410_94DH = 818;

const int OBJ_id_GostR3410_94DH = 1;

const String SN_id_Gost28147_89_CryptoPro_KeyMeshing =
    'id-Gost28147-89-CryptoPro-KeyMeshing';

const int NID_id_Gost28147_89_CryptoPro_KeyMeshing = 819;

const int OBJ_id_Gost28147_89_CryptoPro_KeyMeshing = 1;

const String SN_id_Gost28147_89_None_KeyMeshing =
    'id-Gost28147-89-None-KeyMeshing';

const int NID_id_Gost28147_89_None_KeyMeshing = 820;

const int OBJ_id_Gost28147_89_None_KeyMeshing = 1;

const String SN_id_GostR3411_94_TestParamSet = 'id-GostR3411-94-TestParamSet';

const int NID_id_GostR3411_94_TestParamSet = 821;

const int OBJ_id_GostR3411_94_TestParamSet = 1;

const String SN_id_GostR3411_94_CryptoProParamSet =
    'id-GostR3411-94-CryptoProParamSet';

const int NID_id_GostR3411_94_CryptoProParamSet = 822;

const int OBJ_id_GostR3411_94_CryptoProParamSet = 1;

const String SN_id_Gost28147_89_TestParamSet = 'id-Gost28147-89-TestParamSet';

const int NID_id_Gost28147_89_TestParamSet = 823;

const int OBJ_id_Gost28147_89_TestParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_A_ParamSet =
    'id-Gost28147-89-CryptoPro-A-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_A_ParamSet = 824;

const int OBJ_id_Gost28147_89_CryptoPro_A_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_B_ParamSet =
    'id-Gost28147-89-CryptoPro-B-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_B_ParamSet = 825;

const int OBJ_id_Gost28147_89_CryptoPro_B_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_C_ParamSet =
    'id-Gost28147-89-CryptoPro-C-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_C_ParamSet = 826;

const int OBJ_id_Gost28147_89_CryptoPro_C_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_D_ParamSet =
    'id-Gost28147-89-CryptoPro-D-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_D_ParamSet = 827;

const int OBJ_id_Gost28147_89_CryptoPro_D_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet =
    'id-Gost28147-89-CryptoPro-Oscar-1-1-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 828;

const int OBJ_id_Gost28147_89_CryptoPro_Oscar_1_1_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet =
    'id-Gost28147-89-CryptoPro-Oscar-1-0-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 829;

const int OBJ_id_Gost28147_89_CryptoPro_Oscar_1_0_ParamSet = 1;

const String SN_id_Gost28147_89_CryptoPro_RIC_1_ParamSet =
    'id-Gost28147-89-CryptoPro-RIC-1-ParamSet';

const int NID_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 830;

const int OBJ_id_Gost28147_89_CryptoPro_RIC_1_ParamSet = 1;

const String SN_id_GostR3410_94_TestParamSet = 'id-GostR3410-94-TestParamSet';

const int NID_id_GostR3410_94_TestParamSet = 831;

const int OBJ_id_GostR3410_94_TestParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_A_ParamSet =
    'id-GostR3410-94-CryptoPro-A-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_A_ParamSet = 832;

const int OBJ_id_GostR3410_94_CryptoPro_A_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_B_ParamSet =
    'id-GostR3410-94-CryptoPro-B-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_B_ParamSet = 833;

const int OBJ_id_GostR3410_94_CryptoPro_B_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_C_ParamSet =
    'id-GostR3410-94-CryptoPro-C-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_C_ParamSet = 834;

const int OBJ_id_GostR3410_94_CryptoPro_C_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_D_ParamSet =
    'id-GostR3410-94-CryptoPro-D-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_D_ParamSet = 835;

const int OBJ_id_GostR3410_94_CryptoPro_D_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchA_ParamSet =
    'id-GostR3410-94-CryptoPro-XchA-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchA_ParamSet = 836;

const int OBJ_id_GostR3410_94_CryptoPro_XchA_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchB_ParamSet =
    'id-GostR3410-94-CryptoPro-XchB-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchB_ParamSet = 837;

const int OBJ_id_GostR3410_94_CryptoPro_XchB_ParamSet = 1;

const String SN_id_GostR3410_94_CryptoPro_XchC_ParamSet =
    'id-GostR3410-94-CryptoPro-XchC-ParamSet';

const int NID_id_GostR3410_94_CryptoPro_XchC_ParamSet = 838;

const int OBJ_id_GostR3410_94_CryptoPro_XchC_ParamSet = 1;

const String SN_id_GostR3410_2001_TestParamSet =
    'id-GostR3410-2001-TestParamSet';

const int NID_id_GostR3410_2001_TestParamSet = 839;

const int OBJ_id_GostR3410_2001_TestParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_A_ParamSet =
    'id-GostR3410-2001-CryptoPro-A-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_A_ParamSet = 840;

const int OBJ_id_GostR3410_2001_CryptoPro_A_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_B_ParamSet =
    'id-GostR3410-2001-CryptoPro-B-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_B_ParamSet = 841;

const int OBJ_id_GostR3410_2001_CryptoPro_B_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_C_ParamSet =
    'id-GostR3410-2001-CryptoPro-C-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_C_ParamSet = 842;

const int OBJ_id_GostR3410_2001_CryptoPro_C_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_XchA_ParamSet =
    'id-GostR3410-2001-CryptoPro-XchA-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 843;

const int OBJ_id_GostR3410_2001_CryptoPro_XchA_ParamSet = 1;

const String SN_id_GostR3410_2001_CryptoPro_XchB_ParamSet =
    'id-GostR3410-2001-CryptoPro-XchB-ParamSet';

const int NID_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 844;

const int OBJ_id_GostR3410_2001_CryptoPro_XchB_ParamSet = 1;

const String SN_id_GostR3410_94_a = 'id-GostR3410-94-a';

const int NID_id_GostR3410_94_a = 845;

const int OBJ_id_GostR3410_94_a = 1;

const String SN_id_GostR3410_94_aBis = 'id-GostR3410-94-aBis';

const int NID_id_GostR3410_94_aBis = 846;

const int OBJ_id_GostR3410_94_aBis = 1;

const String SN_id_GostR3410_94_b = 'id-GostR3410-94-b';

const int NID_id_GostR3410_94_b = 847;

const int OBJ_id_GostR3410_94_b = 1;

const String SN_id_GostR3410_94_bBis = 'id-GostR3410-94-bBis';

const int NID_id_GostR3410_94_bBis = 848;

const int OBJ_id_GostR3410_94_bBis = 1;

const String SN_id_Gost28147_89_cc = 'id-Gost28147-89-cc';

const String LN_id_Gost28147_89_cc = 'GOST 28147-89 Cryptocom ParamSet';

const int NID_id_Gost28147_89_cc = 849;

const int OBJ_id_Gost28147_89_cc = 1;

const String SN_id_GostR3410_94_cc = 'gost94cc';

const String LN_id_GostR3410_94_cc = 'GOST 34.10-94 Cryptocom';

const int NID_id_GostR3410_94_cc = 850;

const int OBJ_id_GostR3410_94_cc = 1;

const String SN_id_GostR3410_2001_cc = 'gost2001cc';

const String LN_id_GostR3410_2001_cc = 'GOST 34.10-2001 Cryptocom';

const int NID_id_GostR3410_2001_cc = 851;

const int OBJ_id_GostR3410_2001_cc = 1;

const String SN_id_GostR3411_94_with_GostR3410_94_cc =
    'id-GostR3411-94-with-GostR3410-94-cc';

const String LN_id_GostR3411_94_with_GostR3410_94_cc =
    'GOST R 34.11-94 with GOST R 34.10-94 Cryptocom';

const int NID_id_GostR3411_94_with_GostR3410_94_cc = 852;

const int OBJ_id_GostR3411_94_with_GostR3410_94_cc = 1;

const String SN_id_GostR3411_94_with_GostR3410_2001_cc =
    'id-GostR3411-94-with-GostR3410-2001-cc';

const String LN_id_GostR3411_94_with_GostR3410_2001_cc =
    'GOST R 34.11-94 with GOST R 34.10-2001 Cryptocom';

const int NID_id_GostR3411_94_with_GostR3410_2001_cc = 853;

const int OBJ_id_GostR3411_94_with_GostR3410_2001_cc = 1;

const String SN_id_GostR3410_2001_ParamSet_cc = 'id-GostR3410-2001-ParamSet-cc';

const String LN_id_GostR3410_2001_ParamSet_cc =
    'GOST R 3410-2001 Parameter Set Cryptocom';

const int NID_id_GostR3410_2001_ParamSet_cc = 854;

const int OBJ_id_GostR3410_2001_ParamSet_cc = 1;

const String SN_hmac = 'HMAC';

const String LN_hmac = 'hmac';

const int NID_hmac = 855;

const String SN_LocalKeySet = 'LocalKeySet';

const String LN_LocalKeySet = 'Microsoft Local Key set';

const int NID_LocalKeySet = 856;

const int OBJ_LocalKeySet = 1;

const String SN_freshest_crl = 'freshestCRL';

const String LN_freshest_crl = 'X509v3 Freshest CRL';

const int NID_freshest_crl = 857;

const int OBJ_freshest_crl = 2;

const String SN_id_on_permanentIdentifier = 'id-on-permanentIdentifier';

const String LN_id_on_permanentIdentifier = 'Permanent Identifier';

const int NID_id_on_permanentIdentifier = 858;

const int OBJ_id_on_permanentIdentifier = 1;

const String LN_searchGuide = 'searchGuide';

const int NID_searchGuide = 859;

const int OBJ_searchGuide = 2;

const String LN_businessCategory = 'businessCategory';

const int NID_businessCategory = 860;

const int OBJ_businessCategory = 2;

const String LN_postalAddress = 'postalAddress';

const int NID_postalAddress = 861;

const int OBJ_postalAddress = 2;

const String LN_postOfficeBox = 'postOfficeBox';

const int NID_postOfficeBox = 862;

const int OBJ_postOfficeBox = 2;

const String LN_physicalDeliveryOfficeName = 'physicalDeliveryOfficeName';

const int NID_physicalDeliveryOfficeName = 863;

const int OBJ_physicalDeliveryOfficeName = 2;

const String LN_telephoneNumber = 'telephoneNumber';

const int NID_telephoneNumber = 864;

const int OBJ_telephoneNumber = 2;

const String LN_telexNumber = 'telexNumber';

const int NID_telexNumber = 865;

const int OBJ_telexNumber = 2;

const String LN_teletexTerminalIdentifier = 'teletexTerminalIdentifier';

const int NID_teletexTerminalIdentifier = 866;

const int OBJ_teletexTerminalIdentifier = 2;

const String LN_facsimileTelephoneNumber = 'facsimileTelephoneNumber';

const int NID_facsimileTelephoneNumber = 867;

const int OBJ_facsimileTelephoneNumber = 2;

const String LN_x121Address = 'x121Address';

const int NID_x121Address = 868;

const int OBJ_x121Address = 2;

const String LN_internationaliSDNNumber = 'internationaliSDNNumber';

const int NID_internationaliSDNNumber = 869;

const int OBJ_internationaliSDNNumber = 2;

const String LN_registeredAddress = 'registeredAddress';

const int NID_registeredAddress = 870;

const int OBJ_registeredAddress = 2;

const String LN_destinationIndicator = 'destinationIndicator';

const int NID_destinationIndicator = 871;

const int OBJ_destinationIndicator = 2;

const String LN_preferredDeliveryMethod = 'preferredDeliveryMethod';

const int NID_preferredDeliveryMethod = 872;

const int OBJ_preferredDeliveryMethod = 2;

const String LN_presentationAddress = 'presentationAddress';

const int NID_presentationAddress = 873;

const int OBJ_presentationAddress = 2;

const String LN_supportedApplicationContext = 'supportedApplicationContext';

const int NID_supportedApplicationContext = 874;

const int OBJ_supportedApplicationContext = 2;

const String SN_member = 'member';

const int NID_member = 875;

const int OBJ_member = 2;

const String SN_owner = 'owner';

const int NID_owner = 876;

const int OBJ_owner = 2;

const String LN_roleOccupant = 'roleOccupant';

const int NID_roleOccupant = 877;

const int OBJ_roleOccupant = 2;

const String SN_seeAlso = 'seeAlso';

const int NID_seeAlso = 878;

const int OBJ_seeAlso = 2;

const String LN_userPassword = 'userPassword';

const int NID_userPassword = 879;

const int OBJ_userPassword = 2;

const String LN_userCertificate = 'userCertificate';

const int NID_userCertificate = 880;

const int OBJ_userCertificate = 2;

const String LN_cACertificate = 'cACertificate';

const int NID_cACertificate = 881;

const int OBJ_cACertificate = 2;

const String LN_authorityRevocationList = 'authorityRevocationList';

const int NID_authorityRevocationList = 882;

const int OBJ_authorityRevocationList = 2;

const String LN_certificateRevocationList = 'certificateRevocationList';

const int NID_certificateRevocationList = 883;

const int OBJ_certificateRevocationList = 2;

const String LN_crossCertificatePair = 'crossCertificatePair';

const int NID_crossCertificatePair = 884;

const int OBJ_crossCertificatePair = 2;

const String LN_enhancedSearchGuide = 'enhancedSearchGuide';

const int NID_enhancedSearchGuide = 885;

const int OBJ_enhancedSearchGuide = 2;

const String LN_protocolInformation = 'protocolInformation';

const int NID_protocolInformation = 886;

const int OBJ_protocolInformation = 2;

const String LN_distinguishedName = 'distinguishedName';

const int NID_distinguishedName = 887;

const int OBJ_distinguishedName = 2;

const String LN_uniqueMember = 'uniqueMember';

const int NID_uniqueMember = 888;

const int OBJ_uniqueMember = 2;

const String LN_houseIdentifier = 'houseIdentifier';

const int NID_houseIdentifier = 889;

const int OBJ_houseIdentifier = 2;

const String LN_supportedAlgorithms = 'supportedAlgorithms';

const int NID_supportedAlgorithms = 890;

const int OBJ_supportedAlgorithms = 2;

const String LN_deltaRevocationList = 'deltaRevocationList';

const int NID_deltaRevocationList = 891;

const int OBJ_deltaRevocationList = 2;

const String SN_dmdName = 'dmdName';

const int NID_dmdName = 892;

const int OBJ_dmdName = 2;

const String SN_id_alg_PWRI_KEK = 'id-alg-PWRI-KEK';

const int NID_id_alg_PWRI_KEK = 893;

const int OBJ_id_alg_PWRI_KEK = 1;

const String SN_cmac = 'CMAC';

const String LN_cmac = 'cmac';

const int NID_cmac = 894;

const String SN_aes_128_gcm = 'id-aes128-GCM';

const String LN_aes_128_gcm = 'aes-128-gcm';

const int NID_aes_128_gcm = 895;

const int OBJ_aes_128_gcm = 2;

const String SN_aes_128_ccm = 'id-aes128-CCM';

const String LN_aes_128_ccm = 'aes-128-ccm';

const int NID_aes_128_ccm = 896;

const int OBJ_aes_128_ccm = 2;

const String SN_id_aes128_wrap_pad = 'id-aes128-wrap-pad';

const int NID_id_aes128_wrap_pad = 897;

const int OBJ_id_aes128_wrap_pad = 2;

const String SN_aes_192_gcm = 'id-aes192-GCM';

const String LN_aes_192_gcm = 'aes-192-gcm';

const int NID_aes_192_gcm = 898;

const int OBJ_aes_192_gcm = 2;

const String SN_aes_192_ccm = 'id-aes192-CCM';

const String LN_aes_192_ccm = 'aes-192-ccm';

const int NID_aes_192_ccm = 899;

const int OBJ_aes_192_ccm = 2;

const String SN_id_aes192_wrap_pad = 'id-aes192-wrap-pad';

const int NID_id_aes192_wrap_pad = 900;

const int OBJ_id_aes192_wrap_pad = 2;

const String SN_aes_256_gcm = 'id-aes256-GCM';

const String LN_aes_256_gcm = 'aes-256-gcm';

const int NID_aes_256_gcm = 901;

const int OBJ_aes_256_gcm = 2;

const String SN_aes_256_ccm = 'id-aes256-CCM';

const String LN_aes_256_ccm = 'aes-256-ccm';

const int NID_aes_256_ccm = 902;

const int OBJ_aes_256_ccm = 2;

const String SN_id_aes256_wrap_pad = 'id-aes256-wrap-pad';

const int NID_id_aes256_wrap_pad = 903;

const int OBJ_id_aes256_wrap_pad = 2;

const String SN_aes_128_ctr = 'AES-128-CTR';

const String LN_aes_128_ctr = 'aes-128-ctr';

const int NID_aes_128_ctr = 904;

const String SN_aes_192_ctr = 'AES-192-CTR';

const String LN_aes_192_ctr = 'aes-192-ctr';

const int NID_aes_192_ctr = 905;

const String SN_aes_256_ctr = 'AES-256-CTR';

const String LN_aes_256_ctr = 'aes-256-ctr';

const int NID_aes_256_ctr = 906;

const String SN_id_camellia128_wrap = 'id-camellia128-wrap';

const int NID_id_camellia128_wrap = 907;

const int OBJ_id_camellia128_wrap = 1;

const String SN_id_camellia192_wrap = 'id-camellia192-wrap';

const int NID_id_camellia192_wrap = 908;

const int OBJ_id_camellia192_wrap = 1;

const String SN_id_camellia256_wrap = 'id-camellia256-wrap';

const int NID_id_camellia256_wrap = 909;

const int OBJ_id_camellia256_wrap = 1;

const String SN_anyExtendedKeyUsage = 'anyExtendedKeyUsage';

const String LN_anyExtendedKeyUsage = 'Any Extended Key Usage';

const int NID_anyExtendedKeyUsage = 910;

const int OBJ_anyExtendedKeyUsage = 2;

const String SN_mgf1 = 'MGF1';

const String LN_mgf1 = 'mgf1';

const int NID_mgf1 = 911;

const int OBJ_mgf1 = 1;

const String SN_rsassaPss = 'RSASSA-PSS';

const String LN_rsassaPss = 'rsassaPss';

const int NID_rsassaPss = 912;

const int OBJ_rsassaPss = 1;

const String SN_aes_128_xts = 'AES-128-XTS';

const String LN_aes_128_xts = 'aes-128-xts';

const int NID_aes_128_xts = 913;

const String SN_aes_256_xts = 'AES-256-XTS';

const String LN_aes_256_xts = 'aes-256-xts';

const int NID_aes_256_xts = 914;

const String SN_rc4_hmac_md5 = 'RC4-HMAC-MD5';

const String LN_rc4_hmac_md5 = 'rc4-hmac-md5';

const int NID_rc4_hmac_md5 = 915;

const String SN_aes_128_cbc_hmac_sha1 = 'AES-128-CBC-HMAC-SHA1';

const String LN_aes_128_cbc_hmac_sha1 = 'aes-128-cbc-hmac-sha1';

const int NID_aes_128_cbc_hmac_sha1 = 916;

const String SN_aes_192_cbc_hmac_sha1 = 'AES-192-CBC-HMAC-SHA1';

const String LN_aes_192_cbc_hmac_sha1 = 'aes-192-cbc-hmac-sha1';

const int NID_aes_192_cbc_hmac_sha1 = 917;

const String SN_aes_256_cbc_hmac_sha1 = 'AES-256-CBC-HMAC-SHA1';

const String LN_aes_256_cbc_hmac_sha1 = 'aes-256-cbc-hmac-sha1';

const int NID_aes_256_cbc_hmac_sha1 = 918;

const String SN_rsaesOaep = 'RSAES-OAEP';

const String LN_rsaesOaep = 'rsaesOaep';

const int NID_rsaesOaep = 919;

const int OBJ_rsaesOaep = 1;

const String SN_dhpublicnumber = 'dhpublicnumber';

const String LN_dhpublicnumber = 'X9.42 DH';

const int NID_dhpublicnumber = 920;

const int OBJ_dhpublicnumber = 1;

const String SN_brainpoolP160r1 = 'brainpoolP160r1';

const int NID_brainpoolP160r1 = 921;

const int OBJ_brainpoolP160r1 = 1;

const String SN_brainpoolP160t1 = 'brainpoolP160t1';

const int NID_brainpoolP160t1 = 922;

const int OBJ_brainpoolP160t1 = 1;

const String SN_brainpoolP192r1 = 'brainpoolP192r1';

const int NID_brainpoolP192r1 = 923;

const int OBJ_brainpoolP192r1 = 1;

const String SN_brainpoolP192t1 = 'brainpoolP192t1';

const int NID_brainpoolP192t1 = 924;

const int OBJ_brainpoolP192t1 = 1;

const String SN_brainpoolP224r1 = 'brainpoolP224r1';

const int NID_brainpoolP224r1 = 925;

const int OBJ_brainpoolP224r1 = 1;

const String SN_brainpoolP224t1 = 'brainpoolP224t1';

const int NID_brainpoolP224t1 = 926;

const int OBJ_brainpoolP224t1 = 1;

const String SN_brainpoolP256r1 = 'brainpoolP256r1';

const int NID_brainpoolP256r1 = 927;

const int OBJ_brainpoolP256r1 = 1;

const String SN_brainpoolP256t1 = 'brainpoolP256t1';

const int NID_brainpoolP256t1 = 928;

const int OBJ_brainpoolP256t1 = 1;

const String SN_brainpoolP320r1 = 'brainpoolP320r1';

const int NID_brainpoolP320r1 = 929;

const int OBJ_brainpoolP320r1 = 1;

const String SN_brainpoolP320t1 = 'brainpoolP320t1';

const int NID_brainpoolP320t1 = 930;

const int OBJ_brainpoolP320t1 = 1;

const String SN_brainpoolP384r1 = 'brainpoolP384r1';

const int NID_brainpoolP384r1 = 931;

const int OBJ_brainpoolP384r1 = 1;

const String SN_brainpoolP384t1 = 'brainpoolP384t1';

const int NID_brainpoolP384t1 = 932;

const int OBJ_brainpoolP384t1 = 1;

const String SN_brainpoolP512r1 = 'brainpoolP512r1';

const int NID_brainpoolP512r1 = 933;

const int OBJ_brainpoolP512r1 = 1;

const String SN_brainpoolP512t1 = 'brainpoolP512t1';

const int NID_brainpoolP512t1 = 934;

const int OBJ_brainpoolP512t1 = 1;

const String SN_pSpecified = 'PSPECIFIED';

const String LN_pSpecified = 'pSpecified';

const int NID_pSpecified = 935;

const int OBJ_pSpecified = 1;

const String SN_dhSinglePass_stdDH_sha1kdf_scheme =
    'dhSinglePass-stdDH-sha1kdf-scheme';

const int NID_dhSinglePass_stdDH_sha1kdf_scheme = 936;

const int OBJ_dhSinglePass_stdDH_sha1kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha224kdf_scheme =
    'dhSinglePass-stdDH-sha224kdf-scheme';

const int NID_dhSinglePass_stdDH_sha224kdf_scheme = 937;

const int OBJ_dhSinglePass_stdDH_sha224kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha256kdf_scheme =
    'dhSinglePass-stdDH-sha256kdf-scheme';

const int NID_dhSinglePass_stdDH_sha256kdf_scheme = 938;

const int OBJ_dhSinglePass_stdDH_sha256kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha384kdf_scheme =
    'dhSinglePass-stdDH-sha384kdf-scheme';

const int NID_dhSinglePass_stdDH_sha384kdf_scheme = 939;

const int OBJ_dhSinglePass_stdDH_sha384kdf_scheme = 1;

const String SN_dhSinglePass_stdDH_sha512kdf_scheme =
    'dhSinglePass-stdDH-sha512kdf-scheme';

const int NID_dhSinglePass_stdDH_sha512kdf_scheme = 940;

const int OBJ_dhSinglePass_stdDH_sha512kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha1kdf_scheme =
    'dhSinglePass-cofactorDH-sha1kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha1kdf_scheme = 941;

const int OBJ_dhSinglePass_cofactorDH_sha1kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha224kdf_scheme =
    'dhSinglePass-cofactorDH-sha224kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha224kdf_scheme = 942;

const int OBJ_dhSinglePass_cofactorDH_sha224kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha256kdf_scheme =
    'dhSinglePass-cofactorDH-sha256kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha256kdf_scheme = 943;

const int OBJ_dhSinglePass_cofactorDH_sha256kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha384kdf_scheme =
    'dhSinglePass-cofactorDH-sha384kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha384kdf_scheme = 944;

const int OBJ_dhSinglePass_cofactorDH_sha384kdf_scheme = 1;

const String SN_dhSinglePass_cofactorDH_sha512kdf_scheme =
    'dhSinglePass-cofactorDH-sha512kdf-scheme';

const int NID_dhSinglePass_cofactorDH_sha512kdf_scheme = 945;

const int OBJ_dhSinglePass_cofactorDH_sha512kdf_scheme = 1;

const String SN_dh_std_kdf = 'dh-std-kdf';

const int NID_dh_std_kdf = 946;

const String SN_dh_cofactor_kdf = 'dh-cofactor-kdf';

const int NID_dh_cofactor_kdf = 947;

const String SN_X25519 = 'X25519';

const int NID_X25519 = 948;

const int OBJ_X25519 = 1;

const String SN_ED25519 = 'ED25519';

const int NID_ED25519 = 949;

const int OBJ_ED25519 = 1;

const String SN_chacha20_poly1305 = 'ChaCha20-Poly1305';

const String LN_chacha20_poly1305 = 'chacha20-poly1305';

const int NID_chacha20_poly1305 = 950;

const String SN_kx_rsa = 'KxRSA';

const String LN_kx_rsa = 'kx-rsa';

const int NID_kx_rsa = 951;

const String SN_kx_ecdhe = 'KxECDHE';

const String LN_kx_ecdhe = 'kx-ecdhe';

const int NID_kx_ecdhe = 952;

const String SN_kx_psk = 'KxPSK';

const String LN_kx_psk = 'kx-psk';

const int NID_kx_psk = 953;

const String SN_auth_rsa = 'AuthRSA';

const String LN_auth_rsa = 'auth-rsa';

const int NID_auth_rsa = 954;

const String SN_auth_ecdsa = 'AuthECDSA';

const String LN_auth_ecdsa = 'auth-ecdsa';

const int NID_auth_ecdsa = 955;

const String SN_auth_psk = 'AuthPSK';

const String LN_auth_psk = 'auth-psk';

const int NID_auth_psk = 956;

const String SN_kx_any = 'KxANY';

const String LN_kx_any = 'kx-any';

const int NID_kx_any = 957;

const String SN_auth_any = 'AuthANY';

const String LN_auth_any = 'auth-any';

const int NID_auth_any = 958;

const String SN_CECPQ2 = 'CECPQ2';

const int NID_CECPQ2 = 959;

const String SN_ED448 = 'ED448';

const int NID_ED448 = 960;

const int OBJ_ED448 = 1;

const String SN_X448 = 'X448';

const int NID_X448 = 961;

const int OBJ_X448 = 1;

const String SN_sha512_256 = 'SHA512-256';

const String LN_sha512_256 = 'sha512-256';

const int NID_sha512_256 = 962;

const int OBJ_sha512_256 = 2;

const int EVP_PKEY_NONE = 0;

const int EVP_PKEY_RSA = 6;

const int EVP_PKEY_RSA_PSS = 912;

const int EVP_PKEY_DSA = 116;

const int EVP_PKEY_EC = 408;

const int EVP_PKEY_ED25519 = 949;

const int EVP_PKEY_X25519 = 948;

const int EVP_PKEY_DH = 28;

const int EVP_PKEY_RSA2 = 19;

const int EVP_PKEY_X448 = 961;

const int EVP_PKEY_ED448 = 960;

const int EVP_R_BUFFER_TOO_SMALL = 100;

const int EVP_R_COMMAND_NOT_SUPPORTED = 101;

const int EVP_R_DECODE_ERROR = 102;

const int EVP_R_DIFFERENT_KEY_TYPES = 103;

const int EVP_R_DIFFERENT_PARAMETERS = 104;

const int EVP_R_ENCODE_ERROR = 105;

const int EVP_R_EXPECTING_AN_EC_KEY_KEY = 106;

const int EVP_R_EXPECTING_AN_RSA_KEY = 107;

const int EVP_R_EXPECTING_A_DSA_KEY = 108;

const int EVP_R_ILLEGAL_OR_UNSUPPORTED_PADDING_MODE = 109;

const int EVP_R_INVALID_DIGEST_LENGTH = 110;

const int EVP_R_INVALID_DIGEST_TYPE = 111;

const int EVP_R_INVALID_KEYBITS = 112;

const int EVP_R_INVALID_MGF1_MD = 113;

const int EVP_R_INVALID_OPERATION = 114;

const int EVP_R_INVALID_PADDING_MODE = 115;

const int EVP_R_INVALID_PSS_SALTLEN = 116;

const int EVP_R_KEYS_NOT_SET = 117;

const int EVP_R_MISSING_PARAMETERS = 118;

const int EVP_R_NO_DEFAULT_DIGEST = 119;

const int EVP_R_NO_KEY_SET = 120;

const int EVP_R_NO_MDC2_SUPPORT = 121;

const int EVP_R_NO_NID_FOR_CURVE = 122;

const int EVP_R_NO_OPERATION_SET = 123;

const int EVP_R_NO_PARAMETERS_SET = 124;

const int EVP_R_OPERATION_NOT_SUPPORTED_FOR_THIS_KEYTYPE = 125;

const int EVP_R_OPERATON_NOT_INITIALIZED = 126;

const int EVP_R_UNKNOWN_PUBLIC_KEY_TYPE = 127;

const int EVP_R_UNSUPPORTED_ALGORITHM = 128;

const int EVP_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 129;

const int EVP_R_NOT_A_PRIVATE_KEY = 130;

const int EVP_R_INVALID_SIGNATURE = 131;

const int EVP_R_MEMORY_LIMIT_EXCEEDED = 132;

const int EVP_R_INVALID_PARAMETERS = 133;

const int EVP_R_INVALID_PEER_KEY = 134;

const int EVP_R_NOT_XOF_OR_INVALID_LENGTH = 135;

const int PKCS7_DETACHED = 64;

const int PKCS7_TEXT = 1;

const int PKCS7_NOCERTS = 2;

const int PKCS7_NOSIGS = 4;

const int PKCS7_NOCHAIN = 8;

const int PKCS7_NOINTERN = 16;

const int PKCS7_NOVERIFY = 32;

const int PKCS7_BINARY = 128;

const int PKCS7_NOATTR = 256;

const int PKCS7_NOSMIMECAP = 512;

const int PKCS7_STREAM = 4096;

const int PKCS7_R_BAD_PKCS7_VERSION = 100;

const int PKCS7_R_NOT_PKCS7_SIGNED_DATA = 101;

const int PKCS7_R_NO_CERTIFICATES_INCLUDED = 102;

const int PKCS7_R_NO_CRLS_INCLUDED = 103;

const int CLOCKS_PER_SEC = 1000000;

const int CLOCK_REALTIME = 0;

const int CLOCK_MONOTONIC = 6;

const int CLOCK_MONOTONIC_RAW = 4;

const int CLOCK_MONOTONIC_RAW_APPROX = 5;

const int CLOCK_UPTIME_RAW = 8;

const int CLOCK_UPTIME_RAW_APPROX = 9;

const int CLOCK_PROCESS_CPUTIME_ID = 12;

const int CLOCK_THREAD_CPUTIME_ID = 16;

const String __PRI_8_LENGTH_MODIFIER__ = 'hh';

const String __PRI_64_LENGTH_MODIFIER__ = 'll';

const String __SCN_64_LENGTH_MODIFIER__ = 'll';

const String __PRI_MAX_LENGTH_MODIFIER__ = 'j';

const String __SCN_MAX_LENGTH_MODIFIER__ = 'j';

const String PRId8 = 'hhd';

const String PRIi8 = 'hhi';

const String PRIo8 = 'hho';

const String PRIu8 = 'hhu';

const String PRIx8 = 'hhx';

const String PRIX8 = 'hhX';

const String PRId16 = 'hd';

const String PRIi16 = 'hi';

const String PRIo16 = 'ho';

const String PRIu16 = 'hu';

const String PRIx16 = 'hx';

const String PRIX16 = 'hX';

const String PRId32 = 'd';

const String PRIi32 = 'i';

const String PRIo32 = 'o';

const String PRIu32 = 'u';

const String PRIx32 = 'x';

const String PRIX32 = 'X';

const String PRId64 = 'lld';

const String PRIi64 = 'lli';

const String PRIo64 = 'llo';

const String PRIu64 = 'llu';

const String PRIx64 = 'llx';

const String PRIX64 = 'llX';

const String PRIdLEAST8 = 'hhd';

const String PRIiLEAST8 = 'hhi';

const String PRIoLEAST8 = 'hho';

const String PRIuLEAST8 = 'hhu';

const String PRIxLEAST8 = 'hhx';

const String PRIXLEAST8 = 'hhX';

const String PRIdLEAST16 = 'hd';

const String PRIiLEAST16 = 'hi';

const String PRIoLEAST16 = 'ho';

const String PRIuLEAST16 = 'hu';

const String PRIxLEAST16 = 'hx';

const String PRIXLEAST16 = 'hX';

const String PRIdLEAST32 = 'd';

const String PRIiLEAST32 = 'i';

const String PRIoLEAST32 = 'o';

const String PRIuLEAST32 = 'u';

const String PRIxLEAST32 = 'x';

const String PRIXLEAST32 = 'X';

const String PRIdLEAST64 = 'lld';

const String PRIiLEAST64 = 'lli';

const String PRIoLEAST64 = 'llo';

const String PRIuLEAST64 = 'llu';

const String PRIxLEAST64 = 'llx';

const String PRIXLEAST64 = 'llX';

const String PRIdFAST8 = 'hhd';

const String PRIiFAST8 = 'hhi';

const String PRIoFAST8 = 'hho';

const String PRIuFAST8 = 'hhu';

const String PRIxFAST8 = 'hhx';

const String PRIXFAST8 = 'hhX';

const String PRIdFAST16 = 'hd';

const String PRIiFAST16 = 'hi';

const String PRIoFAST16 = 'ho';

const String PRIuFAST16 = 'hu';

const String PRIxFAST16 = 'hx';

const String PRIXFAST16 = 'hX';

const String PRIdFAST32 = 'd';

const String PRIiFAST32 = 'i';

const String PRIoFAST32 = 'o';

const String PRIuFAST32 = 'u';

const String PRIxFAST32 = 'x';

const String PRIXFAST32 = 'X';

const String PRIdFAST64 = 'lld';

const String PRIiFAST64 = 'lli';

const String PRIoFAST64 = 'llo';

const String PRIuFAST64 = 'llu';

const String PRIxFAST64 = 'llx';

const String PRIXFAST64 = 'llX';

const String PRIdPTR = 'ld';

const String PRIiPTR = 'li';

const String PRIoPTR = 'lo';

const String PRIuPTR = 'lu';

const String PRIxPTR = 'lx';

const String PRIXPTR = 'lX';

const String PRIdMAX = 'jd';

const String PRIiMAX = 'ji';

const String PRIoMAX = 'jo';

const String PRIuMAX = 'ju';

const String PRIxMAX = 'jx';

const String PRIXMAX = 'jX';

const String SCNd8 = 'hhd';

const String SCNi8 = 'hhi';

const String SCNo8 = 'hho';

const String SCNu8 = 'hhu';

const String SCNx8 = 'hhx';

const String SCNd16 = 'hd';

const String SCNi16 = 'hi';

const String SCNo16 = 'ho';

const String SCNu16 = 'hu';

const String SCNx16 = 'hx';

const String SCNd32 = 'd';

const String SCNi32 = 'i';

const String SCNo32 = 'o';

const String SCNu32 = 'u';

const String SCNx32 = 'x';

const String SCNd64 = 'lld';

const String SCNi64 = 'lli';

const String SCNo64 = 'llo';

const String SCNu64 = 'llu';

const String SCNx64 = 'llx';

const String SCNdLEAST8 = 'hhd';

const String SCNiLEAST8 = 'hhi';

const String SCNoLEAST8 = 'hho';

const String SCNuLEAST8 = 'hhu';

const String SCNxLEAST8 = 'hhx';

const String SCNdLEAST16 = 'hd';

const String SCNiLEAST16 = 'hi';

const String SCNoLEAST16 = 'ho';

const String SCNuLEAST16 = 'hu';

const String SCNxLEAST16 = 'hx';

const String SCNdLEAST32 = 'd';

const String SCNiLEAST32 = 'i';

const String SCNoLEAST32 = 'o';

const String SCNuLEAST32 = 'u';

const String SCNxLEAST32 = 'x';

const String SCNdLEAST64 = 'lld';

const String SCNiLEAST64 = 'lli';

const String SCNoLEAST64 = 'llo';

const String SCNuLEAST64 = 'llu';

const String SCNxLEAST64 = 'llx';

const String SCNdFAST8 = 'hhd';

const String SCNiFAST8 = 'hhi';

const String SCNoFAST8 = 'hho';

const String SCNuFAST8 = 'hhu';

const String SCNxFAST8 = 'hhx';

const String SCNdFAST16 = 'hd';

const String SCNiFAST16 = 'hi';

const String SCNoFAST16 = 'ho';

const String SCNuFAST16 = 'hu';

const String SCNxFAST16 = 'hx';

const String SCNdFAST32 = 'd';

const String SCNiFAST32 = 'i';

const String SCNoFAST32 = 'o';

const String SCNuFAST32 = 'u';

const String SCNxFAST32 = 'x';

const String SCNdFAST64 = 'lld';

const String SCNiFAST64 = 'lli';

const String SCNoFAST64 = 'llo';

const String SCNuFAST64 = 'llu';

const String SCNxFAST64 = 'llx';

const String SCNdPTR = 'ld';

const String SCNiPTR = 'li';

const String SCNoPTR = 'lo';

const String SCNuPTR = 'lu';

const String SCNxPTR = 'lx';

const String SCNdMAX = 'jd';

const String SCNiMAX = 'ji';

const String SCNoMAX = 'jo';

const String SCNuMAX = 'ju';

const String SCNxMAX = 'jx';

const int BN_BITS2 = 64;

const String BN_DEC_FMT1 = '%llu';

const String BN_DEC_FMT2 = '%019llu';

const String BN_HEX_FMT1 = '%llx';

const String BN_HEX_FMT2 = '%016llx';

const int BN_RAND_TOP_ANY = -1;

const int BN_RAND_TOP_ONE = 0;

const int BN_RAND_TOP_TWO = 1;

const int BN_RAND_BOTTOM_ANY = 0;

const int BN_RAND_BOTTOM_ODD = 1;

const int BN_GENCB_GENERATED = 0;

const int BN_GENCB_PRIME_TEST = 1;

const int BN_prime_checks_for_validation = 32;

const int BN_prime_checks_for_generation = 0;

const int BN_prime_checks = 32;

const int BN_FLG_MALLOCED = 1;

const int BN_FLG_STATIC_DATA = 2;

const int BN_R_ARG2_LT_ARG3 = 100;

const int BN_R_BAD_RECIPROCAL = 101;

const int BN_R_BIGNUM_TOO_LONG = 102;

const int BN_R_BITS_TOO_SMALL = 103;

const int BN_R_CALLED_WITH_EVEN_MODULUS = 104;

const int BN_R_DIV_BY_ZERO = 105;

const int BN_R_EXPAND_ON_STATIC_BIGNUM_DATA = 106;

const int BN_R_INPUT_NOT_REDUCED = 107;

const int BN_R_INVALID_RANGE = 108;

const int BN_R_NEGATIVE_NUMBER = 109;

const int BN_R_NOT_A_SQUARE = 110;

const int BN_R_NOT_INITIALIZED = 111;

const int BN_R_NO_INVERSE = 112;

const int BN_R_PRIVATE_KEY_TOO_LARGE = 113;

const int BN_R_P_IS_NOT_PRIME = 114;

const int BN_R_TOO_MANY_ITERATIONS = 115;

const int BN_R_TOO_MANY_TEMPORARY_VARIABLES = 116;

const int BN_R_BAD_ENCODING = 117;

const int BN_R_ENCODE_ERROR = 118;

const int BN_R_INVALID_INPUT = 119;

const int V_ASN1_UNIVERSAL = 0;

const int V_ASN1_APPLICATION = 64;

const int V_ASN1_CONTEXT_SPECIFIC = 128;

const int V_ASN1_PRIVATE = 192;

const int V_ASN1_CONSTRUCTED = 32;

const int V_ASN1_PRIMITIVE_TAG = 31;

const int V_ASN1_APP_CHOOSE = -2;

const int V_ASN1_OTHER = -3;

const int V_ASN1_ANY = -4;

const int V_ASN1_NEG = 256;

const int V_ASN1_MAX_UNIVERSAL = 255;

const int V_ASN1_UNDEF = -1;

const int V_ASN1_EOC = 0;

const int V_ASN1_BOOLEAN = 1;

const int V_ASN1_INTEGER = 2;

const int V_ASN1_NEG_INTEGER = 258;

const int V_ASN1_BIT_STRING = 3;

const int V_ASN1_OCTET_STRING = 4;

const int V_ASN1_NULL = 5;

const int V_ASN1_OBJECT = 6;

const int V_ASN1_OBJECT_DESCRIPTOR = 7;

const int V_ASN1_EXTERNAL = 8;

const int V_ASN1_REAL = 9;

const int V_ASN1_ENUMERATED = 10;

const int V_ASN1_NEG_ENUMERATED = 266;

const int V_ASN1_UTF8STRING = 12;

const int V_ASN1_SEQUENCE = 16;

const int V_ASN1_SET = 17;

const int V_ASN1_NUMERICSTRING = 18;

const int V_ASN1_PRINTABLESTRING = 19;

const int V_ASN1_T61STRING = 20;

const int V_ASN1_TELETEXSTRING = 20;

const int V_ASN1_VIDEOTEXSTRING = 21;

const int V_ASN1_IA5STRING = 22;

const int V_ASN1_UTCTIME = 23;

const int V_ASN1_GENERALIZEDTIME = 24;

const int V_ASN1_GRAPHICSTRING = 25;

const int V_ASN1_ISO64STRING = 26;

const int V_ASN1_VISIBLESTRING = 26;

const int V_ASN1_GENERALSTRING = 27;

const int V_ASN1_UNIVERSALSTRING = 28;

const int V_ASN1_BMPSTRING = 30;

const int B_ASN1_NUMERICSTRING = 1;

const int B_ASN1_PRINTABLESTRING = 2;

const int B_ASN1_T61STRING = 4;

const int B_ASN1_TELETEXSTRING = 4;

const int B_ASN1_VIDEOTEXSTRING = 8;

const int B_ASN1_IA5STRING = 16;

const int B_ASN1_GRAPHICSTRING = 32;

const int B_ASN1_ISO64STRING = 64;

const int B_ASN1_VISIBLESTRING = 64;

const int B_ASN1_GENERALSTRING = 128;

const int B_ASN1_UNIVERSALSTRING = 256;

const int B_ASN1_OCTET_STRING = 512;

const int B_ASN1_BIT_STRING = 1024;

const int B_ASN1_BMPSTRING = 2048;

const int B_ASN1_UNKNOWN = 4096;

const int B_ASN1_UTF8STRING = 8192;

const int B_ASN1_UTCTIME = 16384;

const int B_ASN1_GENERALIZEDTIME = 32768;

const int B_ASN1_SEQUENCE = 65536;

const int MBSTRING_FLAG = 4096;

const int MBSTRING_UTF8 = 4096;

const int MBSTRING_ASC = 4097;

const int MBSTRING_BMP = 4098;

const int MBSTRING_UNIV = 4100;

const int ASN1_OBJECT_FLAG_DYNAMIC = 1;

const int ASN1_OBJECT_FLAG_DYNAMIC_STRINGS = 4;

const int ASN1_OBJECT_FLAG_DYNAMIC_DATA = 8;

const int ASN1_STRING_FLAG_BITS_LEFT = 8;

const int ASN1_STRING_FLAG_NDEF = 16;

const int ASN1_STRING_FLAG_MSTRING = 64;

const int STABLE_FLAGS_MALLOC = 1;

const int STABLE_NO_MASK = 2;

const int DIRSTRING_TYPE = 10246;

const int PKCS9STRING_TYPE = 10262;

const int ub_name = 32768;

const int ub_common_name = 64;

const int ub_locality_name = 128;

const int ub_state_name = 128;

const int ub_organization_name = 64;

const int ub_organization_unit_name = 64;

const int ub_title = 64;

const int ub_email_address = 128;

const int ASN1_STRFLGS_ESC_2253 = 1;

const int ASN1_STRFLGS_ESC_CTRL = 2;

const int ASN1_STRFLGS_ESC_MSB = 4;

const int ASN1_STRFLGS_ESC_QUOTE = 8;

const int CHARTYPE_PRINTABLESTRING = 16;

const int CHARTYPE_FIRST_ESC_2253 = 32;

const int CHARTYPE_LAST_ESC_2253 = 64;

const int ASN1_STRFLGS_UTF8_CONVERT = 16;

const int ASN1_STRFLGS_IGNORE_TYPE = 32;

const int ASN1_STRFLGS_SHOW_TYPE = 64;

const int ASN1_STRFLGS_DUMP_ALL = 128;

const int ASN1_STRFLGS_DUMP_UNKNOWN = 256;

const int ASN1_STRFLGS_DUMP_DER = 512;

const int ASN1_STRFLGS_RFC2253 = 791;

const int B_ASN1_TIME = 49152;

const int B_ASN1_PRINTABLE = 81175;

const int B_ASN1_DIRECTORYSTRING = 10502;

const int B_ASN1_DISPLAYTEXT = 10320;

const int ASN1_R_ASN1_LENGTH_MISMATCH = 100;

const int ASN1_R_AUX_ERROR = 101;

const int ASN1_R_BAD_GET_ASN1_OBJECT_CALL = 102;

const int ASN1_R_BAD_OBJECT_HEADER = 103;

const int ASN1_R_BMPSTRING_IS_WRONG_LENGTH = 104;

const int ASN1_R_BN_LIB = 105;

const int ASN1_R_BOOLEAN_IS_WRONG_LENGTH = 106;

const int ASN1_R_BUFFER_TOO_SMALL = 107;

const int ASN1_R_CONTEXT_NOT_INITIALISED = 108;

const int ASN1_R_DECODE_ERROR = 109;

const int ASN1_R_DEPTH_EXCEEDED = 110;

const int ASN1_R_DIGEST_AND_KEY_TYPE_NOT_SUPPORTED = 111;

const int ASN1_R_ENCODE_ERROR = 112;

const int ASN1_R_ERROR_GETTING_TIME = 113;

const int ASN1_R_EXPECTING_AN_ASN1_SEQUENCE = 114;

const int ASN1_R_EXPECTING_AN_INTEGER = 115;

const int ASN1_R_EXPECTING_AN_OBJECT = 116;

const int ASN1_R_EXPECTING_A_BOOLEAN = 117;

const int ASN1_R_EXPECTING_A_TIME = 118;

const int ASN1_R_EXPLICIT_LENGTH_MISMATCH = 119;

const int ASN1_R_EXPLICIT_TAG_NOT_CONSTRUCTED = 120;

const int ASN1_R_FIELD_MISSING = 121;

const int ASN1_R_FIRST_NUM_TOO_LARGE = 122;

const int ASN1_R_HEADER_TOO_LONG = 123;

const int ASN1_R_ILLEGAL_BITSTRING_FORMAT = 124;

const int ASN1_R_ILLEGAL_BOOLEAN = 125;

const int ASN1_R_ILLEGAL_CHARACTERS = 126;

const int ASN1_R_ILLEGAL_FORMAT = 127;

const int ASN1_R_ILLEGAL_HEX = 128;

const int ASN1_R_ILLEGAL_IMPLICIT_TAG = 129;

const int ASN1_R_ILLEGAL_INTEGER = 130;

const int ASN1_R_ILLEGAL_NESTED_TAGGING = 131;

const int ASN1_R_ILLEGAL_NULL = 132;

const int ASN1_R_ILLEGAL_NULL_VALUE = 133;

const int ASN1_R_ILLEGAL_OBJECT = 134;

const int ASN1_R_ILLEGAL_OPTIONAL_ANY = 135;

const int ASN1_R_ILLEGAL_OPTIONS_ON_ITEM_TEMPLATE = 136;

const int ASN1_R_ILLEGAL_TAGGED_ANY = 137;

const int ASN1_R_ILLEGAL_TIME_VALUE = 138;

const int ASN1_R_INTEGER_NOT_ASCII_FORMAT = 139;

const int ASN1_R_INTEGER_TOO_LARGE_FOR_LONG = 140;

const int ASN1_R_INVALID_BIT_STRING_BITS_LEFT = 141;

const int ASN1_R_INVALID_BMPSTRING = 142;

const int ASN1_R_INVALID_DIGIT = 143;

const int ASN1_R_INVALID_MODIFIER = 144;

const int ASN1_R_INVALID_NUMBER = 145;

const int ASN1_R_INVALID_OBJECT_ENCODING = 146;

const int ASN1_R_INVALID_SEPARATOR = 147;

const int ASN1_R_INVALID_TIME_FORMAT = 148;

const int ASN1_R_INVALID_UNIVERSALSTRING = 149;

const int ASN1_R_INVALID_UTF8STRING = 150;

const int ASN1_R_LIST_ERROR = 151;

const int ASN1_R_MISSING_ASN1_EOS = 152;

const int ASN1_R_MISSING_EOC = 153;

const int ASN1_R_MISSING_SECOND_NUMBER = 154;

const int ASN1_R_MISSING_VALUE = 155;

const int ASN1_R_MSTRING_NOT_UNIVERSAL = 156;

const int ASN1_R_MSTRING_WRONG_TAG = 157;

const int ASN1_R_NESTED_ASN1_ERROR = 158;

const int ASN1_R_NESTED_ASN1_STRING = 159;

const int ASN1_R_NON_HEX_CHARACTERS = 160;

const int ASN1_R_NOT_ASCII_FORMAT = 161;

const int ASN1_R_NOT_ENOUGH_DATA = 162;

const int ASN1_R_NO_MATCHING_CHOICE_TYPE = 163;

const int ASN1_R_NULL_IS_WRONG_LENGTH = 164;

const int ASN1_R_OBJECT_NOT_ASCII_FORMAT = 165;

const int ASN1_R_ODD_NUMBER_OF_CHARS = 166;

const int ASN1_R_SECOND_NUMBER_TOO_LARGE = 167;

const int ASN1_R_SEQUENCE_LENGTH_MISMATCH = 168;

const int ASN1_R_SEQUENCE_NOT_CONSTRUCTED = 169;

const int ASN1_R_SEQUENCE_OR_SET_NEEDS_CONFIG = 170;

const int ASN1_R_SHORT_LINE = 171;

const int ASN1_R_STREAMING_NOT_SUPPORTED = 172;

const int ASN1_R_STRING_TOO_LONG = 173;

const int ASN1_R_STRING_TOO_SHORT = 174;

const int ASN1_R_TAG_VALUE_TOO_HIGH = 175;

const int ASN1_R_TIME_NOT_ASCII_FORMAT = 176;

const int ASN1_R_TOO_LONG = 177;

const int ASN1_R_TYPE_NOT_CONSTRUCTED = 178;

const int ASN1_R_TYPE_NOT_PRIMITIVE = 179;

const int ASN1_R_UNEXPECTED_EOC = 180;

const int ASN1_R_UNIVERSALSTRING_IS_WRONG_LENGTH = 181;

const int ASN1_R_UNKNOWN_FORMAT = 182;

const int ASN1_R_UNKNOWN_MESSAGE_DIGEST_ALGORITHM = 183;

const int ASN1_R_UNKNOWN_SIGNATURE_ALGORITHM = 184;

const int ASN1_R_UNKNOWN_TAG = 185;

const int ASN1_R_UNSUPPORTED_ANY_DEFINED_BY_TYPE = 186;

const int ASN1_R_UNSUPPORTED_PUBLIC_KEY_TYPE = 187;

const int ASN1_R_UNSUPPORTED_TYPE = 188;

const int ASN1_R_WRONG_PUBLIC_KEY_TYPE = 189;

const int ASN1_R_WRONG_TAG = 190;

const int ASN1_R_WRONG_TYPE = 191;

const int ASN1_R_NESTED_TOO_DEEP = 192;

const int DH_GENERATOR_2 = 2;

const int DH_GENERATOR_5 = 5;

const int DH_CHECK_P_NOT_PRIME = 1;

const int DH_CHECK_P_NOT_SAFE_PRIME = 2;

const int DH_CHECK_UNABLE_TO_CHECK_GENERATOR = 4;

const int DH_CHECK_NOT_SUITABLE_GENERATOR = 8;

const int DH_CHECK_Q_NOT_PRIME = 16;

const int DH_CHECK_INVALID_Q_VALUE = 32;

const int DH_CHECK_INVALID_J_VALUE = 64;

const int DH_NOT_SUITABLE_GENERATOR = 8;

const int DH_UNABLE_TO_CHECK_GENERATOR = 4;

const int DH_CHECK_PUBKEY_TOO_SMALL = 1;

const int DH_CHECK_PUBKEY_TOO_LARGE = 2;

const int DH_CHECK_PUBKEY_INVALID = 4;

const int DH_R_BAD_GENERATOR = 100;

const int DH_R_INVALID_PUBKEY = 101;

const int DH_R_MODULUS_TOO_LARGE = 102;

const int DH_R_NO_PRIVATE_VALUE = 103;

const int DH_R_DECODE_ERROR = 104;

const int DH_R_ENCODE_ERROR = 105;

const int ENGINE_R_OPERATION_NOT_SUPPORTED = 100;

const int DSA_R_BAD_Q_VALUE = 100;

const int DSA_R_MISSING_PARAMETERS = 101;

const int DSA_R_MODULUS_TOO_LARGE = 102;

const int DSA_R_NEED_NEW_SETUP_VALUES = 103;

const int DSA_R_BAD_VERSION = 104;

const int DSA_R_DECODE_ERROR = 105;

const int DSA_R_ENCODE_ERROR = 106;

const int DSA_R_INVALID_PARAMETERS = 107;

const int OPENSSL_EC_NAMED_CURVE = 0;

const int OPENSSL_EC_EXPLICIT_CURVE = 1;

const int EC_PKEY_NO_PARAMETERS = 1;

const int EC_PKEY_NO_PUBKEY = 2;

const int ECDSA_FLAG_OPAQUE = 1;

const int EC_R_BUFFER_TOO_SMALL = 100;

const int EC_R_COORDINATES_OUT_OF_RANGE = 101;

const int EC_R_D2I_ECPKPARAMETERS_FAILURE = 102;

const int EC_R_EC_GROUP_NEW_BY_NAME_FAILURE = 103;

const int EC_R_GROUP2PKPARAMETERS_FAILURE = 104;

const int EC_R_I2D_ECPKPARAMETERS_FAILURE = 105;

const int EC_R_INCOMPATIBLE_OBJECTS = 106;

const int EC_R_INVALID_COMPRESSED_POINT = 107;

const int EC_R_INVALID_COMPRESSION_BIT = 108;

const int EC_R_INVALID_ENCODING = 109;

const int EC_R_INVALID_FIELD = 110;

const int EC_R_INVALID_FORM = 111;

const int EC_R_INVALID_GROUP_ORDER = 112;

const int EC_R_INVALID_PRIVATE_KEY = 113;

const int EC_R_MISSING_PARAMETERS = 114;

const int EC_R_MISSING_PRIVATE_KEY = 115;

const int EC_R_NON_NAMED_CURVE = 116;

const int EC_R_NOT_INITIALIZED = 117;

const int EC_R_PKPARAMETERS2GROUP_FAILURE = 118;

const int EC_R_POINT_AT_INFINITY = 119;

const int EC_R_POINT_IS_NOT_ON_CURVE = 120;

const int EC_R_SLOT_FULL = 121;

const int EC_R_UNDEFINED_GENERATOR = 122;

const int EC_R_UNKNOWN_GROUP = 123;

const int EC_R_UNKNOWN_ORDER = 124;

const int EC_R_WRONG_ORDER = 125;

const int EC_R_BIGNUM_OUT_OF_RANGE = 126;

const int EC_R_WRONG_CURVE_PARAMETERS = 127;

const int EC_R_DECODE_ERROR = 128;

const int EC_R_ENCODE_ERROR = 129;

const int EC_R_GROUP_MISMATCH = 130;

const int EC_R_INVALID_COFACTOR = 131;

const int EC_R_PUBLIC_KEY_VALIDATION_FAILED = 132;

const int EC_R_INVALID_SCALAR = 133;

const int ECDH_R_KDF_FAILED = 100;

const int ECDH_R_NO_PRIVATE_VALUE = 101;

const int ECDH_R_POINT_ARITHMETIC_FAILURE = 102;

const int ECDH_R_UNKNOWN_DIGEST_LENGTH = 103;

const int ECDSA_R_BAD_SIGNATURE = 100;

const int ECDSA_R_MISSING_PARAMETERS = 101;

const int ECDSA_R_NEED_NEW_SETUP_VALUES = 102;

const int ECDSA_R_NOT_IMPLEMENTED = 103;

const int ECDSA_R_RANDOM_NUMBER_GENERATION_FAILED = 104;

const int ECDSA_R_ENCODE_ERROR = 105;

const int CBS_ASN1_TAG_SHIFT = 24;

const int CBS_ASN1_CONSTRUCTED = 536870912;

const int CBS_ASN1_UNIVERSAL = 0;

const int CBS_ASN1_APPLICATION = 1073741824;

const int CBS_ASN1_CONTEXT_SPECIFIC = 2147483648;

const int CBS_ASN1_PRIVATE = 3221225472;

const int CBS_ASN1_CLASS_MASK = 3221225472;

const int CBS_ASN1_TAG_NUMBER_MASK = 536870911;

const int CBS_ASN1_BOOLEAN = 1;

const int CBS_ASN1_INTEGER = 2;

const int CBS_ASN1_BITSTRING = 3;

const int CBS_ASN1_OCTETSTRING = 4;

const int CBS_ASN1_NULL = 5;

const int CBS_ASN1_OBJECT = 6;

const int CBS_ASN1_ENUMERATED = 10;

const int CBS_ASN1_UTF8STRING = 12;

const int CBS_ASN1_SEQUENCE = 536870928;

const int CBS_ASN1_SET = 536870929;

const int CBS_ASN1_NUMERICSTRING = 18;

const int CBS_ASN1_PRINTABLESTRING = 19;

const int CBS_ASN1_T61STRING = 20;

const int CBS_ASN1_VIDEOTEXSTRING = 21;

const int CBS_ASN1_IA5STRING = 22;

const int CBS_ASN1_UTCTIME = 23;

const int CBS_ASN1_GENERALIZEDTIME = 24;

const int CBS_ASN1_GRAPHICSTRING = 25;

const int CBS_ASN1_VISIBLESTRING = 26;

const int CBS_ASN1_GENERALSTRING = 27;

const int CBS_ASN1_UNIVERSALSTRING = 28;

const int CBS_ASN1_BMPSTRING = 30;

const int OBJ_NAME_TYPE_MD_METH = 1;

const int OBJ_NAME_TYPE_CIPHER_METH = 2;

const int OBJ_R_UNKNOWN_NID = 100;

const int OBJ_R_INVALID_OID_STRING = 101;

const int RSA_PKCS1_PADDING = 1;

const int RSA_NO_PADDING = 3;

const int RSA_PKCS1_OAEP_PADDING = 4;

const int RSA_PKCS1_PSS_PADDING = 6;

const int RSA_FLAG_OPAQUE = 1;

const int RSA_FLAG_NO_BLINDING = 8;

const int RSA_FLAG_EXT_PKEY = 32;

const int RSA_3 = 3;

const int RSA_F4 = 65537;

const int RSA_METHOD_FLAG_NO_CHECK = 1;

const int RSA_R_BAD_ENCODING = 100;

const int RSA_R_BAD_E_VALUE = 101;

const int RSA_R_BAD_FIXED_HEADER_DECRYPT = 102;

const int RSA_R_BAD_PAD_BYTE_COUNT = 103;

const int RSA_R_BAD_RSA_PARAMETERS = 104;

const int RSA_R_BAD_SIGNATURE = 105;

const int RSA_R_BAD_VERSION = 106;

const int RSA_R_BLOCK_TYPE_IS_NOT_01 = 107;

const int RSA_R_BN_NOT_INITIALIZED = 108;

const int RSA_R_CANNOT_RECOVER_MULTI_PRIME_KEY = 109;

const int RSA_R_CRT_PARAMS_ALREADY_GIVEN = 110;

const int RSA_R_CRT_VALUES_INCORRECT = 111;

const int RSA_R_DATA_LEN_NOT_EQUAL_TO_MOD_LEN = 112;

const int RSA_R_DATA_TOO_LARGE = 113;

const int RSA_R_DATA_TOO_LARGE_FOR_KEY_SIZE = 114;

const int RSA_R_DATA_TOO_LARGE_FOR_MODULUS = 115;

const int RSA_R_DATA_TOO_SMALL = 116;

const int RSA_R_DATA_TOO_SMALL_FOR_KEY_SIZE = 117;

const int RSA_R_DIGEST_TOO_BIG_FOR_RSA_KEY = 118;

const int RSA_R_D_E_NOT_CONGRUENT_TO_1 = 119;

const int RSA_R_EMPTY_PUBLIC_KEY = 120;

const int RSA_R_ENCODE_ERROR = 121;

const int RSA_R_FIRST_OCTET_INVALID = 122;

const int RSA_R_INCONSISTENT_SET_OF_CRT_VALUES = 123;

const int RSA_R_INTERNAL_ERROR = 124;

const int RSA_R_INVALID_MESSAGE_LENGTH = 125;

const int RSA_R_KEY_SIZE_TOO_SMALL = 126;

const int RSA_R_LAST_OCTET_INVALID = 127;

const int RSA_R_MODULUS_TOO_LARGE = 128;

const int RSA_R_MUST_HAVE_AT_LEAST_TWO_PRIMES = 129;

const int RSA_R_NO_PUBLIC_EXPONENT = 130;

const int RSA_R_NULL_BEFORE_BLOCK_MISSING = 131;

const int RSA_R_N_NOT_EQUAL_P_Q = 132;

const int RSA_R_OAEP_DECODING_ERROR = 133;

const int RSA_R_ONLY_ONE_OF_P_Q_GIVEN = 134;

const int RSA_R_OUTPUT_BUFFER_TOO_SMALL = 135;

const int RSA_R_PADDING_CHECK_FAILED = 136;

const int RSA_R_PKCS_DECODING_ERROR = 137;

const int RSA_R_SLEN_CHECK_FAILED = 138;

const int RSA_R_SLEN_RECOVERY_FAILED = 139;

const int RSA_R_TOO_LONG = 140;

const int RSA_R_TOO_MANY_ITERATIONS = 141;

const int RSA_R_UNKNOWN_ALGORITHM_TYPE = 142;

const int RSA_R_UNKNOWN_PADDING_TYPE = 143;

const int RSA_R_VALUE_MISSING = 144;

const int RSA_R_WRONG_SIGNATURE_LENGTH = 145;

const int RSA_R_PUBLIC_KEY_VALIDATION_FAILED = 146;

const int RSA_R_D_OUT_OF_RANGE = 147;

const int RSA_R_BLOCK_TYPE_IS_NOT_02 = 148;

const int SHA_CBLOCK = 64;

const int SHA_DIGEST_LENGTH = 20;

const int SHA224_CBLOCK = 64;

const int SHA224_DIGEST_LENGTH = 28;

const int SHA256_CBLOCK = 64;

const int SHA256_DIGEST_LENGTH = 32;

const int SHA384_CBLOCK = 128;

const int SHA384_DIGEST_LENGTH = 48;

const int SHA512_CBLOCK = 128;

const int SHA512_DIGEST_LENGTH = 64;

const int SHA512_256_DIGEST_LENGTH = 32;

const int X509_FILETYPE_PEM = 1;

const int X509_FILETYPE_ASN1 = 2;

const int X509_FILETYPE_DEFAULT = 3;

const int X509v3_KU_DIGITAL_SIGNATURE = 128;

const int X509v3_KU_NON_REPUDIATION = 64;

const int X509v3_KU_KEY_ENCIPHERMENT = 32;

const int X509v3_KU_DATA_ENCIPHERMENT = 16;

const int X509v3_KU_KEY_AGREEMENT = 8;

const int X509v3_KU_KEY_CERT_SIGN = 4;

const int X509v3_KU_CRL_SIGN = 2;

const int X509v3_KU_ENCIPHER_ONLY = 1;

const int X509v3_KU_DECIPHER_ONLY = 32768;

const int X509v3_KU_UNDEF = 65535;

const int X509_TRUST_DEFAULT = -1;

const int X509_TRUST_COMPAT = 1;

const int X509_TRUST_SSL_CLIENT = 2;

const int X509_TRUST_SSL_SERVER = 3;

const int X509_TRUST_EMAIL = 4;

const int X509_TRUST_OBJECT_SIGN = 5;

const int X509_TRUST_OCSP_SIGN = 6;

const int X509_TRUST_OCSP_REQUEST = 7;

const int X509_TRUST_TSA = 8;

const int X509_TRUST_MIN = 1;

const int X509_TRUST_MAX = 8;

const int X509_TRUST_DYNAMIC = 1;

const int X509_TRUST_DYNAMIC_NAME = 2;

const int X509_TRUST_TRUSTED = 1;

const int X509_TRUST_REJECTED = 2;

const int X509_TRUST_UNTRUSTED = 3;

const int X509_FLAG_COMPAT = 0;

const int X509_FLAG_NO_HEADER = 1;

const int X509_FLAG_NO_VERSION = 2;

const int X509_FLAG_NO_SERIAL = 4;

const int X509_FLAG_NO_SIGNAME = 8;

const int X509_FLAG_NO_ISSUER = 16;

const int X509_FLAG_NO_VALIDITY = 32;

const int X509_FLAG_NO_SUBJECT = 64;

const int X509_FLAG_NO_PUBKEY = 128;

const int X509_FLAG_NO_EXTENSIONS = 256;

const int X509_FLAG_NO_SIGDUMP = 512;

const int X509_FLAG_NO_AUX = 1024;

const int X509_FLAG_NO_ATTRIBUTES = 2048;

const int X509_FLAG_NO_IDS = 4096;

const int XN_FLAG_SEP_MASK = 983040;

const int XN_FLAG_COMPAT = 0;

const int XN_FLAG_SEP_COMMA_PLUS = 65536;

const int XN_FLAG_SEP_CPLUS_SPC = 131072;

const int XN_FLAG_SEP_SPLUS_SPC = 196608;

const int XN_FLAG_SEP_MULTILINE = 262144;

const int XN_FLAG_DN_REV = 1048576;

const int XN_FLAG_FN_MASK = 6291456;

const int XN_FLAG_FN_SN = 0;

const int XN_FLAG_FN_LN = 2097152;

const int XN_FLAG_FN_OID = 4194304;

const int XN_FLAG_FN_NONE = 6291456;

const int XN_FLAG_SPC_EQ = 8388608;

const int XN_FLAG_DUMP_UNKNOWN_FIELDS = 16777216;

const int XN_FLAG_FN_ALIGN = 33554432;

const int XN_FLAG_RFC2253 = 17892119;

const int XN_FLAG_ONELINE = 8520479;

const int XN_FLAG_MULTILINE = 44302342;

const int PKCS8_OK = 0;

const int PKCS8_NO_OCTET = 1;

const int PKCS8_EMBEDDED_PARAM = 2;

const int PKCS8_NS_DB = 3;

const int PKCS8_NEG_PRIVKEY = 4;

const int X509_LU_X509 = 1;

const int X509_LU_CRL = 2;

const int X509_LU_PKEY = 3;

const int X509_L_FILE_LOAD = 1;

const int X509_L_ADD_DIR = 2;

const int X509_V_OK = 0;

const int X509_V_ERR_UNSPECIFIED = 1;

const int X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT = 2;

const int X509_V_ERR_UNABLE_TO_GET_CRL = 3;

const int X509_V_ERR_UNABLE_TO_DECRYPT_CERT_SIGNATURE = 4;

const int X509_V_ERR_UNABLE_TO_DECRYPT_CRL_SIGNATURE = 5;

const int X509_V_ERR_UNABLE_TO_DECODE_ISSUER_PUBLIC_KEY = 6;

const int X509_V_ERR_CERT_SIGNATURE_FAILURE = 7;

const int X509_V_ERR_CRL_SIGNATURE_FAILURE = 8;

const int X509_V_ERR_CERT_NOT_YET_VALID = 9;

const int X509_V_ERR_CERT_HAS_EXPIRED = 10;

const int X509_V_ERR_CRL_NOT_YET_VALID = 11;

const int X509_V_ERR_CRL_HAS_EXPIRED = 12;

const int X509_V_ERR_ERROR_IN_CERT_NOT_BEFORE_FIELD = 13;

const int X509_V_ERR_ERROR_IN_CERT_NOT_AFTER_FIELD = 14;

const int X509_V_ERR_ERROR_IN_CRL_LAST_UPDATE_FIELD = 15;

const int X509_V_ERR_ERROR_IN_CRL_NEXT_UPDATE_FIELD = 16;

const int X509_V_ERR_OUT_OF_MEM = 17;

const int X509_V_ERR_DEPTH_ZERO_SELF_SIGNED_CERT = 18;

const int X509_V_ERR_SELF_SIGNED_CERT_IN_CHAIN = 19;

const int X509_V_ERR_UNABLE_TO_GET_ISSUER_CERT_LOCALLY = 20;

const int X509_V_ERR_UNABLE_TO_VERIFY_LEAF_SIGNATURE = 21;

const int X509_V_ERR_CERT_CHAIN_TOO_LONG = 22;

const int X509_V_ERR_CERT_REVOKED = 23;

const int X509_V_ERR_INVALID_CA = 24;

const int X509_V_ERR_PATH_LENGTH_EXCEEDED = 25;

const int X509_V_ERR_INVALID_PURPOSE = 26;

const int X509_V_ERR_CERT_UNTRUSTED = 27;

const int X509_V_ERR_CERT_REJECTED = 28;

const int X509_V_ERR_SUBJECT_ISSUER_MISMATCH = 29;

const int X509_V_ERR_AKID_SKID_MISMATCH = 30;

const int X509_V_ERR_AKID_ISSUER_SERIAL_MISMATCH = 31;

const int X509_V_ERR_KEYUSAGE_NO_CERTSIGN = 32;

const int X509_V_ERR_UNABLE_TO_GET_CRL_ISSUER = 33;

const int X509_V_ERR_UNHANDLED_CRITICAL_EXTENSION = 34;

const int X509_V_ERR_KEYUSAGE_NO_CRL_SIGN = 35;

const int X509_V_ERR_UNHANDLED_CRITICAL_CRL_EXTENSION = 36;

const int X509_V_ERR_INVALID_NON_CA = 37;

const int X509_V_ERR_PROXY_PATH_LENGTH_EXCEEDED = 38;

const int X509_V_ERR_KEYUSAGE_NO_DIGITAL_SIGNATURE = 39;

const int X509_V_ERR_PROXY_CERTIFICATES_NOT_ALLOWED = 40;

const int X509_V_ERR_INVALID_EXTENSION = 41;

const int X509_V_ERR_INVALID_POLICY_EXTENSION = 42;

const int X509_V_ERR_NO_EXPLICIT_POLICY = 43;

const int X509_V_ERR_DIFFERENT_CRL_SCOPE = 44;

const int X509_V_ERR_UNSUPPORTED_EXTENSION_FEATURE = 45;

const int X509_V_ERR_UNNESTED_RESOURCE = 46;

const int X509_V_ERR_PERMITTED_VIOLATION = 47;

const int X509_V_ERR_EXCLUDED_VIOLATION = 48;

const int X509_V_ERR_SUBTREE_MINMAX = 49;

const int X509_V_ERR_APPLICATION_VERIFICATION = 50;

const int X509_V_ERR_UNSUPPORTED_CONSTRAINT_TYPE = 51;

const int X509_V_ERR_UNSUPPORTED_CONSTRAINT_SYNTAX = 52;

const int X509_V_ERR_UNSUPPORTED_NAME_SYNTAX = 53;

const int X509_V_ERR_CRL_PATH_VALIDATION_ERROR = 54;

const int X509_V_ERR_SUITE_B_INVALID_VERSION = 56;

const int X509_V_ERR_SUITE_B_INVALID_ALGORITHM = 57;

const int X509_V_ERR_SUITE_B_INVALID_CURVE = 58;

const int X509_V_ERR_SUITE_B_INVALID_SIGNATURE_ALGORITHM = 59;

const int X509_V_ERR_SUITE_B_LOS_NOT_ALLOWED = 60;

const int X509_V_ERR_SUITE_B_CANNOT_SIGN_P_384_WITH_P_256 = 61;

const int X509_V_ERR_HOSTNAME_MISMATCH = 62;

const int X509_V_ERR_EMAIL_MISMATCH = 63;

const int X509_V_ERR_IP_ADDRESS_MISMATCH = 64;

const int X509_V_ERR_INVALID_CALL = 65;

const int X509_V_ERR_STORE_LOOKUP = 66;

const int X509_V_ERR_NAME_CONSTRAINTS_WITHOUT_SANS = 67;

const int X509_V_FLAG_CB_ISSUER_CHECK = 1;

const int X509_V_FLAG_USE_CHECK_TIME = 2;

const int X509_V_FLAG_CRL_CHECK = 4;

const int X509_V_FLAG_CRL_CHECK_ALL = 8;

const int X509_V_FLAG_IGNORE_CRITICAL = 16;

const int X509_V_FLAG_X509_STRICT = 0;

const int X509_V_FLAG_ALLOW_PROXY_CERTS = 64;

const int X509_V_FLAG_POLICY_CHECK = 128;

const int X509_V_FLAG_EXPLICIT_POLICY = 256;

const int X509_V_FLAG_INHIBIT_ANY = 512;

const int X509_V_FLAG_INHIBIT_MAP = 1024;

const int X509_V_FLAG_NOTIFY_POLICY = 2048;

const int X509_V_FLAG_EXTENDED_CRL_SUPPORT = 4096;

const int X509_V_FLAG_USE_DELTAS = 8192;

const int X509_V_FLAG_CHECK_SS_SIGNATURE = 16384;

const int X509_V_FLAG_TRUSTED_FIRST = 32768;

const int X509_V_FLAG_SUITEB_128_LOS_ONLY = 65536;

const int X509_V_FLAG_SUITEB_192_LOS = 131072;

const int X509_V_FLAG_SUITEB_128_LOS = 196608;

const int X509_V_FLAG_PARTIAL_CHAIN = 524288;

const int X509_V_FLAG_NO_ALT_CHAINS = 1048576;

const int X509_VP_FLAG_DEFAULT = 1;

const int X509_VP_FLAG_OVERWRITE = 2;

const int X509_VP_FLAG_RESET_FLAGS = 4;

const int X509_VP_FLAG_LOCKED = 8;

const int X509_VP_FLAG_ONCE = 16;

const int X509_V_FLAG_POLICY_MASK = 1920;

const int X509_R_AKID_MISMATCH = 100;

const int X509_R_BAD_PKCS7_VERSION = 101;

const int X509_R_BAD_X509_FILETYPE = 102;

const int X509_R_BASE64_DECODE_ERROR = 103;

const int X509_R_CANT_CHECK_DH_KEY = 104;

const int X509_R_CERT_ALREADY_IN_HASH_TABLE = 105;

const int X509_R_CRL_ALREADY_DELTA = 106;

const int X509_R_CRL_VERIFY_FAILURE = 107;

const int X509_R_IDP_MISMATCH = 108;

const int X509_R_INVALID_BIT_STRING_BITS_LEFT = 109;

const int X509_R_INVALID_DIRECTORY = 110;

const int X509_R_INVALID_FIELD_NAME = 111;

const int X509_R_INVALID_PSS_PARAMETERS = 112;

const int X509_R_INVALID_TRUST = 113;

const int X509_R_ISSUER_MISMATCH = 114;

const int X509_R_KEY_TYPE_MISMATCH = 115;

const int X509_R_KEY_VALUES_MISMATCH = 116;

const int X509_R_LOADING_CERT_DIR = 117;

const int X509_R_LOADING_DEFAULTS = 118;

const int X509_R_NEWER_CRL_NOT_NEWER = 119;

const int X509_R_NOT_PKCS7_SIGNED_DATA = 120;

const int X509_R_NO_CERTIFICATES_INCLUDED = 121;

const int X509_R_NO_CERT_SET_FOR_US_TO_VERIFY = 122;

const int X509_R_NO_CRLS_INCLUDED = 123;

const int X509_R_NO_CRL_NUMBER = 124;

const int X509_R_PUBLIC_KEY_DECODE_ERROR = 125;

const int X509_R_PUBLIC_KEY_ENCODE_ERROR = 126;

const int X509_R_SHOULD_RETRY = 127;

const int X509_R_UNKNOWN_KEY_TYPE = 128;

const int X509_R_UNKNOWN_NID = 129;

const int X509_R_UNKNOWN_PURPOSE_ID = 130;

const int X509_R_UNKNOWN_TRUST_ID = 131;

const int X509_R_UNSUPPORTED_ALGORITHM = 132;

const int X509_R_WRONG_LOOKUP_TYPE = 133;

const int X509_R_WRONG_TYPE = 134;

const int X509_R_NAME_TOO_LONG = 135;

const int X509_R_INVALID_PARAMETER = 136;

const int X509_R_SIGNATURE_ALGORITHM_MISMATCH = 137;

const int X509_R_DELTA_CRL_WITHOUT_CRL_NUMBER = 138;

const int X509_R_INVALID_FIELD_FOR_VERSION = 139;

const int X509_R_INVALID_VERSION = 140;

const int __DARWIN_NSIG = 32;

const int NSIG = 32;

const int _I386_SIGNAL_H_ = 1;

const int SIGHUP = 1;

const int SIGINT = 2;

const int SIGQUIT = 3;

const int SIGILL = 4;

const int SIGTRAP = 5;

const int SIGABRT = 6;

const int SIGIOT = 6;

const int SIGEMT = 7;

const int SIGFPE = 8;

const int SIGKILL = 9;

const int SIGBUS = 10;

const int SIGSEGV = 11;

const int SIGSYS = 12;

const int SIGPIPE = 13;

const int SIGALRM = 14;

const int SIGTERM = 15;

const int SIGURG = 16;

const int SIGSTOP = 17;

const int SIGTSTP = 18;

const int SIGCONT = 19;

const int SIGCHLD = 20;

const int SIGTTIN = 21;

const int SIGTTOU = 22;

const int SIGIO = 23;

const int SIGXCPU = 24;

const int SIGXFSZ = 25;

const int SIGVTALRM = 26;

const int SIGPROF = 27;

const int SIGWINCH = 28;

const int SIGINFO = 29;

const int SIGUSR1 = 30;

const int SIGUSR2 = 31;

const int FP_PREC_24B = 0;

const int FP_PREC_53B = 2;

const int FP_PREC_64B = 3;

const int FP_RND_NEAR = 0;

const int FP_RND_DOWN = 1;

const int FP_RND_UP = 2;

const int FP_CHOP = 3;

const int FP_STATE_BYTES = 512;

const int SIGEV_NONE = 0;

const int SIGEV_SIGNAL = 1;

const int SIGEV_THREAD = 3;

const int ILL_NOOP = 0;

const int ILL_ILLOPC = 1;

const int ILL_ILLTRP = 2;

const int ILL_PRVOPC = 3;

const int ILL_ILLOPN = 4;

const int ILL_ILLADR = 5;

const int ILL_PRVREG = 6;

const int ILL_COPROC = 7;

const int ILL_BADSTK = 8;

const int FPE_NOOP = 0;

const int FPE_FLTDIV = 1;

const int FPE_FLTOVF = 2;

const int FPE_FLTUND = 3;

const int FPE_FLTRES = 4;

const int FPE_FLTINV = 5;

const int FPE_FLTSUB = 6;

const int FPE_INTDIV = 7;

const int FPE_INTOVF = 8;

const int SEGV_NOOP = 0;

const int SEGV_MAPERR = 1;

const int SEGV_ACCERR = 2;

const int BUS_NOOP = 0;

const int BUS_ADRALN = 1;

const int BUS_ADRERR = 2;

const int BUS_OBJERR = 3;

const int TRAP_BRKPT = 1;

const int TRAP_TRACE = 2;

const int CLD_NOOP = 0;

const int CLD_EXITED = 1;

const int CLD_KILLED = 2;

const int CLD_DUMPED = 3;

const int CLD_TRAPPED = 4;

const int CLD_STOPPED = 5;

const int CLD_CONTINUED = 6;

const int POLL_IN = 1;

const int POLL_OUT = 2;

const int POLL_MSG = 3;

const int POLL_ERR = 4;

const int POLL_PRI = 5;

const int POLL_HUP = 6;

const int SA_ONSTACK = 1;

const int SA_RESTART = 2;

const int SA_RESETHAND = 4;

const int SA_NOCLDSTOP = 8;

const int SA_NODEFER = 16;

const int SA_NOCLDWAIT = 32;

const int SA_SIGINFO = 64;

const int SA_USERTRAMP = 256;

const int SA_64REGSET = 512;

const int SA_USERSPACE_MASK = 127;

const int SIG_BLOCK = 1;

const int SIG_UNBLOCK = 2;

const int SIG_SETMASK = 3;

const int SI_USER = 65537;

const int SI_QUEUE = 65538;

const int SI_TIMER = 65539;

const int SI_ASYNCIO = 65540;

const int SI_MESGQ = 65541;

const int SS_ONSTACK = 1;

const int SS_DISABLE = 4;

const int MINSIGSTKSZ = 32768;

const int SIGSTKSZ = 131072;

const int SV_ONSTACK = 1;

const int SV_INTERRUPT = 2;

const int SV_RESETHAND = 4;

const int SV_NODEFER = 16;

const int SV_NOCLDSTOP = 8;

const int SV_SIGINFO = 64;

const int PRIO_PROCESS = 0;

const int PRIO_PGRP = 1;

const int PRIO_USER = 2;

const int PRIO_DARWIN_THREAD = 3;

const int PRIO_DARWIN_PROCESS = 4;

const int PRIO_MIN = -20;

const int PRIO_MAX = 20;

const int PRIO_DARWIN_BG = 4096;

const int PRIO_DARWIN_NONUI = 4097;

const int RUSAGE_SELF = 0;

const int RUSAGE_CHILDREN = -1;

const int RUSAGE_INFO_V0 = 0;

const int RUSAGE_INFO_V1 = 1;

const int RUSAGE_INFO_V2 = 2;

const int RUSAGE_INFO_V3 = 3;

const int RUSAGE_INFO_V4 = 4;

const int RUSAGE_INFO_CURRENT = 4;

const int RLIM_INFINITY = 9223372036854775807;

const int RLIM_SAVED_MAX = 9223372036854775807;

const int RLIM_SAVED_CUR = 9223372036854775807;

const int RLIMIT_CPU = 0;

const int RLIMIT_FSIZE = 1;

const int RLIMIT_DATA = 2;

const int RLIMIT_STACK = 3;

const int RLIMIT_CORE = 4;

const int RLIMIT_AS = 5;

const int RLIMIT_RSS = 5;

const int RLIMIT_MEMLOCK = 6;

const int RLIMIT_NPROC = 7;

const int RLIMIT_NOFILE = 8;

const int RLIM_NLIMITS = 9;

const int _RLIMIT_POSIX_FLAG = 4096;

const int RLIMIT_WAKEUPS_MONITOR = 1;

const int RLIMIT_CPU_USAGE_MONITOR = 2;

const int RLIMIT_THREAD_CPULIMITS = 3;

const int RLIMIT_FOOTPRINT_INTERVAL = 4;

const int WAKEMON_ENABLE = 1;

const int WAKEMON_DISABLE = 2;

const int WAKEMON_GET_PARAMS = 4;

const int WAKEMON_SET_DEFAULTS = 8;

const int WAKEMON_MAKE_FATAL = 16;

const int CPUMON_MAKE_FATAL = 4096;

const int FOOTPRINT_INTERVAL_RESET = 1;

const int IOPOL_TYPE_DISK = 0;

const int IOPOL_TYPE_VFS_ATIME_UPDATES = 2;

const int IOPOL_TYPE_VFS_MATERIALIZE_DATALESS_FILES = 3;

const int IOPOL_TYPE_VFS_STATFS_NO_DATA_VOLUME = 4;

const int IOPOL_SCOPE_PROCESS = 0;

const int IOPOL_SCOPE_THREAD = 1;

const int IOPOL_SCOPE_DARWIN_BG = 2;

const int IOPOL_DEFAULT = 0;

const int IOPOL_IMPORTANT = 1;

const int IOPOL_PASSIVE = 2;

const int IOPOL_THROTTLE = 3;

const int IOPOL_UTILITY = 4;

const int IOPOL_STANDARD = 5;

const int IOPOL_APPLICATION = 5;

const int IOPOL_NORMAL = 1;

const int IOPOL_ATIME_UPDATES_DEFAULT = 0;

const int IOPOL_ATIME_UPDATES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_DEFAULT = 0;

const int IOPOL_MATERIALIZE_DATALESS_FILES_OFF = 1;

const int IOPOL_MATERIALIZE_DATALESS_FILES_ON = 2;

const int IOPOL_VFS_STATFS_NO_DATA_VOLUME_DEFAULT = 0;

const int IOPOL_VFS_STATFS_FORCE_NO_DATA_VOLUME = 1;

const int WNOHANG = 1;

const int WUNTRACED = 2;

const int WCOREFLAG = 128;

const int _WSTOPPED = 127;

const int WEXITED = 4;

const int WSTOPPED = 8;

const int WCONTINUED = 16;

const int WNOWAIT = 32;

const int WAIT_ANY = -1;

const int WAIT_MYPGRP = 0;

const int EXIT_FAILURE = 1;

const int EXIT_SUCCESS = 0;

const int RAND_MAX = 2147483647;

const int __GNUC_VA_LIST = 1;

const String OPENSSL_VERSION_TEXT = 'OpenSSL 1.1.0 (compatible; BoringSSL)';

const int OPENSSL_VERSION = 0;

const int OPENSSL_CFLAGS = 1;

const int OPENSSL_BUILT_ON = 2;

const int OPENSSL_PLATFORM = 3;

const int OPENSSL_DIR = 4;

const int SSLEAY_VERSION = 0;

const int SSLEAY_CFLAGS = 1;

const int SSLEAY_BUILT_ON = 2;

const int SSLEAY_PLATFORM = 3;

const int SSLEAY_DIR = 4;

const int OPENSSL_INIT_NO_LOAD_CRYPTO_STRINGS = 0;

const int OPENSSL_INIT_LOAD_CRYPTO_STRINGS = 0;

const int OPENSSL_INIT_ADD_ALL_CIPHERS = 0;

const int OPENSSL_INIT_ADD_ALL_DIGESTS = 0;

const int OPENSSL_INIT_NO_ADD_ALL_CIPHERS = 0;

const int OPENSSL_INIT_NO_ADD_ALL_DIGESTS = 0;

const int OPENSSL_INIT_LOAD_CONFIG = 0;

const int OPENSSL_INIT_NO_LOAD_CONFIG = 0;

const int PEM_BUFSIZE = 1024;

const String PEM_STRING_X509_OLD = 'X509 CERTIFICATE';

const String PEM_STRING_X509 = 'CERTIFICATE';

const String PEM_STRING_X509_PAIR = 'CERTIFICATE PAIR';

const String PEM_STRING_X509_TRUSTED = 'TRUSTED CERTIFICATE';

const String PEM_STRING_X509_REQ_OLD = 'NEW CERTIFICATE REQUEST';

const String PEM_STRING_X509_REQ = 'CERTIFICATE REQUEST';

const String PEM_STRING_X509_CRL = 'X509 CRL';

const String PEM_STRING_EVP_PKEY = 'ANY PRIVATE KEY';

const String PEM_STRING_PUBLIC = 'PUBLIC KEY';

const String PEM_STRING_RSA = 'RSA PRIVATE KEY';

const String PEM_STRING_RSA_PUBLIC = 'RSA PUBLIC KEY';

const String PEM_STRING_DSA = 'DSA PRIVATE KEY';

const String PEM_STRING_DSA_PUBLIC = 'DSA PUBLIC KEY';

const String PEM_STRING_EC = 'EC PRIVATE KEY';

const String PEM_STRING_PKCS7 = 'PKCS7';

const String PEM_STRING_PKCS7_SIGNED = 'PKCS #7 SIGNED DATA';

const String PEM_STRING_PKCS8 = 'ENCRYPTED PRIVATE KEY';

const String PEM_STRING_PKCS8INF = 'PRIVATE KEY';

const String PEM_STRING_DHPARAMS = 'DH PARAMETERS';

const String PEM_STRING_SSL_SESSION = 'SSL SESSION PARAMETERS';

const String PEM_STRING_DSAPARAMS = 'DSA PARAMETERS';

const String PEM_STRING_ECDSA_PUBLIC = 'ECDSA PUBLIC KEY';

const String PEM_STRING_ECPRIVATEKEY = 'EC PRIVATE KEY';

const String PEM_STRING_CMS = 'CMS';

const int PEM_TYPE_ENCRYPTED = 10;

const int PEM_TYPE_MIC_ONLY = 20;

const int PEM_TYPE_MIC_CLEAR = 30;

const int PEM_TYPE_CLEAR = 40;

const int PEM_R_BAD_BASE64_DECODE = 100;

const int PEM_R_BAD_DECRYPT = 101;

const int PEM_R_BAD_END_LINE = 102;

const int PEM_R_BAD_IV_CHARS = 103;

const int PEM_R_BAD_PASSWORD_READ = 104;

const int PEM_R_CIPHER_IS_NULL = 105;

const int PEM_R_ERROR_CONVERTING_PRIVATE_KEY = 106;

const int PEM_R_NOT_DEK_INFO = 107;

const int PEM_R_NOT_ENCRYPTED = 108;

const int PEM_R_NOT_PROC_TYPE = 109;

const int PEM_R_NO_START_LINE = 110;

const int PEM_R_READ_KEY = 111;

const int PEM_R_SHORT_HEADER = 112;

const int PEM_R_UNSUPPORTED_CIPHER = 113;

const int PEM_R_UNSUPPORTED_ENCRYPTION = 114;

const int BF_ENCRYPT = 1;

const int BF_DECRYPT = 0;

const int BF_ROUNDS = 16;

const int BF_BLOCK = 8;

const int __ARM_MAX_ARCH__ = 8;

const int ARMV7_NEON = 1;

const int ARMV8_AES = 4;

const int ARMV8_SHA1 = 8;

const int ARMV8_SHA256 = 16;

const int ARMV8_PMULL = 32;

const int CONF_MFLAGS_DEFAULT_SECTION = 0;

const int CONF_MFLAGS_IGNORE_MISSING_FILE = 0;

const int CONF_R_LIST_CANNOT_BE_NULL = 100;

const int CONF_R_MISSING_CLOSE_SQUARE_BRACKET = 101;

const int CONF_R_MISSING_EQUAL_SIGN = 102;

const int CONF_R_NO_CLOSE_BRACE = 103;

const int CONF_R_UNABLE_TO_CREATE_NEW_SECTION = 104;

const int CONF_R_VARIABLE_HAS_NO_VALUE = 105;

const int CONF_R_VARIABLE_EXPANSION_TOO_LONG = 106;

const int CTX_TEST = 1;

const int X509V3_EXT_DYNAMIC = 1;

const int X509V3_EXT_CTX_DEP = 2;

const int X509V3_EXT_MULTILINE = 4;

const int GEN_OTHERNAME = 0;

const int GEN_EMAIL = 1;

const int GEN_DNS = 2;

const int GEN_X400 = 3;

const int GEN_DIRNAME = 4;

const int GEN_EDIPARTY = 5;

const int GEN_URI = 6;

const int GEN_IPADD = 7;

const int GEN_RID = 8;

const int CRLDP_ALL_REASONS = 32895;

const int CRL_REASON_NONE = -1;

const int CRL_REASON_UNSPECIFIED = 0;

const int CRL_REASON_KEY_COMPROMISE = 1;

const int CRL_REASON_CA_COMPROMISE = 2;

const int CRL_REASON_AFFILIATION_CHANGED = 3;

const int CRL_REASON_SUPERSEDED = 4;

const int CRL_REASON_CESSATION_OF_OPERATION = 5;

const int CRL_REASON_CERTIFICATE_HOLD = 6;

const int CRL_REASON_REMOVE_FROM_CRL = 8;

const int CRL_REASON_PRIVILEGE_WITHDRAWN = 9;

const int CRL_REASON_AA_COMPROMISE = 10;

const int IDP_PRESENT = 1;

const int IDP_INVALID = 2;

const int IDP_ONLYUSER = 4;

const int IDP_ONLYCA = 8;

const int IDP_ONLYATTR = 16;

const int IDP_INDIRECT = 32;

const int IDP_REASONS = 64;

const int EXFLAG_BCONS = 1;

const int EXFLAG_KUSAGE = 2;

const int EXFLAG_XKUSAGE = 4;

const int EXFLAG_NSCERT = 8;

const int EXFLAG_CA = 16;

const int EXFLAG_SI = 32;

const int EXFLAG_V1 = 64;

const int EXFLAG_INVALID = 128;

const int EXFLAG_SET = 256;

const int EXFLAG_CRITICAL = 512;

const int EXFLAG_PROXY = 1024;

const int EXFLAG_INVALID_POLICY = 2048;

const int EXFLAG_FRESHEST = 4096;

const int EXFLAG_SS = 8192;

const int KU_DIGITAL_SIGNATURE = 128;

const int KU_NON_REPUDIATION = 64;

const int KU_KEY_ENCIPHERMENT = 32;

const int KU_DATA_ENCIPHERMENT = 16;

const int KU_KEY_AGREEMENT = 8;

const int KU_KEY_CERT_SIGN = 4;

const int KU_CRL_SIGN = 2;

const int KU_ENCIPHER_ONLY = 1;

const int KU_DECIPHER_ONLY = 32768;

const int NS_SSL_CLIENT = 128;

const int NS_SSL_SERVER = 64;

const int NS_SMIME = 32;

const int NS_OBJSIGN = 16;

const int NS_SSL_CA = 4;

const int NS_SMIME_CA = 2;

const int NS_OBJSIGN_CA = 1;

const int NS_ANY_CA = 7;

const int XKU_SSL_SERVER = 1;

const int XKU_SSL_CLIENT = 2;

const int XKU_SMIME = 4;

const int XKU_CODE_SIGN = 8;

const int XKU_SGC = 16;

const int XKU_OCSP_SIGN = 32;

const int XKU_TIMESTAMP = 64;

const int XKU_DVCS = 128;

const int XKU_ANYEKU = 256;

const int X509_PURPOSE_DYNAMIC = 1;

const int X509_PURPOSE_DYNAMIC_NAME = 2;

const int X509_PURPOSE_SSL_CLIENT = 1;

const int X509_PURPOSE_SSL_SERVER = 2;

const int X509_PURPOSE_NS_SSL_SERVER = 3;

const int X509_PURPOSE_SMIME_SIGN = 4;

const int X509_PURPOSE_SMIME_ENCRYPT = 5;

const int X509_PURPOSE_CRL_SIGN = 6;

const int X509_PURPOSE_ANY = 7;

const int X509_PURPOSE_OCSP_HELPER = 8;

const int X509_PURPOSE_TIMESTAMP_SIGN = 9;

const int X509_PURPOSE_MIN = 1;

const int X509_PURPOSE_MAX = 9;

const int X509V3_EXT_UNKNOWN_MASK = 983040;

const int X509V3_EXT_DEFAULT = 0;

const int X509V3_EXT_ERROR_UNKNOWN = 65536;

const int X509V3_EXT_PARSE_UNKNOWN = 131072;

const int X509V3_EXT_DUMP_UNKNOWN = 196608;

const int X509V3_ADD_OP_MASK = 15;

const int X509V3_ADD_DEFAULT = 0;

const int X509V3_ADD_APPEND = 1;

const int X509V3_ADD_REPLACE = 2;

const int X509V3_ADD_REPLACE_EXISTING = 3;

const int X509V3_ADD_KEEP_EXISTING = 4;

const int X509V3_ADD_DELETE = 5;

const int X509V3_ADD_SILENT = 16;

const int X509_CHECK_FLAG_ALWAYS_CHECK_SUBJECT = 0;

const int X509_CHECK_FLAG_NO_WILDCARDS = 2;

const int X509_CHECK_FLAG_NO_PARTIAL_WILDCARDS = 4;

const int X509_CHECK_FLAG_MULTI_LABEL_WILDCARDS = 8;

const int X509_CHECK_FLAG_SINGLE_LABEL_SUBDOMAINS = 16;

const int X509_CHECK_FLAG_NEVER_CHECK_SUBJECT = 32;

const int _X509_CHECK_FLAG_DOT_SUBDOMAINS = 32768;

const int X509V3_R_BAD_IP_ADDRESS = 100;

const int X509V3_R_BAD_OBJECT = 101;

const int X509V3_R_BN_DEC2BN_ERROR = 102;

const int X509V3_R_BN_TO_ASN1_INTEGER_ERROR = 103;

const int X509V3_R_CANNOT_FIND_FREE_FUNCTION = 104;

const int X509V3_R_DIRNAME_ERROR = 105;

const int X509V3_R_DISTPOINT_ALREADY_SET = 106;

const int X509V3_R_DUPLICATE_ZONE_ID = 107;

const int X509V3_R_ERROR_CONVERTING_ZONE = 108;

const int X509V3_R_ERROR_CREATING_EXTENSION = 109;

const int X509V3_R_ERROR_IN_EXTENSION = 110;

const int X509V3_R_EXPECTED_A_SECTION_NAME = 111;

const int X509V3_R_EXTENSION_EXISTS = 112;

const int X509V3_R_EXTENSION_NAME_ERROR = 113;

const int X509V3_R_EXTENSION_NOT_FOUND = 114;

const int X509V3_R_EXTENSION_SETTING_NOT_SUPPORTED = 115;

const int X509V3_R_EXTENSION_VALUE_ERROR = 116;

const int X509V3_R_ILLEGAL_EMPTY_EXTENSION = 117;

const int X509V3_R_ILLEGAL_HEX_DIGIT = 118;

const int X509V3_R_INCORRECT_POLICY_SYNTAX_TAG = 119;

const int X509V3_R_INVALID_BOOLEAN_STRING = 120;

const int X509V3_R_INVALID_EXTENSION_STRING = 121;

const int X509V3_R_INVALID_MULTIPLE_RDNS = 122;

const int X509V3_R_INVALID_NAME = 123;

const int X509V3_R_INVALID_NULL_ARGUMENT = 124;

const int X509V3_R_INVALID_NULL_NAME = 125;

const int X509V3_R_INVALID_NULL_VALUE = 126;

const int X509V3_R_INVALID_NUMBER = 127;

const int X509V3_R_INVALID_NUMBERS = 128;

const int X509V3_R_INVALID_OBJECT_IDENTIFIER = 129;

const int X509V3_R_INVALID_OPTION = 130;

const int X509V3_R_INVALID_POLICY_IDENTIFIER = 131;

const int X509V3_R_INVALID_PROXY_POLICY_SETTING = 132;

const int X509V3_R_INVALID_PURPOSE = 133;

const int X509V3_R_INVALID_SECTION = 134;

const int X509V3_R_INVALID_SYNTAX = 135;

const int X509V3_R_ISSUER_DECODE_ERROR = 136;

const int X509V3_R_MISSING_VALUE = 137;

const int X509V3_R_NEED_ORGANIZATION_AND_NUMBERS = 138;

const int X509V3_R_NO_CONFIG_DATABASE = 139;

const int X509V3_R_NO_ISSUER_CERTIFICATE = 140;

const int X509V3_R_NO_ISSUER_DETAILS = 141;

const int X509V3_R_NO_POLICY_IDENTIFIER = 142;

const int X509V3_R_NO_PROXY_CERT_POLICY_LANGUAGE_DEFINED = 143;

const int X509V3_R_NO_PUBLIC_KEY = 144;

const int X509V3_R_NO_SUBJECT_DETAILS = 145;

const int X509V3_R_ODD_NUMBER_OF_DIGITS = 146;

const int X509V3_R_OPERATION_NOT_DEFINED = 147;

const int X509V3_R_OTHERNAME_ERROR = 148;

const int X509V3_R_POLICY_LANGUAGE_ALREADY_DEFINED = 149;

const int X509V3_R_POLICY_PATH_LENGTH = 150;

const int X509V3_R_POLICY_PATH_LENGTH_ALREADY_DEFINED = 151;

const int X509V3_R_POLICY_WHEN_PROXY_LANGUAGE_REQUIRES_NO_POLICY = 152;

const int X509V3_R_SECTION_NOT_FOUND = 153;

const int X509V3_R_UNABLE_TO_GET_ISSUER_DETAILS = 154;

const int X509V3_R_UNABLE_TO_GET_ISSUER_KEYID = 155;

const int X509V3_R_UNKNOWN_BIT_STRING_ARGUMENT = 156;

const int X509V3_R_UNKNOWN_EXTENSION = 157;

const int X509V3_R_UNKNOWN_EXTENSION_NAME = 158;

const int X509V3_R_UNKNOWN_OPTION = 159;

const int X509V3_R_UNSUPPORTED_OPTION = 160;

const int X509V3_R_UNSUPPORTED_TYPE = 161;

const int X509V3_R_USER_TOO_LONG = 162;

const int HKDF_R_OUTPUT_TOO_LARGE = 100;

const int MD5_CBLOCK = 64;

const int MD5_DIGEST_LENGTH = 16;

const int PKCS8_R_BAD_PKCS12_DATA = 100;

const int PKCS8_R_BAD_PKCS12_VERSION = 101;

const int PKCS8_R_CIPHER_HAS_NO_OBJECT_IDENTIFIER = 102;

const int PKCS8_R_CRYPT_ERROR = 103;

const int PKCS8_R_DECODE_ERROR = 104;

const int PKCS8_R_ENCODE_ERROR = 105;

const int PKCS8_R_ENCRYPT_ERROR = 106;

const int PKCS8_R_ERROR_SETTING_CIPHER_PARAMS = 107;

const int PKCS8_R_INCORRECT_PASSWORD = 108;

const int PKCS8_R_KEYGEN_FAILURE = 109;

const int PKCS8_R_KEY_GEN_ERROR = 110;

const int PKCS8_R_METHOD_NOT_SUPPORTED = 111;

const int PKCS8_R_MISSING_MAC = 112;

const int PKCS8_R_MULTIPLE_PRIVATE_KEYS_IN_PKCS12 = 113;

const int PKCS8_R_PKCS12_PUBLIC_KEY_INTEGRITY_NOT_SUPPORTED = 114;

const int PKCS8_R_PKCS12_TOO_DEEPLY_NESTED = 115;

const int PKCS8_R_PRIVATE_KEY_DECODE_ERROR = 116;

const int PKCS8_R_PRIVATE_KEY_ENCODE_ERROR = 117;

const int PKCS8_R_TOO_LONG = 118;

const int PKCS8_R_UNKNOWN_ALGORITHM = 119;

const int PKCS8_R_UNKNOWN_CIPHER = 120;

const int PKCS8_R_UNKNOWN_CIPHER_ALGORITHM = 121;

const int PKCS8_R_UNKNOWN_DIGEST = 122;

const int PKCS8_R_UNKNOWN_HASH = 123;

const int PKCS8_R_UNSUPPORTED_PRIVATE_KEY_ALGORITHM = 124;

const int PKCS8_R_UNSUPPORTED_KEYLENGTH = 125;

const int PKCS8_R_UNSUPPORTED_SALT_TYPE = 126;

const int PKCS8_R_UNSUPPORTED_CIPHER = 127;

const int PKCS8_R_UNSUPPORTED_KEY_DERIVATION_FUNCTION = 128;

const int PKCS8_R_BAD_ITERATION_COUNT = 129;

const int PKCS8_R_UNSUPPORTED_PRF = 130;

const int PKCS8_R_INVALID_CHARACTERS = 131;

const int PKCS8_R_UNSUPPORTED_OPTIONS = 132;

const int MD4_CBLOCK = 64;

const int MD4_DIGEST_LENGTH = 16;

const int AES_ENCRYPT = 1;

const int AES_DECRYPT = 0;

const int AES_MAXNR = 14;

const int AES_BLOCK_SIZE = 16;

const int CAST_ENCRYPT = 1;

const int CAST_DECRYPT = 0;

const int CAST_BLOCK = 8;

const int CAST_KEY_LENGTH = 16;

const int DES_KEY_SZ = 8;

const int DES_SCHEDULE_SZ = 128;

const int DES_ENCRYPT = 1;

const int DES_DECRYPT = 0;

const int DES_CBC_MODE = 0;

const int DES_PCBC_MODE = 1;

const int HRSS_SAMPLE_BYTES = 700;

const int HRSS_GENERATE_KEY_BYTES = 1432;

const int HRSS_ENCAP_BYTES = 1400;

const int HRSS_PUBLIC_KEY_BYTES = 1138;

const int HRSS_CIPHERTEXT_BYTES = 1138;

const int HRSS_KEY_BYTES = 32;

const int HRSS_POLY3_BYTES = 140;

const int HRSS_PRIVATE_KEY_BYTES = 1452;

const int RIPEMD160_CBLOCK = 64;

const int RIPEMD160_LBLOCK = 16;

const int RIPEMD160_DIGEST_LENGTH = 20;

const int X25519_PRIVATE_KEY_LEN = 32;

const int X25519_PUBLIC_VALUE_LEN = 32;

const int X25519_SHARED_KEY_LEN = 32;

const int ED25519_PRIVATE_KEY_LEN = 64;

const int ED25519_PUBLIC_KEY_LEN = 32;

const int ED25519_SIGNATURE_LEN = 64;

const int SPAKE2_MAX_MSG_SIZE = 32;

const int SPAKE2_MAX_KEY_SIZE = 64;

const int TRUST_TOKEN_MAX_PRIVATE_KEY_SIZE = 512;

const int TRUST_TOKEN_MAX_PUBLIC_KEY_SIZE = 512;

const int TRUST_TOKEN_R_KEYGEN_FAILURE = 100;

const int TRUST_TOKEN_R_BUFFER_TOO_SMALL = 101;

const int TRUST_TOKEN_R_OVER_BATCHSIZE = 102;

const int TRUST_TOKEN_R_DECODE_ERROR = 103;

const int TRUST_TOKEN_R_SRR_SIGNATURE_ERROR = 104;

const int TRUST_TOKEN_R_DECODE_FAILURE = 105;

const int TRUST_TOKEN_R_INVALID_METADATA = 106;

const int TRUST_TOKEN_R_TOO_MANY_KEYS = 107;

const int TRUST_TOKEN_R_NO_KEYS_CONFIGURED = 108;

const int TRUST_TOKEN_R_INVALID_KEY_ID = 109;

const int TRUST_TOKEN_R_INVALID_TOKEN = 110;

const int TRUST_TOKEN_R_BAD_VALIDITY_CHECK = 111;

const int TRUST_TOKEN_R_NO_SRR_KEY_CONFIGURED = 112;

const int TRUST_TOKEN_R_INVALID_METADATA_KEY = 113;

const int TRUST_TOKEN_R_INVALID_PROOF = 114;

const int ASN1_TFLG_OPTIONAL = 1;

const int ASN1_TFLG_SET_OF = 2;

const int ASN1_TFLG_SEQUENCE_OF = 4;

const int ASN1_TFLG_SET_ORDER = 6;

const int ASN1_TFLG_SK_MASK = 6;

const int ASN1_TFLG_IMPTAG = 8;

const int ASN1_TFLG_EXPTAG = 16;

const int ASN1_TFLG_TAG_MASK = 24;

const int ASN1_TFLG_IMPLICIT = 136;

const int ASN1_TFLG_EXPLICIT = 144;

const int ASN1_TFLG_UNIVERSAL = 0;

const int ASN1_TFLG_APPLICATION = 64;

const int ASN1_TFLG_CONTEXT = 128;

const int ASN1_TFLG_PRIVATE = 192;

const int ASN1_TFLG_TAG_CLASS = 192;

const int ASN1_TFLG_ADB_MASK = 768;

const int ASN1_TFLG_ADB_OID = 256;

const int ASN1_TFLG_ADB_INT = 512;

const int ASN1_TFLG_COMBINE = 1024;

const int ASN1_TFLG_NDEF = 2048;

const int ASN1_ITYPE_PRIMITIVE = 0;

const int ASN1_ITYPE_SEQUENCE = 1;

const int ASN1_ITYPE_CHOICE = 2;

const int ASN1_ITYPE_COMPAT = 3;

const int ASN1_ITYPE_EXTERN = 4;

const int ASN1_ITYPE_MSTRING = 5;

const int ASN1_ITYPE_NDEF_SEQUENCE = 6;

const int ASN1_AFLG_REFCOUNT = 1;

const int ASN1_AFLG_ENCODING = 2;

const int ASN1_AFLG_BROKEN = 4;

const int ASN1_OP_NEW_PRE = 0;

const int ASN1_OP_NEW_POST = 1;

const int ASN1_OP_FREE_PRE = 2;

const int ASN1_OP_FREE_POST = 3;

const int ASN1_OP_D2I_PRE = 4;

const int ASN1_OP_D2I_POST = 5;

const int ASN1_OP_I2D_PRE = 6;

const int ASN1_OP_I2D_POST = 7;

const int ASN1_OP_PRINT_PRE = 8;

const int ASN1_OP_PRINT_POST = 9;

const int ASN1_OP_STREAM_PRE = 10;

const int ASN1_OP_STREAM_POST = 11;

const int ASN1_OP_DETACHED_PRE = 12;

const int ASN1_OP_DETACHED_POST = 13;

const int true_1 = 1;

const int false_1 = 0;

const int __bool_true_false_are_defined = 1;

const int DART_FLAGS_CURRENT_VERSION = 12;

const int DART_INITIALIZE_PARAMS_CURRENT_VERSION = 4;

const int ILLEGAL_PORT = 0;

const String DART_KERNEL_ISOLATE_NAME = 'kernel-service';

const String DART_VM_SERVICE_ISOLATE_NAME = 'vm-service';

const String kSnapshotBuildIdCSymbol = 'kDartSnapshotBuildId';

const String kVmSnapshotDataCSymbol = 'kDartVmSnapshotData';

const String kVmSnapshotInstructionsCSymbol = 'kDartVmSnapshotInstructions';

const String kVmSnapshotBssCSymbol = 'kDartVmSnapshotBss';

const String kIsolateSnapshotDataCSymbol = 'kDartIsolateSnapshotData';

const String kIsolateSnapshotInstructionsCSymbol =
    'kDartIsolateSnapshotInstructions';

const String kIsolateSnapshotBssCSymbol = 'kDartIsolateSnapshotBss';

const String kSnapshotBuildIdAsmSymbol = '_kDartSnapshotBuildId';

const String kVmSnapshotDataAsmSymbol = '_kDartVmSnapshotData';

const String kVmSnapshotInstructionsAsmSymbol = '_kDartVmSnapshotInstructions';

const String kVmSnapshotBssAsmSymbol = '_kDartVmSnapshotBss';

const String kIsolateSnapshotDataAsmSymbol = '_kDartIsolateSnapshotData';

const String kIsolateSnapshotInstructionsAsmSymbol =
    '_kDartIsolateSnapshotInstructions';

const String kIsolateSnapshotBssAsmSymbol = '_kDartIsolateSnapshotBss';

typedef _c_ERR_get_error = ffi.Uint32 Function();

typedef _dart_ERR_get_error = int Function();

typedef _c_ERR_peek_error = ffi.Uint32 Function();

typedef _dart_ERR_peek_error = int Function();

typedef _c_ERR_error_string_n = ffi.Pointer<ffi.Int8> Function(
  ffi.Uint32 packed_error,
  ffi.Pointer<ffi.Int8> buf,
  ffi.IntPtr len,
);

typedef _dart_ERR_error_string_n = ffi.Pointer<ffi.Int8> Function(
  int packed_error,
  ffi.Pointer<ffi.Int8> buf,
  int len,
);

typedef _c_ERR_clear_error = ffi.Void Function();

typedef _dart_ERR_clear_error = void Function();

typedef _c_EVP_aes_128_cbc = ffi.Pointer<evp_cipher_st> Function();

typedef _dart_EVP_aes_128_cbc = ffi.Pointer<evp_cipher_st> Function();

typedef _c_EVP_aes_128_ctr = ffi.Pointer<evp_cipher_st> Function();

typedef _dart_EVP_aes_128_ctr = ffi.Pointer<evp_cipher_st> Function();

typedef _c_EVP_aes_256_cbc = ffi.Pointer<evp_cipher_st> Function();

typedef _dart_EVP_aes_256_cbc = ffi.Pointer<evp_cipher_st> Function();

typedef _c_EVP_aes_256_ctr = ffi.Pointer<evp_cipher_st> Function();

typedef _dart_EVP_aes_256_ctr = ffi.Pointer<evp_cipher_st> Function();

typedef _c_EVP_CIPHER_CTX_new = ffi.Pointer<evp_cipher_ctx_st> Function();

typedef _dart_EVP_CIPHER_CTX_new = ffi.Pointer<evp_cipher_ctx_st> Function();

typedef _c_EVP_CIPHER_CTX_free = ffi.Void Function(
  ffi.Pointer<evp_cipher_ctx_st> ctx,
);

typedef _dart_EVP_CIPHER_CTX_free = void Function(
  ffi.Pointer<evp_cipher_ctx_st> ctx,
);

typedef _c_EVP_CipherInit_ex = ffi.Int32 Function(
  ffi.Pointer<evp_cipher_ctx_st> ctx,
  ffi.Pointer<evp_cipher_st> cipher,
  ffi.Pointer<engine_st> engine,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Pointer<ffi.Uint8> iv,
  ffi.Int32 enc,
);

typedef _dart_EVP_CipherInit_ex = int Function(
  ffi.Pointer<evp_cipher_ctx_st> ctx,
  ffi.Pointer<evp_cipher_st> cipher,
  ffi.Pointer<engine_st> engine,
  ffi.Pointer<ffi.Uint8> key,
  ffi.Pointer<ffi.Uint8> iv,
  int enc,
);

typedef _c_EVP_CipherUpdate = ffi.Int32 Function(
  ffi.Pointer<evp_cipher_ctx_st> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Int32> out_len,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.Int32 in_len,
);

typedef _dart_EVP_CipherUpdate = int Function(
  ffi.Pointer<evp_cipher_ctx_st> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Int32> out_len,
  ffi.Pointer<ffi.Uint8> in_1,
  int in_len,
);

typedef _c_EVP_CipherFinal_ex = ffi.Int32 Function(
  ffi.Pointer<evp_cipher_ctx_st> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Int32> out_len,
);

typedef _dart_EVP_CipherFinal_ex = int Function(
  ffi.Pointer<evp_cipher_ctx_st> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Int32> out_len,
);

typedef _c_EVP_CIPHER_block_size = ffi.Uint32 Function(
  ffi.Pointer<evp_cipher_st> cipher,
);

typedef _dart_EVP_CIPHER_block_size = int Function(
  ffi.Pointer<evp_cipher_st> cipher,
);

typedef _c_EVP_CIPHER_iv_length = ffi.Uint32 Function(
  ffi.Pointer<evp_cipher_st> cipher,
);

typedef _dart_EVP_CIPHER_iv_length = int Function(
  ffi.Pointer<evp_cipher_st> cipher,
);

typedef _c_EVP_sha1 = ffi.Pointer<EVP_MD> Function();

typedef _dart_EVP_sha1 = ffi.Pointer<EVP_MD> Function();

typedef _c_EVP_sha256 = ffi.Pointer<EVP_MD> Function();

typedef _dart_EVP_sha256 = ffi.Pointer<EVP_MD> Function();

typedef _c_EVP_sha384 = ffi.Pointer<EVP_MD> Function();

typedef _dart_EVP_sha384 = ffi.Pointer<EVP_MD> Function();

typedef _c_EVP_sha512 = ffi.Pointer<EVP_MD> Function();

typedef _dart_EVP_sha512 = ffi.Pointer<EVP_MD> Function();

typedef _c_EVP_MD_CTX_new = ffi.Pointer<EVP_MD_CTX> Function();

typedef _dart_EVP_MD_CTX_new = ffi.Pointer<EVP_MD_CTX> Function();

typedef _c_EVP_MD_CTX_free = ffi.Void Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
);

typedef _dart_EVP_MD_CTX_free = void Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
);

typedef _c_EVP_DigestInit = ffi.Int32 Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<EVP_MD> type,
);

typedef _dart_EVP_DigestInit = int Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<EVP_MD> type,
);

typedef _c_EVP_DigestUpdate = ffi.Int32 Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr len,
);

typedef _dart_EVP_DigestUpdate = int Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Void> data,
  int len,
);

typedef _c_EVP_DigestFinal = ffi.Int32 Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Uint8> md_out,
  ffi.Pointer<ffi.Uint32> out_size,
);

typedef _dart_EVP_DigestFinal = int Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Uint8> md_out,
  ffi.Pointer<ffi.Uint32> out_size,
);

typedef _c_EVP_MD_size = ffi.IntPtr Function(
  ffi.Pointer<EVP_MD> md,
);

typedef _dart_EVP_MD_size = int Function(
  ffi.Pointer<EVP_MD> md,
);

typedef _c_EVP_MD_CTX_size = ffi.IntPtr Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
);

typedef _dart_EVP_MD_CTX_size = int Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
);

typedef _c_EVP_aead_aes_128_gcm = ffi.Pointer<evp_aead_st> Function();

typedef _dart_EVP_aead_aes_128_gcm = ffi.Pointer<evp_aead_st> Function();

typedef _c_EVP_aead_aes_256_gcm = ffi.Pointer<evp_aead_st> Function();

typedef _dart_EVP_aead_aes_256_gcm = ffi.Pointer<evp_aead_st> Function();

typedef _c_EVP_AEAD_key_length = ffi.IntPtr Function(
  ffi.Pointer<evp_aead_st> aead,
);

typedef _dart_EVP_AEAD_key_length = int Function(
  ffi.Pointer<evp_aead_st> aead,
);

typedef _c_EVP_AEAD_nonce_length = ffi.IntPtr Function(
  ffi.Pointer<evp_aead_st> aead,
);

typedef _dart_EVP_AEAD_nonce_length = int Function(
  ffi.Pointer<evp_aead_st> aead,
);

typedef _c_EVP_AEAD_max_overhead = ffi.IntPtr Function(
  ffi.Pointer<evp_aead_st> aead,
);

typedef _dart_EVP_AEAD_max_overhead = int Function(
  ffi.Pointer<evp_aead_st> aead,
);

typedef _c_EVP_AEAD_max_tag_len = ffi.IntPtr Function(
  ffi.Pointer<evp_aead_st> aead,
);

typedef _dart_EVP_AEAD_max_tag_len = int Function(
  ffi.Pointer<evp_aead_st> aead,
);

typedef _c_EVP_AEAD_CTX_new = ffi.Pointer<EVP_AEAD_CTX> Function(
  ffi.Pointer<evp_aead_st> aead,
  ffi.Pointer<ffi.Uint8> key,
  ffi.IntPtr key_len,
  ffi.IntPtr tag_len,
);

typedef _dart_EVP_AEAD_CTX_new = ffi.Pointer<EVP_AEAD_CTX> Function(
  ffi.Pointer<evp_aead_st> aead,
  ffi.Pointer<ffi.Uint8> key,
  int key_len,
  int tag_len,
);

typedef _c_EVP_AEAD_CTX_free = ffi.Void Function(
  ffi.Pointer<EVP_AEAD_CTX> ctx,
);

typedef _dart_EVP_AEAD_CTX_free = void Function(
  ffi.Pointer<EVP_AEAD_CTX> ctx,
);

typedef _c_EVP_AEAD_CTX_seal = ffi.Int32 Function(
  ffi.Pointer<EVP_AEAD_CTX> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.IntPtr> out_len,
  ffi.IntPtr max_out_len,
  ffi.Pointer<ffi.Uint8> nonce,
  ffi.IntPtr nonce_len,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.IntPtr in_len,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.IntPtr ad_len,
);

typedef _dart_EVP_AEAD_CTX_seal = int Function(
  ffi.Pointer<EVP_AEAD_CTX> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.IntPtr> out_len,
  int max_out_len,
  ffi.Pointer<ffi.Uint8> nonce,
  int nonce_len,
  ffi.Pointer<ffi.Uint8> in_1,
  int in_len,
  ffi.Pointer<ffi.Uint8> ad,
  int ad_len,
);

typedef _c_EVP_AEAD_CTX_open = ffi.Int32 Function(
  ffi.Pointer<EVP_AEAD_CTX> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.IntPtr> out_len,
  ffi.IntPtr max_out_len,
  ffi.Pointer<ffi.Uint8> nonce,
  ffi.IntPtr nonce_len,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.IntPtr in_len,
  ffi.Pointer<ffi.Uint8> ad,
  ffi.IntPtr ad_len,
);

typedef _dart_EVP_AEAD_CTX_open = int Function(
  ffi.Pointer<EVP_AEAD_CTX> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.IntPtr> out_len,
  int max_out_len,
  ffi.Pointer<ffi.Uint8> nonce,
  int nonce_len,
  ffi.Pointer<ffi.Uint8> in_1,
  int in_len,
  ffi.Pointer<ffi.Uint8> ad,
  int ad_len,
);

typedef _c_EVP_PKEY_new = ffi.Pointer<EVP_PKEY> Function();

typedef _dart_EVP_PKEY_new = ffi.Pointer<EVP_PKEY> Function();

typedef _c_EVP_PKEY_free = ffi.Void Function(
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _dart_EVP_PKEY_free = void Function(
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _c_EVP_PKEY_id = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _dart_EVP_PKEY_id = int Function(
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _c_EVP_PKEY_set1_RSA = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY> pkey,
  ffi.Pointer<rsa_st> key,
);

typedef _dart_EVP_PKEY_set1_RSA = int Function(
  ffi.Pointer<EVP_PKEY> pkey,
  ffi.Pointer<rsa_st> key,
);

typedef _c_EVP_PKEY_get1_RSA = ffi.Pointer<rsa_st> Function(
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _dart_EVP_PKEY_get1_RSA = ffi.Pointer<rsa_st> Function(
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _c_EVP_PKEY_set1_EC_KEY = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY> pkey,
  ffi.Pointer<ec_key_st> key,
);

typedef _dart_EVP_PKEY_set1_EC_KEY = int Function(
  ffi.Pointer<EVP_PKEY> pkey,
  ffi.Pointer<ec_key_st> key,
);

typedef _c_EVP_PKEY_get1_EC_KEY = ffi.Pointer<ec_key_st> Function(
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _dart_EVP_PKEY_get1_EC_KEY = ffi.Pointer<ec_key_st> Function(
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _c_EVP_PKEY_set_type = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY> pkey,
  ffi.Int32 type,
);

typedef _dart_EVP_PKEY_set_type = int Function(
  ffi.Pointer<EVP_PKEY> pkey,
  int type,
);

typedef _c_EVP_parse_public_key = ffi.Pointer<EVP_PKEY> Function(
  ffi.Pointer<CBS> cbs,
);

typedef _dart_EVP_parse_public_key = ffi.Pointer<EVP_PKEY> Function(
  ffi.Pointer<CBS> cbs,
);

typedef _c_EVP_marshal_public_key = ffi.Int32 Function(
  ffi.Pointer<CBB> cbb,
  ffi.Pointer<EVP_PKEY> key,
);

typedef _dart_EVP_marshal_public_key = int Function(
  ffi.Pointer<CBB> cbb,
  ffi.Pointer<EVP_PKEY> key,
);

typedef _c_EVP_parse_private_key = ffi.Pointer<EVP_PKEY> Function(
  ffi.Pointer<CBS> cbs,
);

typedef _dart_EVP_parse_private_key = ffi.Pointer<EVP_PKEY> Function(
  ffi.Pointer<CBS> cbs,
);

typedef _c_EVP_marshal_private_key = ffi.Int32 Function(
  ffi.Pointer<CBB> cbb,
  ffi.Pointer<EVP_PKEY> key,
);

typedef _dart_EVP_marshal_private_key = int Function(
  ffi.Pointer<CBB> cbb,
  ffi.Pointer<EVP_PKEY> key,
);

typedef _c_EVP_DigestSignInit = ffi.Int32 Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
  ffi.Pointer<EVP_MD> type,
  ffi.Pointer<engine_st> e,
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _dart_EVP_DigestSignInit = int Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
  ffi.Pointer<EVP_MD> type,
  ffi.Pointer<engine_st> e,
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _c_EVP_DigestSignUpdate = ffi.Int32 Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr len,
);

typedef _dart_EVP_DigestSignUpdate = int Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Void> data,
  int len,
);

typedef _c_EVP_DigestSignFinal = ffi.Int32 Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Uint8> out_sig,
  ffi.Pointer<ffi.IntPtr> out_sig_len,
);

typedef _dart_EVP_DigestSignFinal = int Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Uint8> out_sig,
  ffi.Pointer<ffi.IntPtr> out_sig_len,
);

typedef _c_EVP_DigestVerifyInit = ffi.Int32 Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
  ffi.Pointer<EVP_MD> type,
  ffi.Pointer<engine_st> e,
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _dart_EVP_DigestVerifyInit = int Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Pointer<EVP_PKEY_CTX>> pctx,
  ffi.Pointer<EVP_MD> type,
  ffi.Pointer<engine_st> e,
  ffi.Pointer<EVP_PKEY> pkey,
);

typedef _c_EVP_DigestVerifyUpdate = ffi.Int32 Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr len,
);

typedef _dart_EVP_DigestVerifyUpdate = int Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Void> data,
  int len,
);

typedef _c_EVP_DigestVerifyFinal = ffi.Int32 Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Uint8> sig,
  ffi.IntPtr sig_len,
);

typedef _dart_EVP_DigestVerifyFinal = int Function(
  ffi.Pointer<EVP_MD_CTX> ctx,
  ffi.Pointer<ffi.Uint8> sig,
  int sig_len,
);

typedef _c_PKCS5_PBKDF2_HMAC = ffi.Int32 Function(
  ffi.Pointer<ffi.Int8> password,
  ffi.IntPtr password_len,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.IntPtr salt_len,
  ffi.Uint32 iterations,
  ffi.Pointer<EVP_MD> digest,
  ffi.IntPtr key_len,
  ffi.Pointer<ffi.Uint8> out_key,
);

typedef _dart_PKCS5_PBKDF2_HMAC = int Function(
  ffi.Pointer<ffi.Int8> password,
  int password_len,
  ffi.Pointer<ffi.Uint8> salt,
  int salt_len,
  int iterations,
  ffi.Pointer<EVP_MD> digest,
  int key_len,
  ffi.Pointer<ffi.Uint8> out_key,
);

typedef _c_EVP_PKEY_CTX_new = ffi.Pointer<EVP_PKEY_CTX> Function(
  ffi.Pointer<EVP_PKEY> pkey,
  ffi.Pointer<engine_st> e,
);

typedef _dart_EVP_PKEY_CTX_new = ffi.Pointer<EVP_PKEY_CTX> Function(
  ffi.Pointer<EVP_PKEY> pkey,
  ffi.Pointer<engine_st> e,
);

typedef _c_EVP_PKEY_CTX_free = ffi.Void Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
);

typedef _dart_EVP_PKEY_CTX_free = void Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
);

typedef _c_EVP_PKEY_encrypt_init = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
);

typedef _dart_EVP_PKEY_encrypt_init = int Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
);

typedef _c_EVP_PKEY_encrypt = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.IntPtr> out_len,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.IntPtr in_len,
);

typedef _dart_EVP_PKEY_encrypt = int Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.IntPtr> out_len,
  ffi.Pointer<ffi.Uint8> in_1,
  int in_len,
);

typedef _c_EVP_PKEY_decrypt_init = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
);

typedef _dart_EVP_PKEY_decrypt_init = int Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
);

typedef _c_EVP_PKEY_decrypt = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.IntPtr> out_len,
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.IntPtr in_len,
);

typedef _dart_EVP_PKEY_decrypt = int Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.IntPtr> out_len,
  ffi.Pointer<ffi.Uint8> in_1,
  int in_len,
);

typedef _c_EVP_PKEY_CTX_set_rsa_padding = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Int32 padding,
);

typedef _dart_EVP_PKEY_CTX_set_rsa_padding = int Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  int padding,
);

typedef _c_EVP_PKEY_CTX_set_rsa_pss_saltlen = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Int32 salt_len,
);

typedef _dart_EVP_PKEY_CTX_set_rsa_pss_saltlen = int Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  int salt_len,
);

typedef _c_EVP_PKEY_CTX_set_rsa_oaep_md = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Pointer<EVP_MD> md,
);

typedef _dart_EVP_PKEY_CTX_set_rsa_oaep_md = int Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Pointer<EVP_MD> md,
);

typedef _c_EVP_PKEY_CTX_set_rsa_mgf1_md = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Pointer<EVP_MD> md,
);

typedef _dart_EVP_PKEY_CTX_set_rsa_mgf1_md = int Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Pointer<EVP_MD> md,
);

typedef _c_EVP_PKEY_CTX_set0_rsa_oaep_label = ffi.Int32 Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Pointer<ffi.Uint8> label,
  ffi.IntPtr label_len,
);

typedef _dart_EVP_PKEY_CTX_set0_rsa_oaep_label = int Function(
  ffi.Pointer<EVP_PKEY_CTX> ctx,
  ffi.Pointer<ffi.Uint8> label,
  int label_len,
);

typedef _c_BN_new = ffi.Pointer<BIGNUM> Function();

typedef _dart_BN_new = ffi.Pointer<BIGNUM> Function();

typedef _c_BN_free = ffi.Void Function(
  ffi.Pointer<BIGNUM> bn,
);

typedef _dart_BN_free = void Function(
  ffi.Pointer<BIGNUM> bn,
);

typedef _c_BN_value_one = ffi.Pointer<BIGNUM> Function();

typedef _dart_BN_value_one = ffi.Pointer<BIGNUM> Function();

typedef _c_BN_num_bytes = ffi.Uint32 Function(
  ffi.Pointer<BIGNUM> bn,
);

typedef _dart_BN_num_bytes = int Function(
  ffi.Pointer<BIGNUM> bn,
);

typedef _c_BN_set_word = ffi.Int32 Function(
  ffi.Pointer<BIGNUM> bn,
  ffi.Uint64 value,
);

typedef _dart_BN_set_word = int Function(
  ffi.Pointer<BIGNUM> bn,
  int value,
);

typedef _c_BN_bin2bn = ffi.Pointer<BIGNUM> Function(
  ffi.Pointer<ffi.Uint8> in_1,
  ffi.IntPtr len,
  ffi.Pointer<BIGNUM> ret,
);

typedef _dart_BN_bin2bn = ffi.Pointer<BIGNUM> Function(
  ffi.Pointer<ffi.Uint8> in_1,
  int len,
  ffi.Pointer<BIGNUM> ret,
);

typedef _c_BN_bn2bin_padded = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out,
  ffi.IntPtr len,
  ffi.Pointer<BIGNUM> in_1,
);

typedef _dart_BN_bn2bin_padded = int Function(
  ffi.Pointer<ffi.Uint8> out,
  int len,
  ffi.Pointer<BIGNUM> in_1,
);

typedef _c_BN_add = ffi.Int32 Function(
  ffi.Pointer<BIGNUM> r,
  ffi.Pointer<BIGNUM> a,
  ffi.Pointer<BIGNUM> b,
);

typedef _dart_BN_add = int Function(
  ffi.Pointer<BIGNUM> r,
  ffi.Pointer<BIGNUM> a,
  ffi.Pointer<BIGNUM> b,
);

typedef _c_BN_sub = ffi.Int32 Function(
  ffi.Pointer<BIGNUM> r,
  ffi.Pointer<BIGNUM> a,
  ffi.Pointer<BIGNUM> b,
);

typedef _dart_BN_sub = int Function(
  ffi.Pointer<BIGNUM> r,
  ffi.Pointer<BIGNUM> a,
  ffi.Pointer<BIGNUM> b,
);

typedef _c_BN_cmp = ffi.Int32 Function(
  ffi.Pointer<BIGNUM> a,
  ffi.Pointer<BIGNUM> b,
);

typedef _dart_BN_cmp = int Function(
  ffi.Pointer<BIGNUM> a,
  ffi.Pointer<BIGNUM> b,
);

typedef _c_BN_lshift = ffi.Int32 Function(
  ffi.Pointer<BIGNUM> r,
  ffi.Pointer<BIGNUM> a,
  ffi.Int32 n,
);

typedef _dart_BN_lshift = int Function(
  ffi.Pointer<BIGNUM> r,
  ffi.Pointer<BIGNUM> a,
  int n,
);

typedef _c_EC_GROUP_new_by_curve_name = ffi.Pointer<ec_group_st> Function(
  ffi.Int32 nid,
);

typedef _dart_EC_GROUP_new_by_curve_name = ffi.Pointer<ec_group_st> Function(
  int nid,
);

typedef _c_EC_GROUP_free = ffi.Void Function(
  ffi.Pointer<ec_group_st> group,
);

typedef _dart_EC_GROUP_free = void Function(
  ffi.Pointer<ec_group_st> group,
);

typedef _c_EC_GROUP_get0_order = ffi.Pointer<BIGNUM> Function(
  ffi.Pointer<ec_group_st> group,
);

typedef _dart_EC_GROUP_get0_order = ffi.Pointer<BIGNUM> Function(
  ffi.Pointer<ec_group_st> group,
);

typedef _c_EC_GROUP_get_curve_name = ffi.Int32 Function(
  ffi.Pointer<ec_group_st> group,
);

typedef _dart_EC_GROUP_get_curve_name = int Function(
  ffi.Pointer<ec_group_st> group,
);

typedef _c_EC_GROUP_get_degree = ffi.Uint32 Function(
  ffi.Pointer<ec_group_st> group,
);

typedef _dart_EC_GROUP_get_degree = int Function(
  ffi.Pointer<ec_group_st> group,
);

typedef _c_EC_POINT_new = ffi.Pointer<ec_point_st> Function(
  ffi.Pointer<ec_group_st> group,
);

typedef _dart_EC_POINT_new = ffi.Pointer<ec_point_st> Function(
  ffi.Pointer<ec_group_st> group,
);

typedef _c_EC_POINT_free = ffi.Void Function(
  ffi.Pointer<ec_point_st> point,
);

typedef _dart_EC_POINT_free = void Function(
  ffi.Pointer<ec_point_st> point,
);

typedef _c_EC_POINT_get_affine_coordinates_GFp = ffi.Int32 Function(
  ffi.Pointer<ec_group_st> group,
  ffi.Pointer<ec_point_st> point,
  ffi.Pointer<BIGNUM> x,
  ffi.Pointer<BIGNUM> y,
  ffi.Pointer<bignum_ctx> ctx,
);

typedef _dart_EC_POINT_get_affine_coordinates_GFp = int Function(
  ffi.Pointer<ec_group_st> group,
  ffi.Pointer<ec_point_st> point,
  ffi.Pointer<BIGNUM> x,
  ffi.Pointer<BIGNUM> y,
  ffi.Pointer<bignum_ctx> ctx,
);

typedef _c_EC_POINT_point2cbb = ffi.Int32 Function(
  ffi.Pointer<CBB> out,
  ffi.Pointer<ec_group_st> group,
  ffi.Pointer<ec_point_st> point,
  ffi.Int32 form,
  ffi.Pointer<bignum_ctx> ctx,
);

typedef _dart_EC_POINT_point2cbb = int Function(
  ffi.Pointer<CBB> out,
  ffi.Pointer<ec_group_st> group,
  ffi.Pointer<ec_point_st> point,
  int form,
  ffi.Pointer<bignum_ctx> ctx,
);

typedef _c_EC_POINT_oct2point = ffi.Int32 Function(
  ffi.Pointer<ec_group_st> group,
  ffi.Pointer<ec_point_st> point,
  ffi.Pointer<ffi.Uint8> buf,
  ffi.IntPtr len,
  ffi.Pointer<bignum_ctx> ctx,
);

typedef _dart_EC_POINT_oct2point = int Function(
  ffi.Pointer<ec_group_st> group,
  ffi.Pointer<ec_point_st> point,
  ffi.Pointer<ffi.Uint8> buf,
  int len,
  ffi.Pointer<bignum_ctx> ctx,
);

typedef _c_EC_KEY_new_by_curve_name = ffi.Pointer<ec_key_st> Function(
  ffi.Int32 nid,
);

typedef _dart_EC_KEY_new_by_curve_name = ffi.Pointer<ec_key_st> Function(
  int nid,
);

typedef _c_EC_KEY_free = ffi.Void Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _dart_EC_KEY_free = void Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _c_EC_KEY_get0_group = ffi.Pointer<ec_group_st> Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _dart_EC_KEY_get0_group = ffi.Pointer<ec_group_st> Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _c_EC_KEY_get0_private_key = ffi.Pointer<BIGNUM> Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _dart_EC_KEY_get0_private_key = ffi.Pointer<BIGNUM> Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _c_EC_KEY_set_private_key = ffi.Int32 Function(
  ffi.Pointer<ec_key_st> key,
  ffi.Pointer<BIGNUM> priv,
);

typedef _dart_EC_KEY_set_private_key = int Function(
  ffi.Pointer<ec_key_st> key,
  ffi.Pointer<BIGNUM> priv,
);

typedef _c_EC_KEY_get0_public_key = ffi.Pointer<ec_point_st> Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _dart_EC_KEY_get0_public_key = ffi.Pointer<ec_point_st> Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _c_EC_KEY_set_public_key = ffi.Int32 Function(
  ffi.Pointer<ec_key_st> key,
  ffi.Pointer<ec_point_st> pub,
);

typedef _dart_EC_KEY_set_public_key = int Function(
  ffi.Pointer<ec_key_st> key,
  ffi.Pointer<ec_point_st> pub,
);

typedef _c_EC_KEY_get_enc_flags = ffi.Uint32 Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _dart_EC_KEY_get_enc_flags = int Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _c_EC_KEY_set_enc_flags = ffi.Void Function(
  ffi.Pointer<ec_key_st> key,
  ffi.Uint32 flags,
);

typedef _dart_EC_KEY_set_enc_flags = void Function(
  ffi.Pointer<ec_key_st> key,
  int flags,
);

typedef _c_EC_KEY_check_key = ffi.Int32 Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _dart_EC_KEY_check_key = int Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _c_EC_KEY_set_public_key_affine_coordinates = ffi.Int32 Function(
  ffi.Pointer<ec_key_st> key,
  ffi.Pointer<BIGNUM> x,
  ffi.Pointer<BIGNUM> y,
);

typedef _dart_EC_KEY_set_public_key_affine_coordinates = int Function(
  ffi.Pointer<ec_key_st> key,
  ffi.Pointer<BIGNUM> x,
  ffi.Pointer<BIGNUM> y,
);

typedef _c_EC_KEY_generate_key = ffi.Int32 Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _dart_EC_KEY_generate_key = int Function(
  ffi.Pointer<ec_key_st> key,
);

typedef _typedefC_6 = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void>,
  ffi.IntPtr,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.IntPtr>,
);

typedef _c_ECDH_compute_key = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> out,
  ffi.IntPtr outlen,
  ffi.Pointer<ec_point_st> pub_key,
  ffi.Pointer<ec_key_st> priv_key,
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> kdf,
);

typedef _dart_ECDH_compute_key = int Function(
  ffi.Pointer<ffi.Void> out,
  int outlen,
  ffi.Pointer<ec_point_st> pub_key,
  ffi.Pointer<ec_key_st> priv_key,
  ffi.Pointer<ffi.NativeFunction<_typedefC_6>> kdf,
);

typedef _c_ECDSA_SIG_new = ffi.Pointer<ecdsa_sig_st> Function();

typedef _dart_ECDSA_SIG_new = ffi.Pointer<ecdsa_sig_st> Function();

typedef _c_ECDSA_SIG_free = ffi.Void Function(
  ffi.Pointer<ecdsa_sig_st> sig,
);

typedef _dart_ECDSA_SIG_free = void Function(
  ffi.Pointer<ecdsa_sig_st> sig,
);

typedef _c_ECDSA_SIG_get0 = ffi.Void Function(
  ffi.Pointer<ecdsa_sig_st> sig,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_r,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_s,
);

typedef _dart_ECDSA_SIG_get0 = void Function(
  ffi.Pointer<ecdsa_sig_st> sig,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_r,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_s,
);

typedef _c_ECDSA_SIG_parse = ffi.Pointer<ecdsa_sig_st> Function(
  ffi.Pointer<CBS> cbs,
);

typedef _dart_ECDSA_SIG_parse = ffi.Pointer<ecdsa_sig_st> Function(
  ffi.Pointer<CBS> cbs,
);

typedef _c_ECDSA_SIG_marshal = ffi.Int32 Function(
  ffi.Pointer<CBB> cbb,
  ffi.Pointer<ecdsa_sig_st> sig,
);

typedef _dart_ECDSA_SIG_marshal = int Function(
  ffi.Pointer<CBB> cbb,
  ffi.Pointer<ecdsa_sig_st> sig,
);

typedef _c_CBS_init = ffi.Void Function(
  ffi.Pointer<CBS> cbs,
  ffi.Pointer<ffi.Uint8> data,
  ffi.IntPtr len,
);

typedef _dart_CBS_init = void Function(
  ffi.Pointer<CBS> cbs,
  ffi.Pointer<ffi.Uint8> data,
  int len,
);

typedef _c_CBB_zero = ffi.Void Function(
  ffi.Pointer<CBB> cbb,
);

typedef _dart_CBB_zero = void Function(
  ffi.Pointer<CBB> cbb,
);

typedef _c_CBB_init = ffi.Int32 Function(
  ffi.Pointer<CBB> cbb,
  ffi.IntPtr initial_capacity,
);

typedef _dart_CBB_init = int Function(
  ffi.Pointer<CBB> cbb,
  int initial_capacity,
);

typedef _c_CBB_cleanup = ffi.Void Function(
  ffi.Pointer<CBB> cbb,
);

typedef _dart_CBB_cleanup = void Function(
  ffi.Pointer<CBB> cbb,
);

typedef _c_CBB_flush = ffi.Int32 Function(
  ffi.Pointer<CBB> cbb,
);

typedef _dart_CBB_flush = int Function(
  ffi.Pointer<CBB> cbb,
);

typedef _c_CBB_data = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<CBB> cbb,
);

typedef _dart_CBB_data = ffi.Pointer<ffi.Uint8> Function(
  ffi.Pointer<CBB> cbb,
);

typedef _c_CBB_len = ffi.IntPtr Function(
  ffi.Pointer<CBB> cbb,
);

typedef _dart_CBB_len = int Function(
  ffi.Pointer<CBB> cbb,
);

typedef _c_RSA_new = ffi.Pointer<rsa_st> Function();

typedef _dart_RSA_new = ffi.Pointer<rsa_st> Function();

typedef _c_RSA_free = ffi.Void Function(
  ffi.Pointer<rsa_st> rsa,
);

typedef _dart_RSA_free = void Function(
  ffi.Pointer<rsa_st> rsa,
);

typedef _c_RSA_get0_key = ffi.Void Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_n,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_e,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_d,
);

typedef _dart_RSA_get0_key = void Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_n,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_e,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_d,
);

typedef _c_RSA_get0_factors = ffi.Void Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_p,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_q,
);

typedef _dart_RSA_get0_factors = void Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_p,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_q,
);

typedef _c_RSA_get0_crt_params = ffi.Void Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_dmp1,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_dmq1,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_iqmp,
);

typedef _dart_RSA_get0_crt_params = void Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_dmp1,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_dmq1,
  ffi.Pointer<ffi.Pointer<BIGNUM>> out_iqmp,
);

typedef _c_RSA_set0_key = ffi.Int32 Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<BIGNUM> n,
  ffi.Pointer<BIGNUM> e,
  ffi.Pointer<BIGNUM> d,
);

typedef _dart_RSA_set0_key = int Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<BIGNUM> n,
  ffi.Pointer<BIGNUM> e,
  ffi.Pointer<BIGNUM> d,
);

typedef _c_RSA_set0_factors = ffi.Int32 Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<BIGNUM> p,
  ffi.Pointer<BIGNUM> q,
);

typedef _dart_RSA_set0_factors = int Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<BIGNUM> p,
  ffi.Pointer<BIGNUM> q,
);

typedef _c_RSA_set0_crt_params = ffi.Int32 Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<BIGNUM> dmp1,
  ffi.Pointer<BIGNUM> dmq1,
  ffi.Pointer<BIGNUM> iqmp,
);

typedef _dart_RSA_set0_crt_params = int Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Pointer<BIGNUM> dmp1,
  ffi.Pointer<BIGNUM> dmq1,
  ffi.Pointer<BIGNUM> iqmp,
);

typedef _c_RSA_generate_key_ex = ffi.Int32 Function(
  ffi.Pointer<rsa_st> rsa,
  ffi.Int32 bits,
  ffi.Pointer<BIGNUM> e,
  ffi.Pointer<bn_gencb_st> cb,
);

typedef _dart_RSA_generate_key_ex = int Function(
  ffi.Pointer<rsa_st> rsa,
  int bits,
  ffi.Pointer<BIGNUM> e,
  ffi.Pointer<bn_gencb_st> cb,
);

typedef _c_RSAPublicKey_dup = ffi.Pointer<rsa_st> Function(
  ffi.Pointer<rsa_st> rsa,
);

typedef _dart_RSAPublicKey_dup = ffi.Pointer<rsa_st> Function(
  ffi.Pointer<rsa_st> rsa,
);

typedef _c_RSA_check_key = ffi.Int32 Function(
  ffi.Pointer<rsa_st> rsa,
);

typedef _dart_RSA_check_key = int Function(
  ffi.Pointer<rsa_st> rsa,
);

typedef _c_OPENSSL_malloc = ffi.Pointer<ffi.Void> Function(
  ffi.IntPtr size,
);

typedef _dart_OPENSSL_malloc = ffi.Pointer<ffi.Void> Function(
  int size,
);

typedef _c_OPENSSL_free = ffi.Void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _dart_OPENSSL_free = void Function(
  ffi.Pointer<ffi.Void> ptr,
);

typedef _c_CRYPTO_memcmp = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> a,
  ffi.Pointer<ffi.Void> b,
  ffi.IntPtr len,
);

typedef _dart_CRYPTO_memcmp = int Function(
  ffi.Pointer<ffi.Void> a,
  ffi.Pointer<ffi.Void> b,
  int len,
);

typedef _c_OPENSSL_memdup = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
  ffi.IntPtr size,
);

typedef _dart_OPENSSL_memdup = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Void> data,
  int size,
);

typedef _c_BORINGSSL_self_test = ffi.Int32 Function();

typedef _dart_BORINGSSL_self_test = int Function();

typedef _c_HKDF = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> out_key,
  ffi.IntPtr out_len,
  ffi.Pointer<EVP_MD> digest,
  ffi.Pointer<ffi.Uint8> secret,
  ffi.IntPtr secret_len,
  ffi.Pointer<ffi.Uint8> salt,
  ffi.IntPtr salt_len,
  ffi.Pointer<ffi.Uint8> info,
  ffi.IntPtr info_len,
);

typedef _dart_HKDF = int Function(
  ffi.Pointer<ffi.Uint8> out_key,
  int out_len,
  ffi.Pointer<EVP_MD> digest,
  ffi.Pointer<ffi.Uint8> secret,
  int secret_len,
  ffi.Pointer<ffi.Uint8> salt,
  int salt_len,
  ffi.Pointer<ffi.Uint8> info,
  int info_len,
);

typedef _c_HMAC_CTX_new = ffi.Pointer<hmac_ctx_st> Function();

typedef _dart_HMAC_CTX_new = ffi.Pointer<hmac_ctx_st> Function();

typedef _c_HMAC_CTX_free = ffi.Void Function(
  ffi.Pointer<hmac_ctx_st> ctx,
);

typedef _dart_HMAC_CTX_free = void Function(
  ffi.Pointer<hmac_ctx_st> ctx,
);

typedef _c_HMAC_Init_ex = ffi.Int32 Function(
  ffi.Pointer<hmac_ctx_st> ctx,
  ffi.Pointer<ffi.Void> key,
  ffi.IntPtr key_len,
  ffi.Pointer<EVP_MD> md,
  ffi.Pointer<engine_st> impl,
);

typedef _dart_HMAC_Init_ex = int Function(
  ffi.Pointer<hmac_ctx_st> ctx,
  ffi.Pointer<ffi.Void> key,
  int key_len,
  ffi.Pointer<EVP_MD> md,
  ffi.Pointer<engine_st> impl,
);

typedef _c_HMAC_Update = ffi.Int32 Function(
  ffi.Pointer<hmac_ctx_st> ctx,
  ffi.Pointer<ffi.Uint8> data,
  ffi.IntPtr data_len,
);

typedef _dart_HMAC_Update = int Function(
  ffi.Pointer<hmac_ctx_st> ctx,
  ffi.Pointer<ffi.Uint8> data,
  int data_len,
);

typedef _c_HMAC_Final = ffi.Int32 Function(
  ffi.Pointer<hmac_ctx_st> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint32> out_len,
);

typedef _dart_HMAC_Final = int Function(
  ffi.Pointer<hmac_ctx_st> ctx,
  ffi.Pointer<ffi.Uint8> out,
  ffi.Pointer<ffi.Uint32> out_len,
);

typedef _c_HMAC_size = ffi.IntPtr Function(
  ffi.Pointer<hmac_ctx_st> ctx,
);

typedef _dart_HMAC_size = int Function(
  ffi.Pointer<hmac_ctx_st> ctx,
);

typedef _c_RAND_bytes = ffi.Int32 Function(
  ffi.Pointer<ffi.Uint8> buf,
  ffi.IntPtr len,
);

typedef _dart_RAND_bytes = int Function(
  ffi.Pointer<ffi.Uint8> buf,
  int len,
);

typedef Dart_PostCObject_Type = ffi.Uint8 Function(
  ffi.Int64,
  ffi.Pointer<Dart_CObject>,
);

typedef Dart_PostInteger_Type = ffi.Uint8 Function(
  ffi.Int64,
  ffi.Int64,
);

typedef Dart_NativeMessageHandler_DL = ffi.Void Function(
  ffi.Int64,
  ffi.Pointer<Dart_CObject>,
);

typedef Dart_NewNativePort_Type = ffi.Int64 Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.NativeFunction<Dart_NativeMessageHandler_DL>>,
  ffi.Uint8,
);

typedef Dart_CloseNativePort_Type = ffi.Uint8 Function(
  ffi.Int64,
);

typedef Dart_IsError_Type = ffi.Uint8 Function(
  ffi.Handle,
);

typedef Dart_IsApiError_Type = ffi.Uint8 Function(
  ffi.Handle,
);

typedef Dart_IsUnhandledExceptionError_Type = ffi.Uint8 Function(
  ffi.Handle,
);

typedef Dart_IsCompilationError_Type = ffi.Uint8 Function(
  ffi.Handle,
);

typedef Dart_IsFatalError_Type = ffi.Uint8 Function(
  ffi.Handle,
);

typedef Dart_GetError_Type = ffi.Pointer<ffi.Int8> Function(
  ffi.Handle,
);

typedef Dart_ErrorHasException_Type = ffi.Uint8 Function(
  ffi.Handle,
);

typedef Dart_ErrorGetException_Type = ffi.Handle Function(
  ffi.Handle,
);

typedef Dart_ErrorGetStackTrace_Type = ffi.Handle Function(
  ffi.Handle,
);

typedef Dart_NewApiError_Type = ffi.Handle Function(
  ffi.Pointer<ffi.Int8>,
);

typedef Dart_NewCompilationError_Type = ffi.Handle Function(
  ffi.Pointer<ffi.Int8>,
);

typedef Dart_NewUnhandledExceptionError_Type = ffi.Handle Function(
  ffi.Handle,
);

typedef Dart_PropagateError_Type = ffi.Void Function(
  ffi.Handle,
);

typedef Dart_HandleFromPersistent_Type = ffi.Handle Function(
  ffi.Handle,
);

typedef Dart_HandleFromWeakPersistent_Type = ffi.Handle Function(
  ffi.Pointer<_Dart_WeakPersistentHandle>,
);

typedef Dart_NewPersistentHandle_Type = ffi.Handle Function(
  ffi.Handle,
);

typedef Dart_SetPersistentHandle_Type = ffi.Void Function(
  ffi.Handle,
  ffi.Handle,
);

typedef Dart_DeletePersistentHandle_Type = ffi.Void Function(
  ffi.Handle,
);

typedef Dart_HandleFinalizer = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef Dart_NewWeakPersistentHandle_Type
    = ffi.Pointer<_Dart_WeakPersistentHandle> Function(
  ffi.Handle,
  ffi.Pointer<ffi.Void>,
  ffi.IntPtr,
  ffi.Pointer<ffi.NativeFunction<Dart_HandleFinalizer>>,
);

typedef Dart_DeleteWeakPersistentHandle_Type = ffi.Void Function(
  ffi.Pointer<_Dart_WeakPersistentHandle>,
);

typedef Dart_UpdateExternalSize_Type = ffi.Void Function(
  ffi.Pointer<_Dart_WeakPersistentHandle>,
  ffi.IntPtr,
);

typedef Dart_NewFinalizableHandle_Type = ffi.Pointer<_Dart_FinalizableHandle>
    Function(
  ffi.Handle,
  ffi.Pointer<ffi.Void>,
  ffi.IntPtr,
  ffi.Pointer<ffi.NativeFunction<Dart_HandleFinalizer>>,
);

typedef Dart_DeleteFinalizableHandle_Type = ffi.Void Function(
  ffi.Pointer<_Dart_FinalizableHandle>,
  ffi.Handle,
);

typedef Dart_UpdateFinalizableExternalSize_Type = ffi.Void Function(
  ffi.Pointer<_Dart_FinalizableHandle>,
  ffi.Handle,
  ffi.IntPtr,
);

typedef Dart_Post_Type = ffi.Uint8 Function(
  ffi.Int64,
  ffi.Handle,
);

typedef Dart_NewSendPort_Type = ffi.Handle Function(
  ffi.Int64,
);

typedef Dart_SendPortGetId_Type = ffi.Handle Function(
  ffi.Handle,
  ffi.Pointer<ffi.Int64>,
);

typedef Dart_EnterScope_Type = ffi.Void Function();

typedef Dart_ExitScope_Type = ffi.Void Function();

typedef _c_webcrypto_dart_dl_initialize = ffi.Int32 Function(
  ffi.Pointer<ffi.Void> initialize_api_dl_data,
);

typedef _dart_webcrypto_dart_dl_initialize = int Function(
  ffi.Pointer<ffi.Void> initialize_api_dl_data,
);

typedef webcrypto_finalizer_t = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef _c_webcrypto_dart_dl_attach_finalizer = ffi.Int32 Function(
  ffi.Handle object,
  ffi.Pointer<ffi.Void> pointer,
  ffi.Pointer<ffi.NativeFunction<webcrypto_finalizer_t>> finalizer,
  ffi.IntPtr external_allocation_size,
);

typedef _dart_webcrypto_dart_dl_attach_finalizer = int Function(
  Object object,
  ffi.Pointer<ffi.Void> pointer,
  ffi.Pointer<ffi.NativeFunction<webcrypto_finalizer_t>> finalizer,
  int external_allocation_size,
);

typedef _c_webcrypto_lookup_symbol = ffi.Pointer<ffi.Void> Function(
  ffi.Int32 index,
);

typedef _dart_webcrypto_lookup_symbol = ffi.Pointer<ffi.Void> Function(
  int index,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef stack_cmp_func = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
);

typedef _typedefC_7 = ffi.Int32 Function(
  ffi.Pointer<x509_lookup_st>,
);

typedef _typedefC_8 = ffi.Void Function(
  ffi.Pointer<x509_lookup_st>,
);

typedef _typedefC_9 = ffi.Int32 Function(
  ffi.Pointer<x509_lookup_st>,
);

typedef _typedefC_10 = ffi.Int32 Function(
  ffi.Pointer<x509_lookup_st>,
);

typedef _typedefC_11 = ffi.Int32 Function(
  ffi.Pointer<x509_lookup_st>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int64,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef _typedefC_12 = ffi.Int32 Function(
  ffi.Pointer<x509_lookup_st>,
  ffi.Int32,
  ffi.Pointer<X509_name_st>,
  ffi.Pointer<X509_OBJECT>,
);

typedef _typedefC_13 = ffi.Int32 Function(
  ffi.Pointer<x509_lookup_st>,
  ffi.Int32,
  ffi.Pointer<X509_name_st>,
  ffi.Pointer<asn1_string_st>,
  ffi.Pointer<X509_OBJECT>,
);

typedef _typedefC_14 = ffi.Int32 Function(
  ffi.Pointer<x509_lookup_st>,
  ffi.Int32,
  ffi.Pointer<ffi.Uint8>,
  ffi.Int32,
  ffi.Pointer<X509_OBJECT>,
);

typedef _typedefC_15 = ffi.Int32 Function(
  ffi.Pointer<x509_lookup_st>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Int32,
  ffi.Pointer<X509_OBJECT>,
);

typedef _typedefC_17 = ffi.Void Function(
  ffi.Int32,
);

typedef _typedefC_18 = ffi.Pointer<ffi.Int8> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_19 = ffi.Pointer<stack_st_CONF_VALUE> Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_20 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Int8>,
);

typedef _typedefC_21 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<stack_st_CONF_VALUE>,
);

typedef _typedefC_22 = ffi.Int32 Function(
  ffi.Pointer<X509_PURPOSE>,
  ffi.Pointer<x509_st>,
  ffi.Int32,
);

typedef ASN1_new_func = ffi.Pointer<ASN1_VALUE_st> Function();

typedef ASN1_free_func = ffi.Void Function(
  ffi.Pointer<ASN1_VALUE_st>,
);

typedef ASN1_d2i_func = ffi.Pointer<ASN1_VALUE_st> Function(
  ffi.Pointer<ffi.Pointer<ASN1_VALUE_st>>,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
  ffi.Int64,
);

typedef ASN1_i2d_func = ffi.Int32 Function(
  ffi.Pointer<ASN1_VALUE_st>,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
);

typedef ASN1_ex_new_func = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ASN1_VALUE_st>>,
  ffi.Pointer<ASN1_ITEM_st>,
);

typedef ASN1_ex_free_func = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ASN1_VALUE_st>>,
  ffi.Pointer<ASN1_ITEM_st>,
);

typedef ASN1_ex_d2i = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ASN1_VALUE_st>>,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
  ffi.Int64,
  ffi.Pointer<ASN1_ITEM_st>,
  ffi.Int32,
  ffi.Int32,
  ffi.Int8,
  ffi.Pointer<ASN1_TLC_st>,
);

typedef ASN1_ex_i2d = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ASN1_VALUE_st>>,
  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
  ffi.Pointer<ASN1_ITEM_st>,
  ffi.Int32,
  ffi.Int32,
);

typedef ASN1_ex_print_func = ffi.Int32 Function(
  ffi.Pointer<bio_st>,
  ffi.Pointer<ffi.Pointer<ASN1_VALUE_st>>,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<asn1_pctx_st>,
);

typedef ASN1_primitive_c2i = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ASN1_VALUE_st>>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Int32,
  ffi.Int32,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ASN1_ITEM_st>,
);

typedef ASN1_primitive_i2c = ffi.Int32 Function(
  ffi.Pointer<ffi.Pointer<ASN1_VALUE_st>>,
  ffi.Pointer<ffi.Uint8>,
  ffi.Pointer<ffi.Int32>,
  ffi.Pointer<ASN1_ITEM_st>,
);

typedef ASN1_primitive_print = ffi.Int32 Function(
  ffi.Pointer<bio_st>,
  ffi.Pointer<ffi.Pointer<ASN1_VALUE_st>>,
  ffi.Pointer<ASN1_ITEM_st>,
  ffi.Int32,
  ffi.Pointer<asn1_pctx_st>,
);

typedef ASN1_aux_cb = ffi.Int32 Function(
  ffi.Int32,
  ffi.Pointer<ffi.Pointer<ASN1_VALUE_st>>,
  ffi.Pointer<ASN1_ITEM_st>,
  ffi.Pointer<ffi.Void>,
);

typedef Dart_IsolateGroupCreateCallback = ffi.Pointer<_Dart_Isolate> Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<ffi.Int8>,
  ffi.Pointer<Dart_IsolateFlags>,
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef Dart_InitializeIsolateCallback = ffi.Uint8 Function(
  ffi.Pointer<ffi.Pointer<ffi.Void>>,
  ffi.Pointer<ffi.Pointer<ffi.Int8>>,
);

typedef Dart_IsolateShutdownCallback = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef Dart_IsolateCleanupCallback = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.Pointer<ffi.Void>,
);

typedef Dart_IsolateGroupCleanupCallback = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef Dart_ThreadExitCallback = ffi.Void Function();

typedef Dart_FileOpenCallback = ffi.Pointer<ffi.Void> Function(
  ffi.Pointer<ffi.Int8>,
  ffi.Uint8,
);

typedef Dart_FileReadCallback = ffi.Void Function(
  ffi.Pointer<ffi.Pointer<ffi.Uint8>>,
  ffi.Pointer<ffi.IntPtr>,
  ffi.Pointer<ffi.Void>,
);

typedef Dart_FileWriteCallback = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
  ffi.IntPtr,
  ffi.Pointer<ffi.Void>,
);

typedef Dart_FileCloseCallback = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);

typedef Dart_EntropySource = ffi.Uint8 Function(
  ffi.Pointer<ffi.Uint8>,
  ffi.IntPtr,
);

typedef Dart_GetVMServiceAssetsArchive = ffi.Handle Function();
