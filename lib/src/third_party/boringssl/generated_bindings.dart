// ignore_for_file: camel_case_types
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: unused_element
// ignore_for_file: unused_field

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to BoringSSL.
class BoringSsl {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  BoringSsl(ffi.DynamicLibrary dynamicLibrary)
      : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  BoringSsl.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  ffi.Pointer<env_md_st> EVP_sha1() {
    return (_EVP_sha1 ??= _lookup<ffi.NativeFunction<_c_EVP_sha1>>('EVP_sha1')
        .asFunction<_dart_EVP_sha1>())();
  }

  _dart_EVP_sha1? _EVP_sha1;

  ffi.Pointer<env_md_st> EVP_sha256() {
    return (_EVP_sha256 ??=
        _lookup<ffi.NativeFunction<_c_EVP_sha256>>('EVP_sha256')
            .asFunction<_dart_EVP_sha256>())();
  }

  _dart_EVP_sha256? _EVP_sha256;

  ffi.Pointer<env_md_st> EVP_sha384() {
    return (_EVP_sha384 ??=
        _lookup<ffi.NativeFunction<_c_EVP_sha384>>('EVP_sha384')
            .asFunction<_dart_EVP_sha384>())();
  }

  _dart_EVP_sha384? _EVP_sha384;

  ffi.Pointer<env_md_st> EVP_sha512() {
    return (_EVP_sha512 ??=
        _lookup<ffi.NativeFunction<_c_EVP_sha512>>('EVP_sha512')
            .asFunction<_dart_EVP_sha512>())();
  }

  _dart_EVP_sha512? _EVP_sha512;

  /// // EVP_MD_CTX_new allocates and initialises a fresh |EVP_MD_CTX| and returns
  /// // it, or NULL on allocation failure. The caller must use |EVP_MD_CTX_free| to
  /// // release the resulting object.
  ffi.Pointer<env_md_ctx_st> EVP_MD_CTX_new() {
    return (_EVP_MD_CTX_new ??=
        _lookup<ffi.NativeFunction<_c_EVP_MD_CTX_new>>('EVP_MD_CTX_new')
            .asFunction<_dart_EVP_MD_CTX_new>())();
  }

  _dart_EVP_MD_CTX_new? _EVP_MD_CTX_new;

  /// // EVP_MD_CTX_free calls |EVP_MD_CTX_cleanup| and then frees |ctx| itself.
  void EVP_MD_CTX_free(
    ffi.Pointer<env_md_ctx_st> ctx,
  ) {
    return (_EVP_MD_CTX_free ??=
        _lookup<ffi.NativeFunction<_c_EVP_MD_CTX_free>>('EVP_MD_CTX_free')
            .asFunction<_dart_EVP_MD_CTX_free>())(
      ctx,
    );
  }

  _dart_EVP_MD_CTX_free? _EVP_MD_CTX_free;

  /// // EVP_DigestInit acts like |EVP_DigestInit_ex| except that |ctx| is
  /// // initialised before use.
  int EVP_DigestInit(
    ffi.Pointer<env_md_ctx_st> ctx,
    ffi.Pointer<env_md_st> type,
  ) {
    return (_EVP_DigestInit ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestInit>>('EVP_DigestInit')
            .asFunction<_dart_EVP_DigestInit>())(
      ctx,
      type,
    );
  }

  _dart_EVP_DigestInit? _EVP_DigestInit;

  /// // EVP_DigestUpdate hashes |len| bytes from |data| into the hashing operation
  /// // in |ctx|. It returns one.
  int EVP_DigestUpdate(
    ffi.Pointer<env_md_ctx_st> ctx,
    ffi.Pointer<ffi.Void> data,
    int len,
  ) {
    return (_EVP_DigestUpdate ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestUpdate>>('EVP_DigestUpdate')
            .asFunction<_dart_EVP_DigestUpdate>())(
      ctx,
      data,
      len,
    );
  }

  _dart_EVP_DigestUpdate? _EVP_DigestUpdate;

  /// // EVP_DigestFinal acts like |EVP_DigestFinal_ex| except that
  /// // |EVP_MD_CTX_cleanup| is called on |ctx| before returning.
  int EVP_DigestFinal(
    ffi.Pointer<env_md_ctx_st> ctx,
    ffi.Pointer<ffi.Uint8> md_out,
    ffi.Pointer<ffi.Uint32> out_size,
  ) {
    return (_EVP_DigestFinal ??=
        _lookup<ffi.NativeFunction<_c_EVP_DigestFinal>>('EVP_DigestFinal')
            .asFunction<_dart_EVP_DigestFinal>())(
      ctx,
      md_out,
      out_size,
    );
  }

  _dart_EVP_DigestFinal? _EVP_DigestFinal;

  /// // EVP_MD_size returns the digest size of |md|, in bytes.
  int EVP_MD_size(
    ffi.Pointer<env_md_st> md,
  ) {
    return (_EVP_MD_size ??=
        _lookup<ffi.NativeFunction<_c_EVP_MD_size>>('EVP_MD_size')
            .asFunction<_dart_EVP_MD_size>())(
      md,
    );
  }

  _dart_EVP_MD_size? _EVP_MD_size;

  /// // EVP_MD_CTX_size returns the digest size of |ctx|, in bytes. It
  /// // will crash if a digest hasn't been set on |ctx|.
  int EVP_MD_CTX_size(
    ffi.Pointer<env_md_ctx_st> ctx,
  ) {
    return (_EVP_MD_CTX_size ??=
        _lookup<ffi.NativeFunction<_c_EVP_MD_CTX_size>>('EVP_MD_CTX_size')
            .asFunction<_dart_EVP_MD_CTX_size>())(
      ctx,
    );
  }

  _dart_EVP_MD_CTX_size? _EVP_MD_CTX_size;
}

class __darwin_pthread_handler_rec extends ffi.Struct {
  external ffi.Pointer<ffi.NativeFunction<_typedefC_1>> __routine;

  external ffi.Pointer<ffi.Void> __arg;

  external ffi.Pointer<__darwin_pthread_handler_rec> __next;
}

class _opaque_pthread_attr_t extends ffi.Opaque {}

class _opaque_pthread_cond_t extends ffi.Opaque {}

class _opaque_pthread_condattr_t extends ffi.Opaque {}

class _opaque_pthread_mutex_t extends ffi.Opaque {}

class _opaque_pthread_mutexattr_t extends ffi.Opaque {}

class _opaque_pthread_once_t extends ffi.Opaque {}

class _opaque_pthread_rwlock_t extends ffi.Opaque {}

class _opaque_pthread_rwlockattr_t extends ffi.Opaque {}

class _opaque_pthread_t extends ffi.Opaque {}

class fd_set extends ffi.Opaque {}

class ASN1_ITEM_st extends ffi.Opaque {}

class asn1_object_st extends ffi.Opaque {}

class asn1_pctx_st extends ffi.Opaque {}

class asn1_string_st extends ffi.Opaque {}

class asn1_type_st extends ffi.Opaque {}

class AUTHORITY_KEYID_st extends ffi.Opaque {}

class BASIC_CONSTRAINTS_st extends ffi.Opaque {}

class DIST_POINT_st extends ffi.Opaque {}

class DSA_SIG_st extends ffi.Opaque {}

class ISSUING_DIST_POINT_st extends ffi.Opaque {}

class NAME_CONSTRAINTS_st extends ffi.Opaque {}

class Netscape_spkac_st extends ffi.Opaque {}

class Netscape_spki_st extends ffi.Opaque {}

class RIPEMD160state_st extends ffi.Opaque {}

class X509_POLICY_CACHE_st extends ffi.Opaque {}

class X509_POLICY_LEVEL_st extends ffi.Opaque {}

class X509_POLICY_NODE_st extends ffi.Opaque {}

class X509_POLICY_TREE_st extends ffi.Opaque {}

class X509_VERIFY_PARAM_st extends ffi.Opaque {}

class X509_algor_st extends ffi.Opaque {}

class X509_crl_info_st extends ffi.Opaque {}

class X509_crl_st extends ffi.Opaque {}

class X509_extension_st extends ffi.Opaque {}

class X509_info_st extends ffi.Opaque {}

class X509_name_entry_st extends ffi.Opaque {}

class X509_name_st extends ffi.Opaque {}

class X509_pubkey_st extends ffi.Opaque {}

class X509_req_info_st extends ffi.Opaque {}

class X509_req_st extends ffi.Opaque {}

class X509_sig_st extends ffi.Opaque {}

class X509_val_st extends ffi.Opaque {}

class bignum_ctx extends ffi.Opaque {}

class bignum_st extends ffi.Opaque {}

class bio_method_st extends ffi.Opaque {}

class bio_st extends ffi.Opaque {}

class bn_gencb_st extends ffi.Opaque {}

class bn_mont_ctx_st extends ffi.Opaque {}

class buf_mem_st extends ffi.Opaque {}

class cbb_st extends ffi.Opaque {}

class cbs_st extends ffi.Opaque {}

class cmac_ctx_st extends ffi.Opaque {}

class conf_st extends ffi.Opaque {}

class conf_value_st extends ffi.Opaque {}

class crypto_buffer_pool_st extends ffi.Opaque {}

class crypto_buffer_st extends ffi.Opaque {}

class dh_st extends ffi.Opaque {}

class dsa_st extends ffi.Opaque {}

class ec_group_st extends ffi.Opaque {}

class ec_key_st extends ffi.Opaque {}

class ec_point_st extends ffi.Opaque {}

class ecdsa_method_st extends ffi.Opaque {}

class ecdsa_sig_st extends ffi.Opaque {}

class engine_st extends ffi.Opaque {}

class env_md_ctx_st extends ffi.Opaque {}

class env_md_st extends ffi.Opaque {}

class evp_aead_st extends ffi.Opaque {}

class evp_cipher_ctx_st extends ffi.Opaque {}

class evp_cipher_st extends ffi.Opaque {}

class evp_encode_ctx_st extends ffi.Opaque {}

class evp_pkey_asn1_method_st extends ffi.Opaque {}

class evp_pkey_ctx_st extends ffi.Opaque {}

class evp_pkey_method_st extends ffi.Opaque {}

class evp_pkey_st extends ffi.Opaque {}

class hmac_ctx_st extends ffi.Opaque {}

class md4_state_st extends ffi.Opaque {}

class md5_state_st extends ffi.Opaque {}

class ossl_init_settings_st extends ffi.Opaque {}

class pkcs12_st extends ffi.Opaque {}

class pkcs8_priv_key_info_st extends ffi.Opaque {}

class private_key_st extends ffi.Opaque {}

class rand_meth_st extends ffi.Opaque {}

class rc4_key_st extends ffi.Opaque {}

class rsa_meth_st extends ffi.Opaque {}

class rsa_st extends ffi.Opaque {}

class sha256_state_st extends ffi.Opaque {}

class sha512_state_st extends ffi.Opaque {}

class sha_state_st extends ffi.Opaque {}

class spake2_ctx_st extends ffi.Opaque {}

class srtp_protection_profile_st extends ffi.Opaque {}

class ssl_cipher_st extends ffi.Opaque {}

class ssl_ctx_st extends ffi.Opaque {}

class ssl_method_st extends ffi.Opaque {}

class ssl_private_key_method_st extends ffi.Opaque {}

class ssl_quic_method_st extends ffi.Opaque {}

class ssl_session_st extends ffi.Opaque {}

class ssl_st extends ffi.Opaque {}

class ssl_ticket_aead_method_st extends ffi.Opaque {}

class st_ERR_FNS extends ffi.Opaque {}

class trust_token_st extends ffi.Opaque {}

class trust_token_client_st extends ffi.Opaque {}

class trust_token_issuer_st extends ffi.Opaque {}

class trust_token_method_st extends ffi.Opaque {}

class v3_ext_ctx extends ffi.Opaque {}

class x509_attributes_st extends ffi.Opaque {}

class x509_cert_aux_st extends ffi.Opaque {}

class x509_cinf_st extends ffi.Opaque {}

class x509_crl_method_st extends ffi.Opaque {}

class x509_lookup_st extends ffi.Opaque {}

class x509_revoked_st extends ffi.Opaque {}

class x509_st extends ffi.Opaque {}

class x509_store_ctx_st extends ffi.Opaque {}

class x509_store_st extends ffi.Opaque {}

class x509_trust_st extends ffi.Opaque {}

class evp_md_pctx_ops extends ffi.Opaque {}

const int __DARWIN_ONLY_64_BIT_INO_T = 0;

const int __DARWIN_ONLY_VERS_1050 = 0;

const int __DARWIN_ONLY_UNIX_CONFORMANCE = 1;

const int __DARWIN_UNIX03 = 1;

const int __DARWIN_64_BIT_INO_T = 1;

const int __DARWIN_VERS_1050 = 1;

const int __DARWIN_NON_CANCELABLE = 0;

const String __DARWIN_SUF_64_BIT_INO_T = '\$INODE64';

const String __DARWIN_SUF_1050 = '\$1050';

const String __DARWIN_SUF_EXTSN = '\$DARWIN_EXTSN';

const int __DARWIN_C_ANSI = 4096;

const int __DARWIN_C_FULL = 900000;

const int __DARWIN_C_LEVEL = 900000;

const int __STDC_WANT_LIB_EXT1__ = 1;

const int __DARWIN_NO_LONG_LONG = 0;

const int _DARWIN_FEATURE_64_BIT_INODE = 1;

const int _DARWIN_FEATURE_ONLY_UNIX_CONFORMANCE = 1;

const int _DARWIN_FEATURE_UNIX_CONFORMANCE = 3;

const int __DARWIN_NULL = 0;

const int __PTHREAD_SIZE__ = 8176;

const int __PTHREAD_ATTR_SIZE__ = 56;

const int __PTHREAD_MUTEXATTR_SIZE__ = 8;

const int __PTHREAD_MUTEX_SIZE__ = 56;

const int __PTHREAD_CONDATTR_SIZE__ = 8;

const int __PTHREAD_COND_SIZE__ = 40;

const int __PTHREAD_ONCE_SIZE__ = 8;

const int __PTHREAD_RWLOCK_SIZE__ = 192;

const int __PTHREAD_RWLOCKATTR_SIZE__ = 16;

const int __DARWIN_WCHAR_MAX = 2147483647;

const int __DARWIN_WCHAR_MIN = -2147483648;

const int __DARWIN_WEOF = -1;

const int _FORTIFY_SOURCE = 2;

const int NULL = 0;

const int USER_ADDR_NULL = 0;

const int __WORDSIZE = 64;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -32768;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 32767;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 65535;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MAX = 9223372036854775807;

const int INTPTR_MIN = -9223372036854775808;

const int UINTPTR_MAX = -1;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int WCHAR_MAX = 2147483647;

const int WCHAR_MIN = -2147483648;

const int WINT_MIN = -2147483648;

const int WINT_MAX = 2147483647;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int _QUAD_HIGHWORD = 1;

const int _QUAD_LOWWORD = 0;

const int __DARWIN_LITTLE_ENDIAN = 1234;

const int __DARWIN_BIG_ENDIAN = 4321;

const int __DARWIN_PDP_ENDIAN = 3412;

const int __DARWIN_BYTE_ORDER = 1234;

const int LITTLE_ENDIAN = 1234;

const int BIG_ENDIAN = 4321;

const int PDP_ENDIAN = 3412;

const int BYTE_ORDER = 1234;

const int __API_TO_BE_DEPRECATED = 100000;

const int __MAC_10_0 = 1000;

const int __MAC_10_1 = 1010;

const int __MAC_10_2 = 1020;

const int __MAC_10_3 = 1030;

const int __MAC_10_4 = 1040;

const int __MAC_10_5 = 1050;

const int __MAC_10_6 = 1060;

const int __MAC_10_7 = 1070;

const int __MAC_10_8 = 1080;

const int __MAC_10_9 = 1090;

const int __MAC_10_10 = 101000;

const int __MAC_10_10_2 = 101002;

const int __MAC_10_10_3 = 101003;

const int __MAC_10_11 = 101100;

const int __MAC_10_11_2 = 101102;

const int __MAC_10_11_3 = 101103;

const int __MAC_10_11_4 = 101104;

const int __MAC_10_12 = 101200;

const int __MAC_10_12_1 = 101201;

const int __MAC_10_12_2 = 101202;

const int __MAC_10_12_4 = 101204;

const int __MAC_10_13 = 101300;

const int __MAC_10_13_1 = 101301;

const int __MAC_10_13_2 = 101302;

const int __MAC_10_13_4 = 101304;

const int __MAC_10_14 = 101400;

const int __MAC_10_14_1 = 101401;

const int __MAC_10_14_4 = 101404;

const int __MAC_10_15 = 101500;

const int __MAC_10_15_1 = 101501;

const int __MAC_10_15_4 = 101504;

const int __IPHONE_2_0 = 20000;

const int __IPHONE_2_1 = 20100;

const int __IPHONE_2_2 = 20200;

const int __IPHONE_3_0 = 30000;

const int __IPHONE_3_1 = 30100;

const int __IPHONE_3_2 = 30200;

const int __IPHONE_4_0 = 40000;

const int __IPHONE_4_1 = 40100;

const int __IPHONE_4_2 = 40200;

const int __IPHONE_4_3 = 40300;

const int __IPHONE_5_0 = 50000;

const int __IPHONE_5_1 = 50100;

const int __IPHONE_6_0 = 60000;

const int __IPHONE_6_1 = 60100;

const int __IPHONE_7_0 = 70000;

const int __IPHONE_7_1 = 70100;

const int __IPHONE_8_0 = 80000;

const int __IPHONE_8_1 = 80100;

const int __IPHONE_8_2 = 80200;

const int __IPHONE_8_3 = 80300;

const int __IPHONE_8_4 = 80400;

const int __IPHONE_9_0 = 90000;

const int __IPHONE_9_1 = 90100;

const int __IPHONE_9_2 = 90200;

const int __IPHONE_9_3 = 90300;

const int __IPHONE_10_0 = 100000;

const int __IPHONE_10_1 = 100100;

const int __IPHONE_10_2 = 100200;

const int __IPHONE_10_3 = 100300;

const int __IPHONE_11_0 = 110000;

const int __IPHONE_11_1 = 110100;

const int __IPHONE_11_2 = 110200;

const int __IPHONE_11_3 = 110300;

const int __IPHONE_11_4 = 110400;

const int __IPHONE_12_0 = 120000;

const int __IPHONE_12_1 = 120100;

const int __IPHONE_12_2 = 120200;

const int __IPHONE_12_3 = 120300;

const int __IPHONE_13_0 = 130000;

const int __IPHONE_13_1 = 130100;

const int __IPHONE_13_2 = 130200;

const int __IPHONE_13_3 = 130300;

const int __IPHONE_13_4 = 130400;

const int __IPHONE_13_5 = 130500;

const int __IPHONE_13_6 = 130600;

const int __TVOS_9_0 = 90000;

const int __TVOS_9_1 = 90100;

const int __TVOS_9_2 = 90200;

const int __TVOS_10_0 = 100000;

const int __TVOS_10_0_1 = 100001;

const int __TVOS_10_1 = 100100;

const int __TVOS_10_2 = 100200;

const int __TVOS_11_0 = 110000;

const int __TVOS_11_1 = 110100;

const int __TVOS_11_2 = 110200;

const int __TVOS_11_3 = 110300;

const int __TVOS_11_4 = 110400;

const int __TVOS_12_0 = 120000;

const int __TVOS_12_1 = 120100;

const int __TVOS_12_2 = 120200;

const int __TVOS_12_3 = 120300;

const int __TVOS_13_0 = 130000;

const int __TVOS_13_2 = 130200;

const int __TVOS_13_3 = 130300;

const int __TVOS_13_4 = 130400;

const int __WATCHOS_1_0 = 10000;

const int __WATCHOS_2_0 = 20000;

const int __WATCHOS_2_1 = 20100;

const int __WATCHOS_2_2 = 20200;

const int __WATCHOS_3_0 = 30000;

const int __WATCHOS_3_1 = 30100;

const int __WATCHOS_3_1_1 = 30101;

const int __WATCHOS_3_2 = 30200;

const int __WATCHOS_4_0 = 40000;

const int __WATCHOS_4_1 = 40100;

const int __WATCHOS_4_2 = 40200;

const int __WATCHOS_4_3 = 40300;

const int __WATCHOS_5_0 = 50000;

const int __WATCHOS_5_1 = 50100;

const int __WATCHOS_5_2 = 50200;

const int __WATCHOS_6_0 = 60000;

const int __WATCHOS_6_1 = 60100;

const int __WATCHOS_6_2 = 60200;

const int __DRIVERKIT_19_0 = 190000;

const int __MAC_OS_X_VERSION_MIN_REQUIRED = 101600;

const int __MAC_OS_X_VERSION_MAX_ALLOWED = 101500;

const int __ENABLE_LEGACY_MAC_AVAILABILITY = 1;

const int __DARWIN_FD_SETSIZE = 1024;

const int __DARWIN_NBBY = 8;

const int __DARWIN_NFDBITS = 32;

const int NBBY = 8;

const int NFDBITS = 32;

const int FD_SETSIZE = 1024;

const int DYNAMIC_TARGETS_ENABLED = 0;

const int TARGET_OS_MAC = 1;

const int TARGET_OS_WIN32 = 0;

const int TARGET_OS_UNIX = 0;

const int TARGET_OS_OSX = 1;

const int TARGET_OS_IPHONE = 0;

const int TARGET_OS_IOS = 0;

const int TARGET_OS_WATCH = 0;

const int TARGET_OS_TV = 0;

const int TARGET_OS_MACCATALYST = 0;

const int TARGET_OS_UIKITFORMAC = 0;

const int TARGET_OS_SIMULATOR = 0;

const int TARGET_OS_EMBEDDED = 0;

const int TARGET_OS_RTKIT = 0;

const int TARGET_OS_DRIVERKIT = 0;

const int TARGET_IPHONE_SIMULATOR = 0;

const int TARGET_OS_NANO = 0;

const int TARGET_ABI_USES_IOS_VALUES = 0;

const int TARGET_CPU_PPC = 0;

const int TARGET_CPU_PPC64 = 0;

const int TARGET_CPU_68K = 0;

const int TARGET_CPU_X86 = 0;

const int TARGET_CPU_X86_64 = 1;

const int TARGET_CPU_ARM = 0;

const int TARGET_CPU_ARM64 = 0;

const int TARGET_CPU_MIPS = 0;

const int TARGET_CPU_SPARC = 0;

const int TARGET_CPU_ALPHA = 0;

const int TARGET_RT_MAC_CFM = 0;

const int TARGET_RT_MAC_MACHO = 1;

const int TARGET_RT_LITTLE_ENDIAN = 1;

const int TARGET_RT_BIG_ENDIAN = 0;

const int TARGET_RT_64_BIT = 1;

const int OPENSSL_VERSION_NUMBER = 269484159;

const int SSLEAY_VERSION_NUMBER = 269484159;

const int BORINGSSL_API_VERSION = 10;

const int EVP_MAX_MD_SIZE = 64;

const int EVP_MAX_MD_BLOCK_SIZE = 128;

const int EVP_MD_FLAG_PKEY_DIGEST = 1;

const int EVP_MD_FLAG_DIGALGID_ABSENT = 2;

const int EVP_MD_FLAG_XOF = 4;

const int DIGEST_R_INPUT_NOT_INITIALIZED = 100;

const int DIGEST_R_DECODE_ERROR = 101;

const int DIGEST_R_UNKNOWN_HASH = 102;

typedef _c_EVP_sha1 = ffi.Pointer<env_md_st> Function();

typedef _dart_EVP_sha1 = ffi.Pointer<env_md_st> Function();

typedef _c_EVP_sha256 = ffi.Pointer<env_md_st> Function();

typedef _dart_EVP_sha256 = ffi.Pointer<env_md_st> Function();

typedef _c_EVP_sha384 = ffi.Pointer<env_md_st> Function();

typedef _dart_EVP_sha384 = ffi.Pointer<env_md_st> Function();

typedef _c_EVP_sha512 = ffi.Pointer<env_md_st> Function();

typedef _dart_EVP_sha512 = ffi.Pointer<env_md_st> Function();

typedef _c_EVP_MD_CTX_new = ffi.Pointer<env_md_ctx_st> Function();

typedef _dart_EVP_MD_CTX_new = ffi.Pointer<env_md_ctx_st> Function();

typedef _c_EVP_MD_CTX_free = ffi.Void Function(
  ffi.Pointer<env_md_ctx_st> ctx,
);

typedef _dart_EVP_MD_CTX_free = void Function(
  ffi.Pointer<env_md_ctx_st> ctx,
);

typedef _c_EVP_DigestInit = ffi.Int32 Function(
  ffi.Pointer<env_md_ctx_st> ctx,
  ffi.Pointer<env_md_st> type,
);

typedef _dart_EVP_DigestInit = int Function(
  ffi.Pointer<env_md_ctx_st> ctx,
  ffi.Pointer<env_md_st> type,
);

typedef _c_EVP_DigestUpdate = ffi.Int32 Function(
  ffi.Pointer<env_md_ctx_st> ctx,
  ffi.Pointer<ffi.Void> data,
  ffi.Uint64 len,
);

typedef _dart_EVP_DigestUpdate = int Function(
  ffi.Pointer<env_md_ctx_st> ctx,
  ffi.Pointer<ffi.Void> data,
  int len,
);

typedef _c_EVP_DigestFinal = ffi.Int32 Function(
  ffi.Pointer<env_md_ctx_st> ctx,
  ffi.Pointer<ffi.Uint8> md_out,
  ffi.Pointer<ffi.Uint32> out_size,
);

typedef _dart_EVP_DigestFinal = int Function(
  ffi.Pointer<env_md_ctx_st> ctx,
  ffi.Pointer<ffi.Uint8> md_out,
  ffi.Pointer<ffi.Uint32> out_size,
);

typedef _c_EVP_MD_size = ffi.Uint64 Function(
  ffi.Pointer<env_md_st> md,
);

typedef _dart_EVP_MD_size = int Function(
  ffi.Pointer<env_md_st> md,
);

typedef _c_EVP_MD_CTX_size = ffi.Uint64 Function(
  ffi.Pointer<env_md_ctx_st> ctx,
);

typedef _dart_EVP_MD_CTX_size = int Function(
  ffi.Pointer<env_md_ctx_st> ctx,
);

typedef _typedefC_1 = ffi.Void Function(
  ffi.Pointer<ffi.Void>,
);
